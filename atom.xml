<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yunvoo Blog</title>
  <subtitle>人生如路--&gt;须在荒凉中走出繁华的风景</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yunvoo.com/"/>
  <updated>2016-06-21T02:01:26.565Z</updated>
  <id>http://yunvoo.com/</id>
  
  <author>
    <name>yunvoo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>首超美国：中国自主芯片全球称雄</title>
    <link href="http://yunvoo.com//blog/2016/06/21/%E9%A6%96%E8%B6%85%E7%BE%8E%E5%9B%BD%EF%BC%9A%E4%B8%AD%E5%9B%BD%E8%87%AA%E4%B8%BB%E8%8A%AF%E7%89%87%E5%85%A8%E7%90%83%E7%A7%B0%E9%9B%84.html"/>
    <id>http://yunvoo.com//blog/2016/06/21/首超美国：中国自主芯片全球称雄.html</id>
    <published>2016-06-20T23:45:04.000Z</published>
    <updated>2016-06-21T02:01:26.565Z</updated>
    
    <content type="html">&lt;p&gt;&lt;code&gt;多维新闻&lt;/code&gt;中国自主芯片制造的超级计算机首次荣登全球超级计算机500强榜首，对美国科技主导地位构成挑战，这也是中国尝试减少科技进口依赖的突破。此外中国超级计算机上榜总数量有史以来首次超过美国名列第一。&lt;/p&gt;
&lt;p&gt;据华尔街见闻网报道称，6月20日，新一期全球超级计算机500强榜单公布，使用中国自主芯片制造的“神威太湖之光”取代“天河二号”登上榜首。更重要的是，与“天河二号”使用英特尔芯片不一样，“神威太湖之光”使用的是中国自主知识产权的芯片。“神威太湖之光”的浮点运算速度为每秒9.3亿亿次，不仅速度比第二名“天河二号”快出近两倍，其效率也提高3倍。&lt;/p&gt;
&lt;p&gt;其声明中写道：“中国在国际TOP500组织第47期榜单上保持第一名的位置，凭借的是一个完全基于中国设计、制造处理器而打造的新系统。”&lt;/p&gt;
&lt;p&gt;“神威太湖之光”由国家并行计算机工程技术研究中心研制，安装在国家超级计算无锡中心。此前，由中国国防科技大学研制的“天河二号”超级计算机已在TOP500榜单上连续六度称雄。&lt;br&gt;&lt;strong&gt; 中国自主芯片制造的超级计算机荣登全球榜首 &lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://7xrzzi.com1.z0.glb.clouddn.com/duowen.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;TOP500榜单是对全球已安装的超级计算机“排座次”的权威排行榜。从1993年起，由TOP500国际组织以实测计算速度为基准每半年发布一次。&lt;/p&gt;
&lt;p&gt;此次榜单还有一个重大变动是，美国入围的超级计算机总数量首次跌下第一位置。上述声明说，由于过去一些年中国工业和研究部门注册提交的系统数量剧增，中国现在入榜的超级计算机数量达到167台，超过美国的165台。此外，由于中国占据TOP榜单头两名，中国在计算性能类别上也居于领先位置。&lt;/p&gt;
&lt;p&gt;排行榜主要编撰人、美国田纳西大学计算机学教授Jack Dongarra评价道，2001年中国上榜数量还是零，但今天中国已经超过美国，没有其他国家有这样快的增长速度。&lt;/p&gt;
&lt;p&gt;他认为，超级计算机“比以往任何时候都重要”，能为能源、医药、飞机制造、汽车与娱乐业等广泛领域的行业提供高性能计算服务。“更强大的计算能力将使得这些不同行业更快地生产出优异新产品，从而提高一个国家的竞争力”。&lt;/p&gt;
&lt;p&gt;在计算机服务器领域，神威太湖之光的胜利对英特尔的主导权构成特别挑战。目前英特尔控制着96%的计算机服务器市场。&lt;/p&gt;
&lt;p&gt;超级计算机是能够执行一般个人电脑无法处理的大资料量与高速运算的电脑，其基本组成组件与个人电脑的概念无太大差异，但规格与性能强大许多，且价格昂贵又相对稀有。&lt;/p&gt;
&lt;p&gt;包括美国高通在内的其他芯片制造商正与中国的组织合作，在中国培养研究员。安谋国际科技（ARM Holdings）同样也想在中国市场分得一杯羹。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;多维新闻&lt;/code&gt;中国自主芯片制造的超级计算机首次荣登全球超级计算机500强榜首，对美国科技主导地位构成挑战，这也是中国尝试减少科技进口依赖的突破。此外中国超级计算机上榜总数量有史以来首次超过美国名列第一。&lt;/p&gt;
&lt;p&gt;据华尔街见闻网报道称，6月20日，新
    
    </summary>
    
      <category term="金融经济" scheme="http://yunvoo.com/categories/%E9%87%91%E8%9E%8D%E7%BB%8F%E6%B5%8E/"/>
    
    
      <category term="芯片" scheme="http://yunvoo.com/tags/%E8%8A%AF%E7%89%87/"/>
    
  </entry>
  
  <entry>
    <title>长期发展的团队和归属感</title>
    <link href="http://yunvoo.com//blog/2015/10/26/%E9%95%BF%E6%9C%9F%E5%8F%91%E5%B1%95%E7%9A%84%E5%9B%A2%E9%98%9F%E5%92%8C%E5%BD%92%E5%B1%9E%E6%84%9F.html"/>
    <id>http://yunvoo.com//blog/2015/10/26/长期发展的团队和归属感.html</id>
    <published>2015-10-25T16:00:00.000Z</published>
    <updated>2016-06-19T14:09:50.803Z</updated>
    
    <content type="html">&lt;h3 id=&quot;团队归属感&quot;&gt;&lt;a href=&quot;#团队归属感&quot; class=&quot;headerlink&quot; title=&quot;团队归属感&quot;&gt;&lt;/a&gt;团队归属感&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;想随波逐流的人大概都会梦想拥有一支信得过的可以一起奋斗的团队吧，我觉得这是人之常情。&lt;/p&gt;
&lt;p&gt;那么，自己喜欢怎么样的团队，以及怎样的团队才需要自己，这两个问题很可能会决定最终什么样的人聚在一起。&lt;/p&gt;
&lt;p&gt;这两个问题的本质，前者是感情，后者是实力，如果两者能达到统一，当然就会形成团队的归属感，团队成员互相之间才能容易平等的相处。可惜，现实往往很残酷。&lt;/p&gt;
&lt;p&gt;人的感情总是很多变，电视小说里面的那种天天拌嘴拆桥还能保持死党关系的朋友真是少的可怜。我所看到的，我的家人、朋友、同事，大家更能记住的是几年前的一次矛盾、互相攀比的妒恨和只谈利益的淡漠，和一个人保持好感情就不错了，要想几个人互相之间都无比和睦，实在有些痴人说梦。&lt;/p&gt;
&lt;p&gt;人或许越年轻越不在意感情纠葛，越年轻的人们越能够没心没肺的黏在一起，而年长之后，多数人似乎都选择记住种种不快，而不是选择忘记。&lt;/p&gt;
&lt;p&gt;没有感情那就只有实力了，可是实力是什么，是每分钟打100个字这种么？不是，是一种不方面直接量化的综合能力。大家不可避免的会进行攀比，会不断在团队之中结成更小的团体。大家就像蒲公英的种子，相聚只是为未来的分开留下伏笔，大家都在为今后的飞翔拼命准备自己的羽翼而已，滋养自己的蒲公英的未来才没人关心呢。&lt;/p&gt;
&lt;p&gt;去思考这些问题真是一件让我身心俱疲的事情。难怪那么多人还是愿意随波逐流，情愿一直盘踞在自己偶然飘落的土壤上不离开，无论土壤是否贫瘠、艰辛。&lt;/p&gt;
&lt;p&gt;可我还不愿这么简单就放弃啊，我也很想和大家一起燃烧自己，一起达到更好啊。为什么，我们这一群人就一定要分开？&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;团队归属感&quot;&gt;&lt;a href=&quot;#团队归属感&quot; class=&quot;headerlink&quot; title=&quot;团队归属感&quot;&gt;&lt;/a&gt;团队归属感&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;想随波逐流的人大概都会梦想拥有一支信得过的可以一起奋斗的团队吧，我觉得这是人之常情。&lt;/p
    
    </summary>
    
      <category term="散文" scheme="http://yunvoo.com/categories/%E6%95%A3%E6%96%87/"/>
    
    
      <category term="团队" scheme="http://yunvoo.com/tags/%E5%9B%A2%E9%98%9F/"/>
    
  </entry>
  
  <entry>
    <title>IPFS 一个新的对等网络媒体协议</title>
    <link href="http://yunvoo.com//blog/2015/10/25/IPFS%20%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84%E5%AF%B9%E7%AD%89%E7%BD%91%E7%BB%9C%E5%AA%92%E4%BD%93%E5%8D%8F%E8%AE%AE.html"/>
    <id>http://yunvoo.com//blog/2015/10/25/IPFS 一个新的对等网络媒体协议.html</id>
    <published>2015-10-24T16:00:00.000Z</published>
    <updated>2016-06-19T10:26:26.377Z</updated>
    
    <content type="html">&lt;h2 id=&quot;IPFS简介&quot;&gt;&lt;a href=&quot;#IPFS简介&quot; class=&quot;headerlink&quot; title=&quot;IPFS简介&quot;&gt;&lt;/a&gt;IPFS简介&lt;/h2&gt;&lt;p&gt;&lt;center&gt;&lt;br&gt;    &lt;p&gt;&lt;img src=&quot;http://7xrzzi.com1.z0.glb.clouddn.com/ipfsIPFS.png&quot; align=&quot;center&quot;&gt;&lt;/p&gt;&lt;br&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;br&gt;    &lt;p&gt;&lt;img src=&quot;http://7xrzzi.com1.z0.glb.clouddn.com/ipfs10.png&quot; align=&quot;center&quot;&gt;&lt;/p&gt;&lt;br&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h1 id=&quot;IPFS-The-InterPlanetary-File-System-是一种新的超媒体分发协议，按内容和身份解决。-IPFS能够完全的分布式应用程序的创建。它的目的是使网络更快，更安全，更开放。IPFS是由IPFS社区和许多贡献者来自开源社区开发的一个开源项目&quot;&gt;&lt;a href=&quot;#IPFS-The-InterPlanetary-File-System-是一种新的超媒体分发协议，按内容和身份解决。-IPFS能够完全的分布式应用程序的创建。它的目的是使网络更快，更安全，更开放。IPFS是由IPFS社区和许多贡献者来自开源社区开发的一个开源项目&quot; class=&quot;headerlink&quot; title=&quot;　　　IPFS(The InterPlanetary File System)是一种新的超媒体分发协议，按内容和身份解决。 IPFS能够完全的分布式应用程序的创建。它的目的是使网络更快，更安全，更开放。IPFS是由IPFS社区和许多贡献者来自开源社区开发的一个开源项目&quot;&gt;&lt;/a&gt;　　　IPFS(The InterPlanetary File System)是一种新的超媒体分发协议，按内容和身份解决。 IPFS能够完全的分布式应用程序的创建。它的目的是使网络更快，更安全，更开放。IPFS是由IPFS社区和许多贡献者来自开源社区开发的一个开源项目&lt;/h1&gt;&lt;h2 id=&quot;IPFS是怎样运行的&quot;&gt;&lt;a href=&quot;#IPFS是怎样运行的&quot; class=&quot;headerlink&quot; title=&quot;IPFS是怎样运行的　&quot;&gt;&lt;/a&gt;IPFS是怎样运行的　&lt;/h2&gt;&lt;p&gt;&lt;center&gt;&lt;br&gt;    &lt;p&gt;&lt;img src=&quot;http://7xrzzi.com1.z0.glb.clouddn.com/ipfs11.png&quot; align=&quot;center&quot;&gt;&lt;/p&gt;&lt;br&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;br&gt;    &lt;p&gt;&lt;img src=&quot;http://7xrzzi.com1.z0.glb.clouddn.com/ipfs12.png&quot; align=&quot;center&quot;&gt;&lt;/p&gt;&lt;br&gt;&lt;/center&gt;&lt;br&gt;　　　IPFS旨在所有的计算设备与相同的文件系统连接一个对等网络的分布是文件系统。在某些方面，IPFS是类似于Web，但IPFS可以被看作一个单独的BitTorrent群，一个Git仓库内的交换对象。换句话说，IPFS提供了一种高通量内容寻址存储模式，与内容寻址链接，IPFS结合了分布式哈希表。IPFS具有无单一故障点，节点并不需要相互信任。&lt;/p&gt;
&lt;h2 id=&quot;下面是我在Linux安装体验了一下IPFS&quot;&gt;&lt;a href=&quot;#下面是我在Linux安装体验了一下IPFS&quot; class=&quot;headerlink&quot; title=&quot;下面是我在Linux安装体验了一下IPFS&quot;&gt;&lt;/a&gt;下面是我在Linux安装体验了一下IPFS&lt;/h2&gt;&lt;p&gt;　　　我将我安装过程分享给下家，感兴趣的话可以体验一下，保持一个好奇心！　我也是查资料看官方文档一步步了解的，希望大家多查查资料！我的是linux 64位的平台，Windows的没有试，感兴趣的可以试一试，效果都是一样的，官方提供的版本各个平台的都有！这是官网：【IPFS】（&lt;a href=&quot;https://ipfs.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://ipfs.io/&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;关键的地方我给大家截图&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.去官网下载需要安装包&lt;a href=&quot;https://ipfs.io/docs/install/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;go-ipfs_v0.3.11_linux-amd64.tar.gz&lt;/a&gt; 进行解压 安装&lt;center&gt;&lt;br&gt;  &lt;p&gt;&lt;img src=&quot;http://7xrzzi.com1.z0.glb.clouddn.com/ipfs1.png&quot; align=&quot;center&quot;&gt;&lt;/p&gt;&lt;br&gt;&lt;/center&gt;&lt;br&gt;&lt;center&gt;&lt;br&gt;  &lt;p&gt;&lt;img src=&quot;http://7xrzzi.com1.z0.glb.clouddn.com/ipfs2.png&quot; align=&quot;center&quot;&gt;&lt;/p&gt;&lt;br&gt;&lt;/center&gt;&lt;/li&gt;
&lt;li&gt;2.安装Go  &lt;a href=&quot;https://golang.org/dl/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; Download Go 1.5.2+&lt;/a&gt;(注意版本 IPFS官方支持的版本 更高的版本暂时不支持！）解压到指定的目录 自己可以定，这里需要用到环境变量的！配置环境变量 编辑文件 vim /etc/profile&lt;br&gt;&lt;center&gt;&lt;br&gt;  &lt;p&gt;&lt;img src=&quot;http://7xrzzi.com1.z0.glb.clouddn.com/ipfs5.png&quot; align=&quot;center&quot;&gt;&lt;/p&gt;&lt;br&gt;&lt;/center&gt;&lt;br&gt;在里面添加：&lt;br&gt;export PATH=$PATH:/usr/local/go/bin&lt;br&gt;export PATH=$PATH:$GOPATH/bin&lt;br&gt;&lt;center&gt;&lt;br&gt;  &lt;p&gt;&lt;img src=&quot;http://7xrzzi.com1.z0.glb.clouddn.com/ipfs4.png&quot; align=&quot;center&quot;&gt;&lt;/p&gt;&lt;br&gt;&lt;/center&gt;&lt;br&gt;这个文件一般是linux系统中存在，是在开机加载系统是或用的登录时执行的一个配置文件，其主要功能类似初始化一些环境变量，定义一些自动执行的功能如果对其进行修改后让其生效的方法执行  &lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;source /etc/profile   &lt;/li&gt;
&lt;li&gt;./etc/profile   &lt;/li&gt;
&lt;li&gt;重启系统，或退出登录后再重新登录&lt;br&gt;查看环境变量是否有错，有错会给你报错的！&lt;center&gt;&lt;br&gt; &lt;p&gt;&lt;img src=&quot;http://7xrzzi.com1.z0.glb.clouddn.com/ipfs6.png&quot; align=&quot;center&quot;&gt;&lt;/p&gt;&lt;br&gt;&lt;/center&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;3.为GOPATH环境变量设置工作空间，可以选择编写一个GO语言的hello world测试一下！非必须！只要一步步来一般情况下不会出错！照着做就行了！&lt;center&gt;&lt;br&gt;  &lt;p&gt;&lt;img src=&quot;http://7xrzzi.com1.z0.glb.clouddn.com/ipfs%E5%B0%8F%E7%A8%8B%E5%BA%8F.png&quot; align=&quot;center&quot;&gt;&lt;/p&gt;&lt;br&gt;&lt;/center&gt;&lt;/li&gt;
&lt;li&gt;4.至此环境搭建完了！详细搭建请参照官网说明吧！ 可以执行 IPFS命令感受一下了！&lt;br&gt;&lt;center&gt;&lt;br&gt;  &lt;p&gt;&lt;img src=&quot;http://7xrzzi.com1.z0.glb.clouddn.com/ipfs7.png&quot; align=&quot;center&quot;&gt;&lt;/p&gt;&lt;br&gt;&lt;/center&gt;&lt;br&gt;&lt;center&gt;&lt;br&gt;  &lt;p&gt;&lt;img src=&quot;http://7xrzzi.com1.z0.glb.clouddn.com/ipfs9.png&quot; align=&quot;center&quot;&gt;&lt;/p&gt;&lt;br&gt;&lt;/center&gt;&lt;br&gt;&lt;strong&gt;更多命令可以到官网资料手册！IPFS我也是最多了解有这么个东西！关于这方面的有兴趣的可以官网&lt;a href=&quot;https://ipfs.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; https://ipfs.io&lt;/a&gt;， github 这是github  &lt;a href=&quot;https://github.com/RichardLitt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; https://github.com/RichardLitt&lt;/a&gt;查相关资料，我也是不懂啊！见谅啦！&lt;/strong&gt;  &lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;IPFS简介&quot;&gt;&lt;a href=&quot;#IPFS简介&quot; class=&quot;headerlink&quot; title=&quot;IPFS简介&quot;&gt;&lt;/a&gt;IPFS简介&lt;/h2&gt;&lt;p&gt;&lt;center&gt;&lt;br&gt;    &lt;p&gt;&lt;img src=&quot;http://7xrzzi.com1.z0.glb
    
    </summary>
    
      <category term="技术" scheme="http://yunvoo.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="IPFS，协议" scheme="http://yunvoo.com/tags/IPFS%EF%BC%8C%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>Death March</title>
    <link href="http://yunvoo.com//blog/2015/10/23/Death.March.html"/>
    <id>http://yunvoo.com//blog/2015/10/23/Death.March.html</id>
    <published>2015-10-22T16:00:00.000Z</published>
    <updated>2016-06-19T14:00:03.277Z</updated>
    
    <content type="html">&lt;h3 id=&quot;首先说明该篇文章来自互联网&quot;&gt;&lt;a href=&quot;#首先说明该篇文章来自互联网&quot; class=&quot;headerlink&quot; title=&quot;首先说明该篇文章来自互联网&quot;&gt;&lt;/a&gt;首先说明该篇文章来自互联网&lt;/h3&gt;&lt;p&gt;该文章是我无意中读到的深有感触就记录下来，DeathMarch 也有其它的含义我有在维基百科读了一篇内容不一样&lt;a href=&quot;https://en.wikipedia.org/wiki/Death_march&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Death March&lt;/a&gt;还有这个&lt;a href=&quot;http://www.cnblogs.com/hzbook/archive/2011/11/14/2248544.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;blog&lt;/a&gt; 以下就是原文:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Death March 在项目管理领域里指的是看不到尽头的项目，在这个项目中的每个人都会最终被整个拖沓的状态磨去意志，只剩每天重复的做一些可有可无的事情。&lt;/p&gt;
&lt;p&gt;Death March 所描述的这种惨状其实每天都可以在身边看到。如果把人生等同于一个项目，那么这个项目本身就很容易满足 Death March 所有条件。&lt;/p&gt;
&lt;p&gt;首先是尽头，极少人知道这个项目的尽头为何。&lt;/p&gt;
&lt;p&gt;当大多数人以为生命还很长而不断挥霍的时候，他们其实已经在 Death March 中磨去了锐气，试图忘记灰色的未来带给他们的恐怖。关键时间点的缺失是 Death March 项目的共同特征，在中国，走出学校之后有多少人能真的去考虑一下未来的时间表呢，恐怕少之又少。活在当下是无脑的幸福，这种做法让不幸不断的发酵、压缩最终集中爆发，在生命的最后一段时间会让人生活在绝望的自责之中。&lt;/p&gt;
&lt;p&gt;其次是目的，生命的意义本身就非常的暧昧不清，这是个无解的谜题。&lt;/p&gt;
&lt;p&gt;人和其他动物一样，都会死亡，也都会惧怕死亡。人与其他动物所不同的是，知性的头脑让这种恐惧变得更加深刻，甚至会在生命还尚处盛年的时候就开始为未来忧郁。因为生命必然有尽头而且意义不明，迈向死亡的倒计时每天奔走不息，人们想要驱散这种恐惧就必须让自己忘记，将自己的时间用一些看似有意义的琐事充斥，生怕自己闲下来胡思乱想。正如处于 Death March 状态的项目总会做一些毫无针对性的任务一样，这种做法就是想驱散负面情绪，而实际意义为零。&lt;/p&gt;
&lt;p&gt;最后是结果，人逃脱不了死亡，处于 Death March 中的项目也逃脱不了戛然而止的命运。&lt;/p&gt;
&lt;p&gt;人总是从年轻到年老，不可复返。当年近迟暮，人所能做的事情慢慢变少，身上的各种不适不断增多，生活质量显著下降。可悲的是，多数人直到最后的尽头都保持着一个人类的头脑，他们会害怕，会因为身体的无能而绝望。其实大脑只是整个身体的一小部分，知性则是大脑中被称作“智脑”的薄薄的一小片区域，“智脑”不能有效控制任何无意识机能，无论是循环系统、消化系统还是肌肉系统，“智脑”总是会在无意识的“旧脑”之后得到消息，要想支配这些系统还必须通过“旧脑”来完成，当“智脑”无法灵活控制身体，知性会慢慢开始崩溃。在这种情况下，人就是 Death Match 项目中的项目经理，面对这种不可控的现状，还不如早些结束更轻松呢。 &lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;首先说明该篇文章来自互联网&quot;&gt;&lt;a href=&quot;#首先说明该篇文章来自互联网&quot; class=&quot;headerlink&quot; title=&quot;首先说明该篇文章来自互联网&quot;&gt;&lt;/a&gt;首先说明该篇文章来自互联网&lt;/h3&gt;&lt;p&gt;该文章是我无意中读到的深有感触就记录下来，Death
    
    </summary>
    
      <category term="散文" scheme="http://yunvoo.com/categories/%E6%95%A3%E6%96%87/"/>
    
    
      <category term="死亡三月" scheme="http://yunvoo.com/tags/%E6%AD%BB%E4%BA%A1%E4%B8%89%E6%9C%88/"/>
    
  </entry>
  
  <entry>
    <title>CEO的能力</title>
    <link href="http://yunvoo.com//blog/2015/10/20/CEO%E7%9A%84%E8%83%BD%E5%8A%9B.html"/>
    <id>http://yunvoo.com//blog/2015/10/20/CEO的能力.html</id>
    <published>2015-10-19T16:00:00.000Z</published>
    <updated>2016-06-19T13:30:21.921Z</updated>
    
    <content type="html">&lt;h2 id=&quot;CEO-能力其一是决断力。&quot;&gt;&lt;a href=&quot;#CEO-能力其一是决断力。&quot; class=&quot;headerlink&quot; title=&quot;CEO 能力其一是决断力。&quot;&gt;&lt;/a&gt;CEO 能力其一是决断力。&lt;/h2&gt;&lt;p&gt;创业似大海航行，陆地往往仅存于心，无人能确保陆地就在前方，也不知这路上是否有暗礁恶浪，数月过后若不达预期，团队内部难免心生迷惘，需要 CEO 做出一些关键决策，坚定前行抑或改弦易张。&lt;/p&gt;
&lt;p&gt;平庸的 CEO 兴许会随波逐流，顺势而为不失一种做法，但这纯拼运气，除非大势颇佳，否则便是慢性自杀；怯懦的 CEO 将关键决策权下放给他人，自己则一心从众，美名曰“民主”，实则缺乏胆识。半吊子的 CEO 会不断做出“关键决策”，每个方向都举棋不定，结果在内耗中错失良机乃至弹尽粮绝而亡。&lt;/p&gt;
&lt;p&gt;既谓之关键决策，必然风险与收益双高，此时必定众说纷纭，无万全之策。有决断力的 CEO 需从所有声音——包括自己心声——中甄别出最值得确信的一个，力排众议并坚决执行。&lt;/p&gt;
&lt;h2 id=&quot;CEO-能力其二是眼光。&quot;&gt;&lt;a href=&quot;#CEO-能力其二是眼光。&quot; class=&quot;headerlink&quot; title=&quot;CEO 能力其二是眼光。&quot;&gt;&lt;/a&gt;CEO 能力其二是眼光。&lt;/h2&gt;&lt;p&gt;创业者所创之业必是他人尚未充分开发之地，或崭新或模糊或凶险。同时，创业过程也需不断适时调整船头，CEO 的眼光可确保方向基本无误。&lt;/p&gt;
&lt;p&gt;眼光犹如视力，可有近视和远视两种毛病。若过于近视，则会增加误判，有大概率迷失方向；若过于远视，则看不清当下忧患，或未捷先死。&lt;/p&gt;
&lt;p&gt;眼光还取决于视野。若终年身藏深谷，往往患有以管窥豹、一目障叶或夜郎自大的毛病，就算视力良好也可能产生严重误判。&lt;/p&gt;
&lt;h2 id=&quot;CEO-能力其三是协调力。&quot;&gt;&lt;a href=&quot;#CEO-能力其三是协调力。&quot; class=&quot;headerlink&quot; title=&quot;CEO 能力其三是协调力。&quot;&gt;&lt;/a&gt;CEO 能力其三是协调力。&lt;/h2&gt;&lt;p&gt;常言道，CEO 乃孤独身，不任人唯亲，也不顾此失彼。团队能成“团”皆因 CEO 撮合，但凡内部因人因事因利产生裂痕，CEO 需有所作为。&lt;/p&gt;
&lt;p&gt;协调力即对人的驾驭力，“与人斗，其乐无穷”。单纯的 CEO 或想以无为治之，以为坦诚相待便可感化众人，却不料反倒积怨，内斗颇多而不自知。虽公司政治不可取，但唯有政治可扼杀政治，CEO 自身需深谙权术且不醉心。&lt;/p&gt;
&lt;p&gt;协调力还体现为管控力，若公司内有失控之处，必然无法恰如其分的协调。CEO 不可能十项全能，必有具体事项委派与人且不过问细节，如何能持续控制局势不被欺瞒，此为艺术而非技术。&lt;/p&gt;
&lt;p&gt;以上三种能力需兼备，方能成为优秀 CEO。人无完人，不求面面俱到，但求三种必备能力皆在常人之上。毕竟 CEO 乃万中挑一之人才，此种期待不应为过。&lt;/p&gt;
&lt;p&gt;如何鉴定这些能力是否超常？去聊，去接触，自然能懂。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;善哉，甄别 CEO 也为一种能力，空谈无用，在现实中感悟吧。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CEO-能力其一是决断力。&quot;&gt;&lt;a href=&quot;#CEO-能力其一是决断力。&quot; class=&quot;headerlink&quot; title=&quot;CEO 能力其一是决断力。&quot;&gt;&lt;/a&gt;CEO 能力其一是决断力。&lt;/h2&gt;&lt;p&gt;创业似大海航行，陆地往往仅存于心，无人能确保陆地就在
    
    </summary>
    
      <category term="散文" scheme="http://yunvoo.com/categories/%E6%95%A3%E6%96%87/"/>
    
    
      <category term="CEO" scheme="http://yunvoo.com/tags/CEO/"/>
    
  </entry>
  
  <entry>
    <title>linux多进程处理函数</title>
    <link href="http://yunvoo.com//blog/2015/10/03/linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0.html"/>
    <id>http://yunvoo.com//blog/2015/10/03/linux多进程处理函数.html</id>
    <published>2015-10-02T16:00:00.000Z</published>
    <updated>2016-06-19T06:41:39.076Z</updated>
    
    <content type="html">&lt;h2 id=&quot;wait-的阻塞问题&quot;&gt;&lt;a href=&quot;#wait-的阻塞问题&quot; class=&quot;headerlink&quot; title=&quot;wait()的阻塞问题&quot;&gt;&lt;/a&gt;wait()的阻塞问题&lt;/h2&gt;&lt;p&gt;父进程为了获取子进程的’SIGSTOP、SIGTERM’等信号时，由于调用了’wait()’函数而导致主进程一直在阻塞中，在使劲的开发中，应该特别注意，主进程在等待子进程的状态变化是还会有其他的事情进行处理,所以需要一种异步回调机制，让主进程可以在执行其它任务的时候，又可以监听到子进程的进程状态变化时及时处理。&lt;/p&gt;
&lt;h2 id=&quot;signal-函数讲解&quot;&gt;&lt;a href=&quot;#signal-函数讲解&quot; class=&quot;headerlink&quot; title=&quot;signal()函数讲解&quot;&gt;&lt;/a&gt;signal()函数讲解&lt;/h2&gt;&lt;p&gt;&lt;code&gt;signal()&lt;/code&gt;函数原型如下:&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;signal.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(*&lt;span class=&quot;keyword&quot;&gt;sighandler_t&lt;/span&gt;)&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;sighandler_t&lt;/span&gt; signal(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; signum,&lt;span class=&quot;keyword&quot;&gt;sighandler_t&lt;/span&gt; handler);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;typedef&lt;/code&gt;定义了一类函数名叫&lt;code&gt;sighandler_t&lt;/code&gt;是指要监听的进程状态的变量信号，所有可以监听的信号的定义可以同&lt;code&gt;sys/signal.h&lt;/code&gt;头文件中查阅到。本文的demeo中要处理的信号量有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;SIGSTOP:发送给父进程的，表示子进程被外部命令暂停，命令可以是&lt;code&gt;kill&lt;/code&gt;,也开始是&lt;code&gt;top&lt;/code&gt;中操作。&lt;/li&gt;
&lt;li&gt;SIGCHLD：发送给父进程的，表示子进程被外部命令暂停或已经执行完毕退出了。这是需要父进程执行&lt;code&gt;wait&lt;/code&gt;函数让子进程从&lt;code&gt;僵尸进程&lt;/code&gt;状态彻底被系统回收.&lt;/li&gt;
&lt;li&gt;SIGWINCH:程序窗口大小发生变换，在中断命令下执行运行可执行文件时用鼠标拖动一下窗口即可获取此信号。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;signal&lt;/code&gt;函数第二个参数是指定&lt;code&gt;signum&lt;/code&gt;的处理函数，该函数的唯一参数将会被赋值为被指定的 信号量。在此函数中可以调用&lt;code&gt;wait&lt;/code&gt;或者其他处理逻辑，也可以赋值为系统的&lt;code&gt;SIG_IGN或者SIG_DFL&lt;/code&gt;函数，分别表示忽略和默认处理方式，但是信号量&lt;code&gt;SIGKILL及SIGSTOP&lt;/code&gt;的处理方式是不能被忽略处理的。&lt;br&gt;当自定义了信号量处理函数后，所监听的信号被捕获，则该信号会被设置为阻塞&lt;code&gt;blocked&lt;/code&gt;，然后再执行处理函数中的逻辑，处理函数执行完毕后，信号量恢复为未阻塞状态&lt;code&gt;unblock&lt;/code&gt;。&lt;br&gt;&lt;code&gt;signal()&lt;/code&gt;函数正常执行，返回值为&lt;code&gt;signum&lt;/code&gt;的原有处理函数；否则出错返回&lt;code&gt;SIG_ER&lt;/code&gt;,并且可以处理通过&lt;code&gt;ERRNO&lt;/code&gt;来查看错误原因&lt;br&gt;&lt;code&gt;signal()&lt;/code&gt;函数在不同的Unxi或Linux版本之间存在较大的差异，所以一般崔村&lt;code&gt;sigaction()&lt;/code&gt;函数来替换。本文不涉及&lt;code&gt;sigaction&lt;/code&gt;的内容。&lt;/p&gt;
&lt;h2 id=&quot;示例代码&quot;&gt;&lt;a href=&quot;#示例代码&quot; class=&quot;headerlink&quot; title=&quot;示例代码&quot;&gt;&lt;/a&gt;示例代码&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;接下来演示`signal()`函数的使用，代码示例总依然用到了对标准输出流的重定向**`freeopen`**。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;signal.c&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;cpp&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;signal.h&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;sys/wait.h&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;time.h&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;ifndef&lt;/span&gt; getSigName&lt;/span&gt;
&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; getSigName(sig) (((sig) == SIGCHLD)?&lt;span class=&quot;string&quot;&gt;&quot;SIGCHLD&quot;&lt;/span&gt;:(((sig) == SIGCONT)?&lt;span class=&quot;string&quot;&gt;&quot;SIGCONT&quot;&lt;/span&gt;:(((sig) == SIGTERM)?&lt;span class=&quot;string&quot;&gt;&quot;SIGTERM&quot;&lt;/span&gt;:(((sig) == SIGWINCH)?&lt;span class=&quot;string&quot;&gt;&quot;SIGWINCH&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;))))&lt;/span&gt;
&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;printTime&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;time_t&lt;/span&gt; calendar_time = time(&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);
    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; tm * tm_local = localtime(&amp;amp;calendar_time);
    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;str_f_t&lt;/span&gt; [&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;];
    strftime(&lt;span class=&quot;keyword&quot;&gt;str_f_t&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;str_f_t&lt;/span&gt;), &lt;span class=&quot;string&quot;&gt;&quot;%G-%m-%d %H:%M:%S&quot;&lt;/span&gt;, tm_local);
    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%s &quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;str_f_t&lt;/span&gt;);
}
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handleSignal&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; sig)&lt;/span&gt; &lt;/span&gt;{
    printTime();
    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;PID=%d handleSignal %s=%d\n&quot;&lt;/span&gt;, getpid(), getSigName(sig), sig);
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (sig == SIGCHLD || sig == SIGTERM) {
        &lt;span class=&quot;comment&quot;&gt;// 子进程被暂停或退出了(包括按逻辑执行结束及被kill)&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; status = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;
        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; childPid = waitpid(&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &amp;amp;status, WUNTRACED|WCONTINUED);
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (childPid == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) {
            printTime();
            &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Parent w=-1, error=%s \n&quot;&lt;/span&gt;, strerror(errno));
        } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; ifExited, ifSignaled, ifStopped, ifContinued;

            ifExited = WIFEXITED(status);
            ifSignaled = WIFSIGNALED(status);
            ifStopped = WIFSTOPPED(status);
            ifContinued = WIFCONTINUED(status);

            printTime();
            &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;pid=%ld child=%d exitCode=%d status=%d ifExited=%d ifSignaled=%d ifStopped=%d ifContinued=%d \n&quot;&lt;/span&gt;,
                   (&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;)getpid(), childPid, status, _WSTATUS(childPid), ifExited, ifSignaled, ifStopped, ifContinued);

            printTime();
            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ifExited) {
                &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;PID=%ld exited, status=%d\n&quot;&lt;/span&gt;, (&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;)childPid, WEXITSTATUS(status));
            } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ifSignaled) {
                &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;PID=%ld killed by signal %d\n&quot;&lt;/span&gt;, (&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;)childPid, WTERMSIG(status));
            } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ifStopped) {
                &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;PID=%ld stopped by signal %d\n&quot;&lt;/span&gt;, (&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;)childPid, WSTOPSIG(status));
            } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ifContinued) {
                &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;PID=%ld continued\n&quot;&lt;/span&gt;, (&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;)childPid);
            }
        }
    } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (sig == SIGCONT) {
        &lt;span class=&quot;comment&quot;&gt;// sigcont在本人的mac上调用wait是无效的&lt;/span&gt;
        &lt;span class=&quot;comment&quot;&gt;// do nothing&lt;/span&gt;
    } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (sig == SIGWINCH) {
        &lt;span class=&quot;comment&quot;&gt;// do nothing&lt;/span&gt;
    } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
        printTime();
        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;sig=%d is not valid.\n&quot;&lt;/span&gt;, sig);
    }
}
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;mainProcessDoSomething&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(FILE* f)&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; count = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;
    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) {
        sleep(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (f != &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;){
            fflush(f);
        }
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (count ++ &amp;gt; &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;) {
            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;
        }
    }
}
&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; main&lt;span class=&quot;comment&quot;&gt;/*11*/&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; ** argv) {

    &lt;span class=&quot;comment&quot;&gt;// SIGWINCH：应用程序窗口发生变化&lt;/span&gt;
    signal(SIGWINCH, &amp;amp;handleSignal);

    &lt;span class=&quot;comment&quot;&gt;// 子进程被暂停运行&lt;/span&gt;
    signal(SIGSTOP, &amp;amp;handleSignal);
    &lt;span class=&quot;comment&quot;&gt;// 子进程被恢复运行(Mac上无效..)&lt;/span&gt;
    signal(SIGCONT, &amp;amp;handleSignal);
    &lt;span class=&quot;comment&quot;&gt;// SIGCHLD：子进程被暂停或退出了(包括按逻辑执行结束及被kill)&lt;/span&gt;
    signal(SIGCHLD, &amp;amp;handleSignal);
    &lt;span class=&quot;comment&quot;&gt;// 不建议对SIGTERM进行设置&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;// signal(SIGTERM, &amp;amp;handleSignal);&lt;/span&gt;

    &lt;span class=&quot;keyword&quot;&gt;pid_t&lt;/span&gt; pId = fork();
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (pId == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) {
        perror(&lt;span class=&quot;string&quot;&gt;&quot;fork error&quot;&lt;/span&gt;);
        &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(EXIT_FAILURE);
    } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (pId == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) {
        FILE* fChild = freopen(&lt;span class=&quot;string&quot;&gt;&quot;/Users/sodino/workspace/xcode/Define/Define/child_signal.txt&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;w&quot;&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;stdout&lt;/span&gt;);
        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; myPid = getpid();
        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; parentPid = getppid();

        printTime();
        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Child:SelfID=%d ParentID=%d \n&quot;&lt;/span&gt;, myPid, parentPid);
        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; count = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;
        &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;{
            count ++;
            sleep(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);
            printTime();
            &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Child:count=%d \n&quot;&lt;/span&gt;, count);
            fflush(fChild);
            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (count &amp;gt;= &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;) {
                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;
            }
        }&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);
        printTime();
        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Child:SelfID=%d exit success.\n&quot;&lt;/span&gt;, myPid);
        fflush(fChild);
        fclose(fChild);
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; EXIT_SUCCESS;
    } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
        FILE * fMain = freopen(&lt;span class=&quot;string&quot;&gt;&quot;/Users/sodino/workspace/xcode/Define/Define/main_signal.txt&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;w&quot;&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;stdout&lt;/span&gt;);
        printTime();
        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Parent:SelfID=%d MyChildPID=%d \n&quot;&lt;/span&gt;, getpid(), pId);
        fflush(fMain);

        &lt;span class=&quot;comment&quot;&gt;// 继续往下执行其它任务，而不像原逻辑 会被wait()所阻塞&lt;/span&gt;
        mainProcessDoSomething(fMain);

        printTime();
        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Parent:SelfID=%d exit success.\n&quot;&lt;/span&gt;, getpid());

        fflush(fMain);
        fclose(fMain);
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; EXIT_SUCCESS;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以上代码中，在&lt;code&gt;main()&lt;/code&gt;函数一开始，就对&lt;code&gt;SIGWINCH、SIGCHLD&lt;/code&gt;进行监听，统一注册其处理函数为&lt;code&gt;handleSignal(int)&lt;/code&gt;。然后执行&lt;code&gt;fork()&lt;/code&gt;生成子进程。&lt;br&gt;handleSignal(int)函数中会对监听到的信号量做出打印及输出，如果是SIGSTOP、SIGCHLD的话则会执行wait以获取子进程状态。&lt;br&gt;在主进程中，以mainProcessDoSomething()函数来表示父进程的其它工作任务，不被wait所阻塞。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;wait-的阻塞问题&quot;&gt;&lt;a href=&quot;#wait-的阻塞问题&quot; class=&quot;headerlink&quot; title=&quot;wait()的阻塞问题&quot;&gt;&lt;/a&gt;wait()的阻塞问题&lt;/h2&gt;&lt;p&gt;父进程为了获取子进程的’SIGSTOP、SIGTERM’等信号时，由于调
    
    </summary>
    
      <category term="技术" scheme="http://yunvoo.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="linux 多进程" scheme="http://yunvoo.com/tags/linux-%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>什么是bootloader</title>
    <link href="http://yunvoo.com//blog/2015/08/06/bootloader.html"/>
    <id>http://yunvoo.com//blog/2015/08/06/bootloader.html</id>
    <published>2015-08-05T16:00:00.000Z</published>
    <updated>2016-06-22T10:24:45.186Z</updated>
    
    <content type="html">&lt;h2 id=&quot;什么是bootloader&quot;&gt;&lt;a href=&quot;#什么是bootloader&quot; class=&quot;headerlink&quot; title=&quot;什么是bootloader?&quot;&gt;&lt;/a&gt;什么是bootloader?&lt;/h2&gt;&lt;p&gt;引导程序（英语：boot loader）位于电脑或其他计算机应用上，是指引导操作系统启动的程序。引导程序引导方式及程序视应用机型种类而不同。例如在普通的个人电脑上，引导程序通常分为两部分：第一阶段引导程序位于主引导记录（MBR），用以引导位于某个分区上的第二阶段引导程序，如NTLDR、BOOTMGR和GNU GRUB等。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;BIOS&lt;/code&gt;开机完成后，bootloader就接手初始化硬件设备、创建内存空间的映射，以便为操作系统内核准备好正确的软硬件环境。&lt;/p&gt;
&lt;p&gt;简单的&lt;code&gt;bootloader&lt;/code&gt;的虚拟汇编码，如其后的八个指令：&lt;/p&gt;
&lt;p&gt;第一：将P寄存器的值设为8&lt;br&gt;第二：检查纸带（paper tape）读取器，是否已经可以进行读取&lt;br&gt;第三：如果还不能进行读取，跳至1&lt;br&gt;第四：从纸带读取器，读取一byte至累加器&lt;br&gt;第五：如为带子结尾，跳至8&lt;br&gt;第六：将寄存器的值，存储至P寄存器中的数值所指定的地址&lt;br&gt;第七：增加P寄存器的值&lt;br&gt;第八：跳至1&lt;br&gt;但是随着计算机操作系统越来越复杂，位于主引导记录的空间已经放不下引导操作系统的代码，于是就有了第二阶段的引导程序，而MBR中代码的功能也从直接引导操作系统变为了引导第二阶段的引导程序。&lt;/p&gt;
&lt;p&gt;&amp;gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BootLoader是在操作系统内核运行之前运行的一段小程序。其实Bootloader就相当于手机的&lt;code&gt;bios&lt;/code&gt;，通过这段小程序，进行硬件初始化，获取内存大小信息等，调整手机到适配所以Bootloader是很重要的，如果bootloader不能正常加载，手机就是砖头一个，无法正常启动和使用。*&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是bootloader&quot;&gt;&lt;a href=&quot;#什么是bootloader&quot; class=&quot;headerlink&quot; title=&quot;什么是bootloader?&quot;&gt;&lt;/a&gt;什么是bootloader?&lt;/h2&gt;&lt;p&gt;引导程序（英语：boot loader）位于电脑
    
    </summary>
    
      <category term="技术" scheme="http://yunvoo.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="bootloader" scheme="http://yunvoo.com/tags/bootloader/"/>
    
  </entry>
  
  <entry>
    <title>c++重载、重写、重定义区别</title>
    <link href="http://yunvoo.com//blog/2015/03/27/%E9%87%8D%E8%BD%BD%E3%80%81%E9%87%8D%E5%86%99%E3%80%81%E9%87%8D%E5%AE%9A%E4%B9%89%E5%8C%BA%E5%88%AB.html"/>
    <id>http://yunvoo.com//blog/2015/03/27/重载、重写、重定义区别.html</id>
    <published>2015-03-26T16:00:00.000Z</published>
    <updated>2016-06-22T09:49:58.721Z</updated>
    
    <content type="html">&lt;p&gt;&lt;/p&gt;&lt;h2&gt;一 重载（overload）&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h4&gt;概念：&lt;/h4&gt;&lt;br&gt;函数有同样的名称，但是参数列表不相同的情形，这样的同名不同参数的函数之间，互相称之为重载函数。&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h4&gt;基本条件：&lt;/h4&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;ul&gt;&lt;br&gt;    &lt;li&gt;函数名必须相同；&lt;/li&gt;&lt;br&gt;    &lt;li&gt;函数参数必须不相同，可以是参数类型或者参数个数不同；&lt;/li&gt;&lt;br&gt;    &lt;li&gt;函数返回值可以相同，也可以不相同；&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&amp;gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h4&gt;注意：&lt;/h4&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;ul&gt;&lt;br&gt;    &lt;li&gt;只能通过不同的参数样式进行重载，例如：不同的参数类型，不同的参数个数，不同的参数顺序；&lt;/li&gt;&lt;br&gt;    &lt;li&gt;不能通过访问权限、返回类型、抛出的异常进行重载；&lt;/li&gt;&lt;br&gt;    &lt;li&gt;重载的函数应该在相同的作用域下；&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h4&gt;验证程序：&lt;/h4&gt;&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; A &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Func1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arg1)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;func 1&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// OK: 通过参数类型不同重载 Func1()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Func1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; arg1)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;func 2&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// OK: 通过参数个数不同重载 Func1()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Func1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arg1, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arg2)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;func 3&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// OK: 重载函数返回值可以不同&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Func1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arg1, &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; arg2)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;func 4&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// ERROR: 不能只通过返回值来进行重载&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/*bool Func1(int arg1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; _tmain(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, _TCHAR* argv[])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  A a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  a.Func1(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  a.Func1(&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  a.Func1(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  a.Func1(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;输出：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;func 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func 4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h2&gt;二 重写（override）&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h4&gt;概念：&lt;/h4&gt;也称为覆盖，子类重新定义父类中有相同名称和参数的虚函数，主要在继承关系中出现。&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h4&gt;基本条件：&lt;/h4&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;ul&gt;&lt;br&gt;    &lt;li&gt;重写的函数和被重写的函数必须为virtual函数，分别位于基类和派生类中；&lt;/li&gt;&lt;br&gt;    &lt;li&gt;重写的函数和被重写的函数函数名和函数参数必须一致；&lt;/li&gt;&lt;br&gt;    &lt;li&gt;重写的函数和被重写的函数返回值相同，或者都返回指针或引用，并且派生类虚函数所返回的指针或引用的类型是基类中被替换的虚函数所返回的&lt;/li&gt;&lt;br&gt;    &lt;li&gt;指针或引用的类型的子类型。&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h4&gt;注意：&lt;/h4&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;ul&gt;&lt;br&gt;    &lt;li&gt;重写的函数所抛出的异常必须和被重写的函数所抛出的异常一致，或者是其子类；&lt;/li&gt;&lt;br&gt;    &lt;li&gt;重写的函数的访问修饰符可以不同于被重写的函数，如基类的virtual函数的修饰符为private，派生类改为public或protected也是可以的。&lt;/li&gt;&lt;br&gt;    &lt;li&gt;静态方法不能被重写，也就是static和virtual不能同时使用。&lt;/li&gt;&lt;br&gt;    &lt;li&gt;重写的函数可以带virtual关键字，也可以不带。&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h4&gt;验证程序：&lt;/h4&gt;&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; A &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; B : &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; A &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; C &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Func1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;class C: func 1&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; A* &lt;span class=&quot;title&quot;&gt;Func2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;class C: func 2&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; A;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// ERROR:静态函数不能被声明为virtual，也就没办法被重写。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// static virtual void FuncStatic() &amp;#123;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//由于Func3被声明为private，所以需要通过public函数来调用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ShowFunc3&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Func3();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Func4&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;class C: func 4&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Func3&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;class C: func 3&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; D : &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; C &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// OK: 重写C类Func1，可以不带virtual关键字&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Func1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;class D: func 1&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// OK: 当返回值为指针或者引用时，返回值可以是父类返回值类型的子类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; B* &lt;span class=&quot;title&quot;&gt;Func2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;class D: func 2&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; B;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// ERROR: 除上面的情况，返回值类型要和父类一直&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/*virtual bool Func2() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// OK: 重写的函数的访问修饰符可以不同于被重写的函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Func3&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;class D: func 3&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// OK: 重写的函数的访问修饰符可以不同于被重写的函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Func4&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;class D: func 4&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; _tmain(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, _TCHAR* argv[])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  C* c = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; D;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  c-&amp;gt;Func1();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  c-&amp;gt;Func2();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  c-&amp;gt;ShowFunc3();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  c-&amp;gt;Func4();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;输出：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class D: func 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class D: func 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class D: func 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class D: func 4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h2&gt;三 重定义（redefining）&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h4&gt;概念：&lt;/h4&gt;也叫隐藏，子类重新定义父类中的非虚函数，屏蔽了父类的同名函数&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h4&gt;基本条件：&lt;/h4&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;ul&gt;&lt;br&gt;    &lt;li&gt;被隐藏的函数之间作用域不相同&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h4&gt;注意：&lt;/h4&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;ul&gt;&lt;br&gt;    &lt;li&gt;子类和父类的函数名称相同，但参数不同，此时不管父类函数是不是virtual函数，都将被隐藏。&lt;/li&gt;&lt;br&gt;    &lt;li&gt;子类和父类的函数名称相同，参数也相同，但是父类函数不是virtual函数，父类的函数将被隐藏。&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h4&gt;验证程序：&lt;/h4&gt;&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; A &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Func1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;class A: Func1&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Func2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;class A: Func2&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; B : &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; A &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 将会重定义父类的方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Func1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;class B: Func1&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 将会重写(override)父类方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Func2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;class B: Func2-1&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 将会重定义父类的方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Func2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;class B: Func2-2&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; _tmain(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, _TCHAR* argv[])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  B* b = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; B;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  b-&amp;gt;Func1(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  b-&amp;gt;Func2(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  b-&amp;gt;Func2(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;输出：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class B: Func1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class B: Func2-1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class B: Func2-2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;h2&gt;一 重载（overload）&lt;/h2&gt;&lt;/p&gt;
&lt;p&gt;&lt;h4&gt;概念：&lt;/h4&gt;&lt;br&gt;函数有同样的名称，但是参数列表不相同的情形，这样的同名不同参数的函数之间，互相称之为重载函数。&lt;/p&gt;
&lt;p&gt;&lt;h4&gt;基本条件：&lt;/h4&gt;&lt;/p&gt;
&lt;p&gt;&lt;ul&gt;&lt;br&gt;    &lt;li&gt;函数名必须相同；&lt;/li&gt;&lt;br&gt;    &lt;li&gt;函数参数必须不相同，可以是参数类型或者参数个数不同；&lt;/li&gt;&lt;br&gt;    &lt;li&gt;函数返回值可以相同，也可以不相同；&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&amp;gt;
    
    </summary>
    
      <category term="c/c++" scheme="http://yunvoo.com/categories/c-c/"/>
    
    
      <category term="重载重定义" scheme="http://yunvoo.com/tags/%E9%87%8D%E8%BD%BD%E9%87%8D%E5%AE%9A%E4%B9%89/"/>
    
  </entry>
  
  <entry>
    <title>深度探索C++对象模型：类的大小</title>
    <link href="http://yunvoo.com//blog/2015/03/20/%E6%8E%A2%E7%B4%A2C++%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B%EF%BC%9A%E7%B1%BB%E7%9A%84%E5%A4%A7%E5%B0%8F.html"/>
    <id>http://yunvoo.com//blog/2015/03/20/探索C++对象模型：类的大小.html</id>
    <published>2015-03-19T16:00:00.000Z</published>
    <updated>2016-06-22T01:18:13.338Z</updated>
    
    <content type="html">&lt;p&gt;&lt;code&gt;C++&lt;/code&gt; 初学者常有一个错误的认识，认为一个 &lt;code&gt;class&lt;/code&gt; 的大小就是该 &lt;code&gt;class&lt;/code&gt; 内所有 &lt;code&gt;non static members&lt;/code&gt; 的大小总和。既然是错误的认识，那么实际上就不是或者不单纯是该 &lt;code&gt;class&lt;/code&gt; 内所有 &lt;code&gt;non static members&lt;/code&gt; 的大小总和。在 &lt;code&gt;c++&lt;/code&gt; 对象模型里，一个 &lt;code&gt;class&lt;/code&gt; 的大小主要受下面三个方面影响&lt;br&gt;现在有这样一段代码：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; A &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; B : &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; A &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; C : &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; A &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; D : &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; B, &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; C &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;对 &lt;code&gt;class A、B、C、D&lt;/code&gt; 进行 &lt;code&gt;sizeof&lt;/code&gt; 运算结果是什么呢？如果你心里已经有了答案，不妨看完下面的分析再说。   &lt;/p&gt;
&lt;h3 id=&quot;1-语言本身特性造成的额外负担&quot;&gt;&lt;a href=&quot;#1-语言本身特性造成的额外负担&quot; class=&quot;headerlink&quot; title=&quot;1 语言本身特性造成的额外负担&quot;&gt;&lt;/a&gt;1 语言本身特性造成的额外负担&lt;/h3&gt;&lt;p&gt;这里的额外负担主要是受 &lt;code&gt;virtual&lt;/code&gt; 特性影响，包括 &lt;code&gt;virtual base class&lt;/code&gt; 和 &lt;code&gt;virtual function&lt;/code&gt;。在 &lt;code&gt;derived class&lt;/code&gt; 中这种额外负担反映在某种形式的指针上，可以是虚函数指针，或者指向虚基类的 &lt;code&gt;subject class&lt;/code&gt; 偏移地址等。详细内容可以参考&lt;a href=&quot;http://glgjing.github.io/blog/2015/01/03/c-plus-plus-xu-han-shu-qian-xi/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;C++ 虚函数浅析&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;2-编译器对特殊情况的优化处理&quot;&gt;&lt;a href=&quot;#2-编译器对特殊情况的优化处理&quot; class=&quot;headerlink&quot; title=&quot;2 编译器对特殊情况的优化处理&quot;&gt;&lt;/a&gt;2 编译器对特殊情况的优化处理&lt;/h3&gt;&lt;p&gt;例如对于 &lt;code&gt;empty virtual base class&lt;/code&gt; 的特殊支持，在 &lt;code&gt;C++&lt;/code&gt; 对象模型中一个空的 &lt;code&gt;class&lt;/code&gt; 大小为 &lt;code&gt;1 byte&lt;/code&gt;，因为编译器为了使每个 &lt;code&gt;object&lt;/code&gt; 在内存中能有独一无二的地址，为空 &lt;code&gt;class&lt;/code&gt; 安插了一个 &lt;code&gt;char&lt;/code&gt;。如果一个空的 &lt;code&gt;class&lt;/code&gt; 大小为 &lt;code&gt;0 byte&lt;/code&gt;，那么像该 &lt;code&gt;class&lt;/code&gt; 的数组 &lt;code&gt;A x[10];&lt;/code&gt;，编译器将无法区分每个元素的地址。但是如果 &lt;code&gt;derived class&lt;/code&gt; 的大小不为 &lt;code&gt;0&lt;/code&gt;，就不需要 &lt;code&gt;base class&lt;/code&gt; 的 &lt;code&gt;1 byte&lt;/code&gt; 进行内存地址区分，那么如果编译器对这种情况进行了优化的话，就会将该 &lt;code&gt;1 byte&lt;/code&gt; 去掉，如果没有还是会继续保留这个额外的 &lt;code&gt;1 byte&lt;/code&gt; 空间。  &lt;/p&gt;
&lt;p&gt;说到编译器对特殊情况的优化，下面这段话比较恰当表述了编译器演化与&lt;code&gt;C++&lt;/code&gt;对象模型的关系：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;编译器之间的潜在差异正说明了 &lt;code&gt;C++&lt;/code&gt; 对象模型的演化。这个模型为一般情况提供了解决之道，当特殊情况渐渐被挖掘出来时，种种启发法于是被引入，提供优化的处理。如果成功，启发法于是就提升为普遍的策略，并跨越各种编译器而合并。他被视为标准（虽然他并不被规范为标准），久而久之也就成了语言的一部分。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;3-边界调整（Dlignment）的影响&quot;&gt;&lt;a href=&quot;#3-边界调整（Dlignment）的影响&quot; class=&quot;headerlink&quot; title=&quot;3 边界调整（Dlignment）的影响&quot;&gt;&lt;/a&gt;3 边界调整（Dlignment）的影响&lt;/h3&gt;&lt;p&gt;为了数据能够更有效率的在内存中存取，编译器会 &lt;code&gt;class&lt;/code&gt; 的内存边界进行调整，在&lt;code&gt;32&lt;/code&gt;位机器上通常 &lt;code&gt;alignment&lt;/code&gt; 为 &lt;code&gt;4 bytes&lt;/code&gt;，以使总线的运输效率最高。&lt;/p&gt;
&lt;p&gt;经过上面的分析后，可以看出具体结果要视编译器而定。首先讨论在编译器没有对 &lt;code&gt;empty virtual base class&lt;/code&gt; 进行优化的情况，那么：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;class A&lt;/code&gt;  的大小应该是 &lt;code&gt;1 byte&lt;/code&gt;，该 &lt;code&gt;1 byte&lt;/code&gt; 由编译器插入。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;class B&lt;/code&gt; 和 &lt;code&gt;class C&lt;/code&gt; 的大小相同为 &lt;code&gt;8&lt;/code&gt;，包括 &lt;code&gt;4 byte&lt;/code&gt; 的 虚基类指针再加上 &lt;code&gt;1 byte&lt;/code&gt; 的基类 A的大小，考虑到内存对齐需要补齐 &lt;code&gt;3 byte&lt;/code&gt;，所以最终结果为 &lt;code&gt;8 byte&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;class D&lt;/code&gt; 的大小为&lt;code&gt;12 byte&lt;/code&gt;，包括 &lt;code&gt;class B&lt;/code&gt; 和 &lt;code&gt;class C&lt;/code&gt; 内的两个 &lt;code&gt;4 byte&lt;/code&gt; 虚基类指针共 &lt;code&gt;8 byte&lt;/code&gt;，此外由于 &lt;code&gt;A&lt;/code&gt; 为虚基类，所以在 &lt;code&gt;D&lt;/code&gt; 内只有一个实体，所以应该再加上 &lt;code&gt;A&lt;/code&gt; 的 &lt;code&gt;1 byte&lt;/code&gt; 和内存对齐额外补齐的 &lt;code&gt;3 byte&lt;/code&gt;，共 &lt;code&gt;12 byte&lt;/code&gt;。   &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以最终结果为：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(A) = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; byte&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(B) = &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(C) = &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; byte&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(D) = &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt; byte。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;如果编译器对 &lt;code&gt;empty virtual base class&lt;/code&gt; 进行了优化，那么 &lt;code&gt;class A&lt;/code&gt; 的 &lt;code&gt;1 byte&lt;/code&gt; 空间在派生类中将被拿掉，相应的由于内存对齐而引起的 &lt;code&gt;3 byte&lt;/code&gt; 也被去掉了，所以最终结果应该是：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(A) = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; byte&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(B) = &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(C) = &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; byte&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(D) = &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; byte。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;C++&lt;/code&gt; 初学者常有一个错误的认识，认为一个 &lt;code&gt;class&lt;/code&gt; 的大小就是该 &lt;code&gt;class&lt;/code&gt; 内所有 &lt;code&gt;non static members&lt;/code&gt; 的大小总和。既然是错误的认识，那么实际上就
    
    </summary>
    
      <category term="c/c++" scheme="http://yunvoo.com/categories/c-c/"/>
    
    
      <category term="c++" scheme="http://yunvoo.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>数组类型和函数类型基础语法</title>
    <link href="http://yunvoo.com//blog/2015/03/02/%E6%95%B0%E7%BB%84%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95.html"/>
    <id>http://yunvoo.com//blog/2015/03/02/数组类型和函数类型基础语法.html</id>
    <published>2015-03-01T16:00:00.000Z</published>
    <updated>2016-06-22T09:01:12.157Z</updated>
    
    <content type="html">&lt;h2 id=&quot;数组类型&quot;&gt;&lt;a href=&quot;#数组类型&quot; class=&quot;headerlink&quot; title=&quot;数组类型&quot;&gt;&lt;/a&gt;数组类型&lt;/h2&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#define _CRT_SECURE_NO_WARNINGS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//数组类型基本语法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//定义一个数组类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//定义一个指针数据类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//定义一个指向 数据类型的指针 数组类的指针&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void main()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int a[10]; //a代表是数组首元素的地址 ，&amp;amp;a代表整个数组的地址 a+1 &amp;amp;a+1步长不一样&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		//定义一个数组类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		typedef int(myTypeArray)[10];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		myTypeArray myArray;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		myArray[0] = 10;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		printf(&quot;%d\n&quot;, myArray[0]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		//定义一个指针数组类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		typedef int(*PTypeArray)[10];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		PTypeArray myPArray;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		myPArray = &amp;amp;a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		(*myPArray)[0] = 20;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		printf(&quot;a[0]:%d\n&quot;, a[0]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		//定义一个指向 数据类型的指针 数组类的指针&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		int(*MyPointer)[10]; //变量告诉C编译器 给我分配内存&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		MyPointer = &amp;amp;a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		(*MyPointer)[0] = 40;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		printf(&quot;a[0]=%d\n&quot;, a[0]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	printf(&quot;hello...\n&quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	system(&quot;pause&quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;函数类型&quot;&gt;&lt;a href=&quot;#函数类型&quot; class=&quot;headerlink&quot; title=&quot;函数类型&quot;&gt;&lt;/a&gt;函数类型&lt;/h2&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; _CRT_SECURE_NO_WARNINGS&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//1.定义一个函数类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//2.定义一个函数指针类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//3.定义一个函数指针(指向一个函数的入口地址）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;func add....\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a + b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		add(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//直接调用 //函数名就是函数的入口地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//定义一个函数类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(MyFuncType)&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b)&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//定义一个类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			MyFuncType *myPointerFunc = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//定义一个指针 ，指向某一种类的函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			myPointerFunc = &amp;amp;add;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			myPointerFunc(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//间接调用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			myPointerFunc = add; &lt;span class=&quot;comment&quot;&gt;//细节 //c过程 兼容历史版本额原因&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			myPointerFunc(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//间接调用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//定义一个函数指针类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(*MyPointerFuncType)&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b)&lt;/span&gt;&lt;/span&gt;;  &lt;span class=&quot;comment&quot;&gt;//相当于 int *a =NULL;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			MyPointerFuncType myPonterFunc; &lt;span class=&quot;comment&quot;&gt;//定义一个指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			myPonterFunc = add;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			myPonterFunc(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;comment&quot;&gt;//直接定义一个函数指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;(*MyPonterFunc)(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b); &lt;span class=&quot;comment&quot;&gt;//定义一个变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			MyPonterFunc = add;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			MyPonterFunc(&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;hello...\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		system(&lt;span class=&quot;string&quot;&gt;&quot;pause&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;函数指针作函数参数-回调函数&quot;&gt;&lt;a href=&quot;#函数指针作函数参数-回调函数&quot; class=&quot;headerlink&quot; title=&quot;函数指针作函数参数(回调函数)&quot;&gt;&lt;/a&gt;函数指针作函数参数(回调函数)&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1.函数指针类型起到的作用：把函数的参数、函数返回值提前约定(回调函数的本质)&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2.回调机制原理:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; 当具体事件发生时，调用者通过函数指针调用具体函数
&amp;gt; 回调机制将调用者和被调用者分开，两者互不依赖
&amp;gt; 任务的实现 和 任务的调用可以耦合(提前进行接口的封装和设计)
&lt;/code&gt;&lt;/pre&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#define _CRT_SECURE_NO_WARNINGS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//////////////////////////////////////////&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int myadd(int a, int b) //子任务实现者&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	printf(&quot;func add() do ...\n&quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return a + b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int myadd2(int a, int b) //子任务实现者&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	printf(&quot;func add2() do ...\n&quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return a + b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int myadd3(int a, int b) //子任务实现者&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	printf(&quot;func add3() do ...\n&quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return a + b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int myadd4(int a, int b) //子任务实现者&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	printf(&quot;func add4() do ...\n&quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return a + b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;///////////////////////////////////////////////&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//定义一个类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;typedef int(*MyTypeFuncAdd)(int a, int b);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//函数指针 做 函数参数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int MainOp(MyTypeFuncAdd myFuncAdd)  //调用者&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int c = myFuncAdd(5, 6);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int MainOp2(int(*MyPointerFuncAdd)(int a, int b)) //调用者&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int c = MyPointerFuncAdd(5, 6);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;////////////////////////////////////////////////&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void main()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;  /*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   MyTypeFuncAdd myFuncAdd = NULL;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	myadd(1, 2); //直接调用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	myFuncAdd = myadd;  //间接调用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	myFuncAdd(3, 4);  //间接调用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	MainOp2(myadd);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	MainOp(myadd);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; //在mainop框架 没有发生任何变化的情况下&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	MainOp(myadd2); //传的是函数的入口地址&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	MainOp(myadd3); //传的是函数的入口地址&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	MainOp(myadd4); //传的是函数的入口地址&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	printf(&quot;hello...\n&quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	system(&quot;pause&quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数组类型&quot;&gt;&lt;a href=&quot;#数组类型&quot; class=&quot;headerlink&quot; title=&quot;数组类型&quot;&gt;&lt;/a&gt;数组类型&lt;/h2&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;spa
    
    </summary>
    
      <category term="c/c++" scheme="http://yunvoo.com/categories/c-c/"/>
    
    
      <category term="函数指针" scheme="http://yunvoo.com/tags/%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>C++中的继承学习基础</title>
    <link href="http://yunvoo.com//blog/2015/01/05/C++%E4%B8%AD%E7%9A%84%E7%BB%A7%E6%89%BF%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80.html"/>
    <id>http://yunvoo.com//blog/2015/01/05/C++中的继承学习基础.html</id>
    <published>2015-01-04T16:00:00.000Z</published>
    <updated>2016-06-22T01:12:20.039Z</updated>
    
    <content type="html">&lt;h2 id=&quot;继承概念&quot;&gt;&lt;a href=&quot;#继承概念&quot; class=&quot;headerlink&quot; title=&quot;继承概念&quot;&gt;&lt;/a&gt;继承概念&lt;/h2&gt;&lt;p&gt;面向对象程序设计有4个主要的特点：抽象、封装、继承和多态性。了解了面向对象程序设计的两个重要特征&lt;em&gt;数据抽象与封装&lt;/em&gt;,已经能够设计出基于对象的程序，这是面向对象程序设计的基础。要较好地进行面向对象程序设计，还必须了解面向对象程序设计的另外两个重要的特性，*继承和多态性.&lt;/p&gt;
&lt;h3 id=&quot;继承的相关概念&quot;&gt;&lt;a href=&quot;#继承的相关概念&quot; class=&quot;headerlink&quot; title=&quot;继承的相关概念&quot;&gt;&lt;/a&gt;继承的相关概念&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;继承是类之间定义的一种重要关系&lt;/li&gt;
&lt;li&gt;一个B类继承A类，或称为从类A派生类B，类A称为基类（父类），类B称为派生类(子类）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;派生类的定义&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;类继承关系的语法形式&lt;br&gt;class 派生类：基类名表&lt;br&gt;{&lt;br&gt;数据成员和成员函数声明&lt;br&gt;};&lt;br&gt;基类名表 构成&lt;br&gt;访问控制 基类名1，访问控制 基类名2，，，，访问控制 基类名n&lt;br&gt;访问控制表示派生类对基类的继承方式，使用关键字：&lt;br&gt;public   公有继承&lt;br&gt;private  私有继承&lt;br&gt;protected  保护继承&lt;br&gt;**   注意： c++中继承方式(public、private、protected）会影响子类的对外访问属性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;继承的几点重要说明&quot;&gt;&lt;a href=&quot;#继承的几点重要说明&quot; class=&quot;headerlink&quot; title=&quot;继承的几点重要说明:&quot;&gt;&lt;/a&gt;继承的几点重要说明:&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;- 1.子类拥有父类的所有成员变量和成员函数
- 2.子类可以拥有父类没有的方法和属性
- 3.子类对象可以当做父类对象来使用
- 4. 子类就是一种特殊的父类
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;c++中的继承方式会影响子类的对外的访问属性&lt;blockquote&gt;
&lt;p&gt; public继承: 父类成员在子类中保持原有的访问级别&lt;br&gt; private继承: 父类成员在子类中变成private成员&lt;br&gt; protected继承: 父类中public成员会变成protected&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;父类中protected成员仍然为protected
父类中private成员仍然为private
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; private成员在子类中依然存在，但是却无法访问到，不论何种方式继承基类，派生类d都不能直接使用基类的私有成员.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;派生类类成员访问级别设置的原则&quot;&gt;&lt;a href=&quot;#派生类类成员访问级别设置的原则&quot; class=&quot;headerlink&quot; title=&quot;派生类类成员访问级别设置的原则&quot;&gt;&lt;/a&gt;派生类类成员访问级别设置的原则&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;1.需要被外界访问的成员直接设置为public&lt;/li&gt;
&lt;li&gt;2.只能在当前类中访问的成员设置为private&lt;/li&gt;
&lt;li&gt;3.只能在当前类和子类中访问的成员设置为protected,protected成员的访问权限介于public和private之间&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;类型兼容性原则&quot;&gt;&lt;a href=&quot;#类型兼容性原则&quot; class=&quot;headerlink&quot; title=&quot;类型兼容性原则&quot;&gt;&lt;/a&gt;类型兼容性原则&lt;/h2&gt;&lt;p&gt;  类型兼容规则是指在需要基类对象的任何地方，都可以使用公有派生类的对象来替代。通过公有继承，派生类得到了基类中除构造函数、析构函数之外的所有成员。这样，公有派生类实际就具备了基类的所有功能，凡是基类能解决的问题，公有派生类都可以解决。类型兼容规则中所指的替代包括以下情况：&lt;br&gt;子类对象可以当作父类对象使用&lt;br&gt;子类对象可以直接赋值给父类对象&lt;br&gt;子类对象可以直接初始化父类对象&lt;br&gt;父类指针可以直接指向子类对象&lt;br&gt;父类引用可以直接引用子类对象&lt;br&gt;在替代之后，派生类对象就可以作为基类的对象使用，但是只能使用从基类继承的成员。&lt;br&gt;类型兼容规则是多态性的重要基础之一。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;没有写程序&lt;/code&gt;附一个随机数程序&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;ctime&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	srand((&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt;)time(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; var = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + rand() % (&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt; - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;Rand number is:&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; var;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	getchar();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 比较基础点  自己总结了写不是太全面 &lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;继承概念&quot;&gt;&lt;a href=&quot;#继承概念&quot; class=&quot;headerlink&quot; title=&quot;继承概念&quot;&gt;&lt;/a&gt;继承概念&lt;/h2&gt;&lt;p&gt;面向对象程序设计有4个主要的特点：抽象、封装、继承和多态性。了解了面向对象程序设计的两个重要特征&lt;em&gt;数据抽象与封装&lt;/e
    
    </summary>
    
      <category term="c/c++" scheme="http://yunvoo.com/categories/c-c/"/>
    
    
      <category term="C++" scheme="http://yunvoo.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>告诉你一个秘密：努力的方法</title>
    <link href="http://yunvoo.com//blog/2015/01/03/%E5%91%8A%E8%AF%89%E4%BD%A0%E4%B8%80%E4%B8%AA%E7%A7%98%E5%AF%86%EF%BC%9A%E5%8A%AA%E5%8A%9B%E7%9A%84%E6%96%B9%E6%B3%95.html"/>
    <id>http://yunvoo.com//blog/2015/01/03/告诉你一个秘密：努力的方法.html</id>
    <published>2015-01-02T16:00:00.000Z</published>
    <updated>2016-06-19T12:59:28.726Z</updated>
    
    <content type="html">&lt;h2 id=&quot;告诉你一个秘密：努力的方法&quot;&gt;&lt;a href=&quot;#告诉你一个秘密：努力的方法&quot; class=&quot;headerlink&quot; title=&quot;告诉你一个秘密：努力的方法&quot;&gt;&lt;/a&gt;告诉你一个秘密：努力的方法&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;今天看到一篇不错的文章 分享一下&lt;/strong&gt;(&lt;em&gt; 特别声明本文全来自 &lt;a href=&quot;http://taomics.tombl.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如风令&lt;/a&gt;&lt;/em&gt; )&lt;/p&gt;
&lt;p&gt;我要告诉你一个秘密，比容易地挣钱更有用，因为挣钱太容易会让你丧失耐心，这也许就是为什么中大奖的人很多生活得不快乐。&lt;br&gt;这个秘密就是怎么努力，尽管很多关心你的人 都要求你努力，但没有告诉你什么是努力，怎么努力，努力的结局中确定的部分是什么。&lt;br&gt;努力到底是什么？不单单是勤奋，所谓的用功。这里要讲的努力是有效的努力，不是让人绝望的辛苦，不是让你精疲力尽的苦战，更不是没有目的的自残性牺牲。&lt;br&gt;如何做到努力是快乐的结局，任何的付出都让你快乐着。&lt;br&gt;这里有一个秘密，这个秘密就是努力不是强迫性地精力耗费，而是滴水穿石般地轻松累积效应。这个问题的难度在于认识的改变和习惯模式的建立。&lt;br&gt;我不想让任何人有被欺骗的感觉，为了避免产生误区，为了不要找借口接受所谓的牺牲精神，必须随时都要觉得自己在高高兴兴地探宝和玩游戏，或者是在看自己暗恋的人。&lt;br&gt;我给你这个提醒不是盲目许诺什么结局，而是让你轻松地判断你不是在浪费自己的精力。&lt;br&gt;切入正题，从认识的角度来说，努力不是苦行，而是自己有目的地准备和尝试，或者是为了自己的目标而做一些必要的铺垫。就像是你要请你心爱的人吃饭，你会根据自己的能力计划吃饭的地点、吃什么饭馆、送什么礼物。&lt;br&gt;引入一个沉重的话题，代价。一说到代价就觉得后果很严重，所以，我不想说努力是代价。努力，做好努力，做对努力，就可以避免不努力所要付出的代价，悲催。&lt;br&gt;努力不需要成本，只需要心情、毅力 智慧和运气，这些因素不用就会白白流走，用好这些因素是你的努力更有效，既可以事半功倍，有可以一本万利。&lt;br&gt;到这里你会觉得我在空谈，没有实质性东西，你感觉是对的，因为你需要实例印证。&lt;br&gt;你准备再就业，所有人觉得你需要再进学校读个证书或者学位，这不是一个有效的办法。几乎是自欺欺人地找一个借口逃避责任，让别人管着你做一件不能解决现实问题的事。你需要做事的能力，而不是再经历一次被灌输知识的过程。&lt;br&gt;找一个工作，任何工作，义务劳动也好，只要能有人认为你能做一些对别人有意义的事。然后，再决定通过什么途径解决你遇到的问题。受教育是你的机会，工作也是机会。你的努力，让你学习和准备更好，让你完成更多任务。&lt;br&gt;当你在现实中找到了自己的路，你走下去就会少很多无谓的竞争。能通过自己的创造，而不是抄袭别人的方式，就是立于不败之地的生存习惯。&lt;br&gt;做正确的事是可以选择的，正确地做事只能通过尝试。但是，正确的事在历史上都是通过理解和修改来解释的，而正确地做事更具有持久性和通用性。 你准备自己的哪一方面，最后你就成就在那里。努力不是浪费自己的精力，而是建立自己需要的条件。年轻时精力无限，用在有记忆的地方，用在有积累的地方，用在有储存的地方，要么创建实体，要么创建理论，能力与资源同样重要。&lt;br&gt;在不同的年龄段，努力的专注性表现在建立的标的。建立体格、性格和习惯，是年轻时要做的，不超过二十岁。建立家庭、培育子女、职业习惯，不超过四十岁。建立事业系统、生活风格、社会贡献，是四十到六十岁的事。这三个二十年可以完成绝大部份的需要努力的事情。&lt;br&gt;我还有不到十年的时间，还要做很多重复而没有彻底完成过的事。 你最好有一个规划，越清晰地意识到自己的时间表和行动目标，效率就越高。&lt;br&gt;挫折，不是毒品，只是你成长起来的砝码，每个台阶都是一个平衡，挫折的砝码不断地增加减少，有时你会经历很多挫折也不能达成一个平衡。你的意志在起作用，是继续努力还是放任自流。&lt;br&gt;在努力中，知道那些不知道的是机会也可能改变生活方式，但没有勇气去赌不确定的。知道那些确定的并不能改变自己的现状，也没有更好的未来，但不舍得放弃自己已经花费了很久的投入所获得的。&lt;br&gt;在努力中，确保生存的安定，把希望寄托在确定能延续自己生命的人身上。有了爱的成分，一方面可以获得更充足的能量，一方面也能有意外的支持和帮助关系。爱，不是通过强调，也不能用强迫来实现。&lt;br&gt;努力，在目标明确、在道路确定时，精力不会浪费在无谓的尝试或者惰性虚度中，可以起到事半功倍的作用。对于有这种境遇的人，幸运的不仅是高效、还有机会扩大自己的弹性范围。更幸运的是，在有目的的努力之外，实现完美的丰满和健壮。&lt;br&gt;遗憾，多数人错过了很多，悔不该当初，这归于性格，这是个人过去的沉淀，这归于运气，这是外来的遭遇。所谓性格命运，不是简单的单一原因可以解释，都是复杂的综合结果。你收集消极的因素，回避积极的能量，逐渐形成负重增加，而能量不足。努力改变这种现状，要么需要有人引领，要么勇敢割舍。没有来不及，只有不愿意。&lt;br&gt;后悔，不是没有努力，而是努力的过程所收获的结果不是自己满意的。我有一个朋友，在英国法国留学和训练后，选择在加拿大北部的一个大学当了一辈子教授。他告诉我，再来一次，会换一个暖和一点的南方工作和生活。他厌倦了漫长的冬天。&lt;br&gt;努力有两条腿，勤奋和耐心。不勤奋，你的天赋得不到体验，而且你会错过机会。没有耐心，就会出现两种情况，要么忙忙碌碌，机会来的时候，反应不及，要么心神不集中，属于紧跟。勤奋，是你不会拖延，耐心，是你不会心不在焉。把勤奋和耐心结合，就像狮子捕食，不做无谓的忙碌，静候机会，果敢出击，顺其自然，而不是像蚂蚁忙碌不停。&lt;br&gt;不管你怎么努力，都会面临一种尴尬。过程是各种选择后的挣扎，结果是另一种过程的开始。你感觉到的，只是一种思维方式的习惯性选择。在契约社会中，能让人满意的，不是你做了什么，也不是你怎么做的，而是你所呈现的结果是否得到认可，或者你能解释得很合理而且很让人舒服。&lt;br&gt;效率，在努力中是关键，低效率让我们痛苦。首先是有效，然后是提高效率。提高效率，有俩个办法，一是增加频率，而是扩大规模。辛苦，就是因为效率太低，认识到这一点，就不要轻易改变自己的观点，即使走投无路，也不能自寻死路。在你还能思考的时候，在你还能跑步的时候，活着不是唯一的选择。活的有效率，比什么都有意义。效率比质量都重要，因为质量是观点，而效率是数据。&lt;br&gt;惰性，不需要努力。努力不是贪心，而是克服自己的惰性。惰性是不好的习惯，回避、拖延和闭塞是惰性的表象。如果不能克服惰性，就会陷入低效率的循环。在被迫无奈的时候，表现得忙忙碌碌，应付一些不得不做的事情。&lt;br&gt;借口，不想努力的借口是通过过度的表现而掩饰。现实中有多种方法可以做到自信，让别人觉得你不需要怜悯。别人愿意帮助你，不是因为你需要，而是你值得。把自己弄的疲惫不堪并不能赢得认可，反而让人觉得你能力差。即使想弄个借口让别人理解自己的惰性，也要多动动脑子，在思维模式上有一些创新。这样，说不定还有把你大材小用了。&lt;br&gt;目标不明确，怎么努力？目标管理就是规划设计，实现大目标，需要什么，这些需要就成为小目标。在努力过程中，大目标包括的小目标需要调整，优先完成那些基础而且重要的。&lt;br&gt;努力的结果不仅靠体力的勤奋，还有脑力的开放。对于努力的结果，你采用什么样的方式去对待，决定你的努力所创造的价值。开放态度，征求专业人士的意见，并积极改进自己的行为方式。&lt;br&gt;努力有时是克制自己的行为，在公共场合不太随便，私下也不要太放纵。在一个自己喜欢而又满意的系统中，靠努力所创造的价值做出贡献，少凭交情，多靠交易。在私下不做交易，拒绝诱惑和贿赂，只做愿意做的事。&lt;br&gt;公平是你不努力就没有收获，而努力也未必得到报答。在认识公平的过程中，没有任性，但需要韧性。市场化的社会中，&lt;br&gt;什么是正确的事？努力做错误的事情是很多人话费半生而后悔莫及。你努力学习而建立的基础未必就是一生的前提，你恋爱结婚也未必是直接的舞台。所有的经历中能让你增加自信、心理成熟和身体健壮的部分都是正确的。&lt;br&gt;真相是来龙去脉，但现实中往往是断章取义成为常识。如果不能正本清源，就会纵容以讹传讹。有些人知道你在说什么，但多数人不清楚你的意思，有时就像空气和阳光，每天只有那么极少部分被吸收。天网恢恢疏而不漏，精神是宽泛博大的，自然是有规律可循的，一个人只有集中精力努力做有兴趣的事情，才有可能发现自然本质，扩大人的知识储备。&lt;br&gt;不要羡慕别人的光鲜外表、幸福表象，也许是真实的，甚至是长久的，但过程不是你想要的，也不适合你的习惯和性情。不要因为不满意自己的状态就认为别人的状态就是更好的，努力调整自己，开阔视野，镇定自若地行动。&lt;br&gt;通过努力能做到的，都不算什么歧视。得志不是那么确定的事情，为了维持一种状态或者是现状，你愿意付出什么和能够应对多少变幻，都是由你选择的参照物决定的。是否勤奋和努力也不是由别人决定的。&lt;br&gt;即使在某个时间点呈现的相似的数量变化，甚至在同一个时间段的趋势都相似，也不能断定两件事情都符合你的需要。当环境的变化让你觉得无常，你需要的不是盯住细节，而是移开视线，尽量排除自己的状况所产生的主观的因素。&lt;br&gt;有些知识是经历产生的，心知肚明为什么。对于缺乏经历的人，需要解释后才能理解。这种知识不是理解力的问题，也不能用智商高低评价。多经历一些事情，不仅能增长见识，也可锻炼抵抗力和应对能力。&lt;br&gt;在知识和经历的获取过程中，兴趣可以提高努力的效率，更敏感、更集中。在兴趣中，自然产生欲望，能力和技术会成为自觉性的副产品。就像阅读，有目的性地寻找自己需要的信息和知识，可以导致学习的兴趣和效率高升。&lt;br&gt;坚强和韧性是一个人做一件事情时体现的性格和能力，如果不经历一个过程，就不能知道一个人的表现。短时间内可以考察一个人的智力和情商，但坚韧不拔的个性需要长久的勘验。&lt;br&gt;你选择什么样的对象，不管是人还是货物，都是你个人的性格决定的。这样讲你能接受，因为没有把责任推到外面去。如果告诉你命运就是如此，就会质疑是宿命论。在提高自己选择能力时，集中在克服性格弱点，而不是努力学习别人的技巧。选择是生存之道，有让你满意的就不用选择，多数人多数时间都是在自己不满意的选择中生存。&lt;br&gt;依赖别人就会失去自主性，利用别人的特长进行合作是互惠互利的聪明行为，但不能牺牲自己的自主性。现在，已经很难让自己寄生在别人的地盘里，自己不愿意，别人也不想做这么愚蠢的事情。 人性的弱点摆脱不了自私，即使是爱也有控制和独享的本能欲望。利益关系下，你不能让对方知道你的努力所创造的价值，或者，你不能证明你的存在价值，就只能期盼你受到公平对待处理。从积极的方面讲，寄人篱下的日子，就是为了生命的延续，其他都是没有意义的。&lt;br&gt;在时间上每个人都是失败的，你我都是被动的接受年龄和寿命。在空间上，我们取得了成功，主动地到处出现和污染。就像一颗蜡烛，被点燃，自由地发光发热。生命的意义是没有意思的，不是为了快乐而活着，不是为了富贵而存在。只是在经过时空里的一个场景中，不小心留下了后人还记得的你的遗传信息。&lt;br&gt;多数人觉得预测和预见性很重要，极少数人已经集中力量做好应对。预测是能力，应对是实力。当你不能预测的时候，只能做一些紧急的事，或者按照别人的指令做事。尝试是锻炼承受挫折的能力，也是不得已而经历试错的过程。工作与人生都一样，知道自己的特长和弱点，发挥长处可以赢得比赛，修补短处可以避免受伤。每个人都努力建造自己的优势，以谋求生存空间和改善生活条件。然而，不是每个人都能修炼自己以达到人格的完美完整完全。&lt;br&gt;修缮自我是个人能力达到一定程度上的高级行为，可以在社会规则之上游刃有余地生存，而且还有能力影响别人的生活方式和生存状态。生存可以在完全被动的处境下付出劳动，而生活是主动的选择自己的生存方式。&lt;br&gt;努力的作用就像地球引力，在一定的距离内都帮助你能站立行走。有一天你不能站起来了，不是地球引力没有了，而是你的体力不够了。也许是你太虚，也许是你躺了太久，你失去了能站立行走的信心。早晨努力起来，就是一念之差，你知道你的惰性不是身体的原因，只是精神的萎靡。只有你努力，站着挣钱，你就会自信，就是光彩夺目迷人。&lt;br&gt;定力决定你的努力是否能在确定的方向上有效。诱惑经常让你改变主意，导致没有进展。决定是在行动之前做的，做完再看对错。行动中不要犹豫不决，一鼓作气完成任务。定力，就是在行动上的一致性，而非行动的抑制性。&lt;br&gt;坚强对于每个人都重要，一方面承担责任，一方面聚集力量，还要忍受难以想象的困难。让自己坚强是一个不断努力的过程，当你知道了坚强的内容，逐项检验自己能否做到。尝试一下，再坚持一下，就像建立肌肉体型一样，不同的年龄阶段，难度不同，能借助专业指导更有效。&lt;br&gt;至于情感，努力只是让自己成为更好的朋友，不用借口推脱，不用未来许诺。 给情感加上时间，是不自信，是不成熟，这种冲动性习惯并不能帮助维系美好的关系。&lt;br&gt;至于市场，努力是让自己有应对能力，即使政府也只能影响市场的波动，并不能让市场按计划的路走。你努力预测市场的未来，还要让所有人懂得你的描述，就会成为过去式的经济学者，而你自己不能对市场的波动做出正确的应对。&lt;br&gt;欲望在每个人的生活中都会表现为创造力，结婚生子、求学谋职、闯荡江湖 、建功立业。如果个人欲望不能得到合理的疏导 ，对家庭社会都会造成伤害作用。个人欲望的表达和实现，在社会中需要通过法制和规范的过滤，那些生存在狭缝和边缘的人，就是社会的不稳定因素。&lt;br&gt;贪心主要表现为价格越便宜越好、回报率越高越好。初心没错，但你没有足耐心。这个矛盾是内心纠结、痛苦和行为失败的关键症结。努力培养耐心和及时行动的勇气是解决这个问题的唯一有效途径。戒除贪心是做不到的，除非你远离社会生活。&lt;br&gt;在一个正确的方向上每一分努力都会有用，随时调整自己适应环境需要未必就是正确的，努力适应环境是暂时性生存需要，努力建立自己的通道是长期性的目标。没有方向你不需要努力，方向错了努力是一种锻炼。成为领导是更重要的目标，没有人跟随不是目标对不对，而是你的影响力不够。影响别人就是帮助别人更有效的实现自己的目标。&lt;br&gt;简单地生活不是容易的事情，要么你靠求人，要么成为别人需要的人。没有尊严的生活就像是黑夜里行窃，白天躲藏。就像白日里乞讨，黑夜铺张。尊严不是别人施舍的，而是平等的权利。为尊严付出的努力，就像能量守恒一样，你承受的压力的能力决定你的层次。&lt;br&gt;独立判断独立思考独立完成，是合作的前提。你不幸福，是你的人际关系不对。你不富有，是你的工作系统不先进。你不自信，是你所做的事不是自己适合的。认识自己和认清对象都不是轻易而举的事情，在现实的行动中尝试和深刻地反思自己的痛苦，纠正自己努力过程中还没有形成习惯的思维方式。&lt;br&gt;生命没有停歇，生活没有间隔，生存没有懈怠。在生存中努力是为了安定的生活，让生命更自由奔放。生存是科学，生活是艺术，没有技术革新只能在一个层次徘徊，没有天赋的绽放就只能死水一潭。努力创新努力创造，不为结果而悲伤，不因失败而放弃，努力就像呼吸和饮食一样成为本能，让生命在每个季节都丰满完满。&lt;br&gt;除了工作和交易，不需要比较。情感是不需要比较的，快乐也不是能比较的，健康也不能比较，理想和爱情更不能比较。&lt;br&gt;旅行越来越轻松了，不用带书，也不用带现金。人生也是一样，知识不需要别人教，挣钱也不需要别人发薪。只要健康就能工作，只要智慧就能赚钱。&lt;br&gt;快乐和幸福不是目的而是状态，工作的努力在于系统的有效和更新，情感的努力在于与接受自己的人一起。道不同不相为谋是工作关系，情投意合是爱情友情关系。&lt;br&gt;努力是个人的事，不是为了让别人看的，装样子没有意义，而且并不能节省精力。努力是高大上的行为，你不努力是你没有找到合适的工作环境，自己愿意做的事，努力是主动性的。劝诫别人努力，不如帮助别人努力。不以成败论英雄，有人躺在病床上努力，有人在办公室里放纵。&lt;br&gt;默默地努力，无论在学习还是工作，都会让我们的生活更容易一些。努力不是为了别人，装样子是欺骗自己，枉费了精力，还会连累生活。&lt;br&gt;努力过你不快乐，不是不该，也不是结果，而是环境，包括合作伙伴的性格。工作需要努力，生存需要努力，生活需要努力，不能快乐地存在，就是为了什么而牺牲自己。也许是为了生命的延续、家庭的安定、民族的精神、世界的和平。&lt;br&gt;努力就是为了精通一种自信的能力，不只是一次成功。成功是过去完成式，而精通是未来完成式。职务和头衔都是工作需要，只有贡献才是荣誉。如果你选择自己没有兴趣的事做，就只当工作，你只是为了交差和回报你的职位所支付你的待遇，不会全力以赴的花费你的精力。&lt;br&gt;愿意做的事总有机会成功，只要不放弃，就不会忘记。摆脱焦虑和抑郁的途径不是靠社会提供方法，而是靠你自己的能力。这种能力，在年轻的时候，不需要你成为全好人，而需要你有特长，而且有社会价值。当你成长后，你的特长成为信用，你更需要有更宽泛的能力，帮助别人活得自己的特长。&lt;br&gt;成功是确定的事，影响巨大，但是短暂的。影响一直持续下去很长时间的是未来的不确定，就是再次发生的成功。努力就是负责精通这种能力，没有终点，只有更完整。&lt;br&gt;思维方式决定心情，行为方式决定状态。努力保持的心情，努力改变的是状态。&lt;br&gt;幸运，在现实中，解释是缺乏逻辑性的，而比较个人之间的差异，可以觉察到，把握能力的不同仅在于对于确定性的跟随。这取决于性格。&lt;br&gt;有了方向，你的努力才有意义。机会不是等来的，而是准备中遇到的。你没有动力，就是你没有找到兴趣。该做的是责任，是你通过别人而体现自己的价值。喜欢做的，是自我完成的价值。社会价值是自我价值的延伸，没有时间实现自我价值，所贡献的社会价值也只能是无足轻重的。方向不一定是目的地，可以是一条路线、一个观点，甚至一个假设。对错需要很长时间，在证明对错的过程中，生命只是一个点、阶段，就像昙花一现一样。值得庆幸的是，现在有了即时记录的工具，可以把瞬间即逝的事件录下来。&lt;br&gt;努力放下是做不到的事，放下的不需要努力。你想放下的一直在手里，而你没想放下的却不在了。这不是悖论，而是现实。现实中，多数人感觉、感知和接触的事情，没有逻辑关系，发生了，就理所当然了。你所纠结并努力想明白的事情，一直困扰着你。每个人都有类似的经历，但并不完全一样。爱情、亲情和友情，并不完全一样，爱情和亲情是放不下的，友情容易一些。在友情中，交情是深层的，交往只是表面的。牵扯到利益，情感就变得可以放下了。所以，那些让你放不下的，不是能独立存在的客物，而是在你的精神、脾气和神经里已经形成残留永存的非物性，就像那些经常出现在梦里的事情。&lt;br&gt;放心，你办事我放心，是高不可攀的信任。放不下，几乎都是不放心。辛苦就是心累。让你赏心悦目的事情，不一定是你必须和应该的任务，但一定是幸运的礼物。愿意，未必放心。放心，肯定愿意。什么让你放心，怎么才能放心，不是你有什么权势和财富，而是你相信什么人。奔波、辛苦和劳累，都是因为没有遇到一个让你放心的人。你喜欢，甚至爱的人，都未必是你放心的。你放心的人，可以有很多缺点。&lt;br&gt;复杂的事情，必须经过分解，变成多个简单的部分。试图用简单的方法去做复杂的事情，总会碰壁。工作与生活都一样，你不能做好自己的事，就要有人为你担当责任。别人只能帮你做，但没有人替你做，道理简单，但很多问题是因为没有弄懂这个道理。&lt;br&gt;情绪是决定问题的复杂程度关键因素，同时，当问题没有标准答案时，只能去做问题的原因，而且，每个人根据自己的情绪而采取不同的判断和选择。即使同一个人，对同一个问题，由于情绪化而导致有不一样的结果。理性就是更客观些，排除主观情绪化因素，并尽量能得到可重复性结果，这样就需要有对照和参照（对参），而且对参越合理结果越有普遍意义。自然科学的问题，相对于人文社会问题，就简单一些。&lt;br&gt;人生的意义是一个复杂问题，有很多答案。简单化后就是实现自我，在不同的层次，价值不同。初心，是开始每一段旅程时的目的。集中精力做自己要做的事、该做的事，结果可能不能完全如愿以偿，但不会后悔。&lt;br&gt;你的前面有陷阱也有坑，有人喜欢跳坑，也有人喜欢试探陷阱。跳坑是为了明确的事情，试探陷阱是为了不确定的事情。有时候，知道是陷阱，依然跃跃欲试，就凭一颗侥幸心理。这种行为属于投机，其动机是自己能逃得更快，最好能捡到别人丢下的物品。&lt;br&gt;老化和病态是生命周期中必然经历的痛苦，就像一年四季的自然景象，春天般的花季，风霜冰雪的暮冬。我们的努力不是为了准备冬天的需要而错过夏天该享受的生活。人生的圆满是经历不同年龄的需要和满足，并非是为了最后一天的辉煌灿烂而错过每天的阳光。 身体机能和心理健康都需要落实在行动上 ，推脱和借口都会导致遗憾。身体需要运动，心灵需要阅读。&lt;br&gt;不管你身在何处都不要放弃初心，困难作为借口总是在欺骗自己，同时失去的不仅是时机还有人力资源。创业是改变生存方式，创新是丰富生活内容，创造是生命奇迹。创业属于英雄行为，创新是武士精神，创造是神圣做为。一直坚持的可能是精神方面的偏好，而一直没有做的也是精神方面的疼点。创造往往处于早熟或者不合时宜，而创新是时机成熟时的点突破，创业只是内心深处的花朵开了。&lt;br&gt;选择比努力重要，相对于选择，有时努力显得回天无力。 在风云变幻中，要清楚自己的处境和能力，不能完全依赖别人的许诺，要在自己能选择的时候，选择符合自己能力和实力的未来之路。不要把自己的生命消耗在没有意义的妥协和屈从中。&lt;br&gt;复辟是求人性的秩序，创新是求人性的解放。人性超越自然是可能的，就像是海洋在狂风中波浪高耸入云，就像荷兰郁金香泡沫，就像大跃进的大锅饭。工业化和市场经济开发了人的自主性并改变了靠天吃饭的农业经济局面。智能和信息产业将把人从体力劳动中解放出来，生活更本能、更自由化。在平衡欲望与秩序、竞争与和谐中，由科技创造填补因为懒惰而导致的荒芜。&lt;br&gt;成功的迹象不是安定的感觉，也不是一层不变的确定无疑。你所做的准备，不是拥有多少钱，也不是你想要做什么。你看到了明显的趋势，而且你已经在其中，你有底气能承担一定的风险所制造的恐惧， 你有理想包容累积所导致的贪婪。你处于进可攻退可守的状态。&lt;br&gt;你不一定要追逐时尚，但要看到。就像你不坚守传统一样，但要知道。这就是道理、哲学，更是智慧的真谛。&lt;br&gt;你努力前行，一是为了到达自己的目的地，一是为了体验沿途的风景。你的影响力可能是即时的互动，也会是在你不在现场的时候留下的痕迹。如果你选择光明大道，就很难成为领导者。如果你走在荒芜的没有道路的地方，就很容易吸引别人踩着你足迹行走。&lt;br&gt;矛盾是一切发生发展的普遍机制，从简单的问题到复杂的难题，都避免回答两个极端走向的一个，因为在两极之间有足够的存在可能。科学技术就是条件化的重复性发现，佛学是深入和透过表象的通用性解释，而哲学用两极互换位置而观察现象的不同角度。努力，在科学里用在重复性的范围扩张，在佛学里用在体验现实的遭遇而获得瞬间的觉悟在科学、佛学和哲学里，对错都有适应范围，现实中叫适度。&lt;br&gt;同一种力量，道家叫气，佛家叫缘，科学家叫场。人气 、善缘、引力场，事物相互之间的作用，可以是具体的，也可以是抽象的。可以是协同的，也可以是拮抗的。 事物之间的关系，可以是单向的，也可以是相互的。&lt;br&gt;社会就是一个表现的体制，你的表现就是你的价值。当你的表现没有作用时，需要思考自己该改变什么才能发挥影响。 存在是绝对的，而观点是相对的。静下来能看到存在，运动中看到表现。&lt;br&gt;自我意识是知道自己的属性，社会认识是知道自己能在社会的什么领域生存。生存方式就是在社会中找到属于自己一块地盘，播种、经营、收获自己的生活果实。社会中的障碍可分两种， 具体的和抽象的。你想要攻城掠地，就需要团队，你要有组织和整合能力。你想要在别人没有想到的缝隙里获利，就要有独立思考和概括预见能力。&lt;br&gt;奇迹是生命的贡献，每个生命都有机会赢取。你是在好奇地探索，还是碌碌无为地度日，错过奇迹只是因为你没有兴趣。一个人如果能做有兴趣的工作，就是在创造奇迹。&lt;br&gt;微笑和勤奋都是态度，不能反映你是否愿意和富有。必须坚信你能看到的，把你想要的做成能看到的。努力是做有效的事，记录自己的进展，每天都清楚自己的成绩，让自信累积起来，会心的微笑自然流露。在实现自己利益的路上，勤奋是自然的状态。&lt;br&gt;欲望是化肥，能促进枝叶生长。希望是水源，滋润生命的鲜活。愿望是山峦，远远的等着你来到跟前，活得暂时的安慰。盼望是晨光，守候到天亮就睡着了。期望是彩票，买了就想中。失望是股票，见好就收。绝望是地狱，一切都向好。&lt;br&gt;科技带来风险，危机是心理作用， 良知是控制风险的砝码。在智慧的边缘，危机出现了。如果有比自己更强大的力量和更高级的智慧，就不必要自己结束自己的物理生命。 坚持是精神和意志的正取向，努力是行为对条件的充分利用。恐惧不是能力不够，而是心理缺乏营养、见识缺乏开放、智慧停止成长。理性判断和充分准备是克服恐惧的必由之路。&lt;br&gt;思想是一个人的程序，思维方式决定解决问题的习惯。你不能控制自己想什么，但能决定怎么想，决定可以基于理性的考虑，但不是理性的结果。思维方式和行为方式都有习惯性，改变习惯需要训练，通过训练可以取得更好的习惯。不怕做不到，怕的是不想。一旦习惯了不想，就等于电脑程序过时了，不能完成当下的任务。&lt;br&gt;学习提高是更新自己的知识结构和思维模式，不管年龄多大，都可以努力做到。一旦养成固步自封的习惯，就加快了老化和衰退。就像一部机器，维护和更新系统后，运行速度和效率都得到提高。&lt;br&gt;经济泡沫与时尚有类似之处，永远都是给你欲罢不能的感觉。矜持谨慎的看着，离你越来越远，当你鼓足勇气跨进后，就失去了原来的魅力。&lt;br&gt;努力，在开始是获取营养、方法和启发。后来是建立属于自己的营盘，可以攻城掠地。最终是恢复自我，在自己的现实中生存，不再需要像早期那样拼命，也能按自己的方式生活。&lt;br&gt;纠缠的是缘份，变幻的是机会，确定的是负担。健康、愉快和富有是每天的状态，不是明天的梦想。年轻时的努力，可能是盲目的，不管在什么年代，都不能靠咨询安排自己的梦想。选择，并非需要考虑很多，并非要得到可行性许可，你追求的是自己梦想，别人怎么知道你的梦想是否可以实现。&lt;br&gt;泡沫是现象，制造泡沫只是为了短暂的兴奋。泡沫是自然现象，在现实生活中很难避免出现。经济发展和金融市场的泡沫，往往用数字和图表表现出来。泡沫不是绝对的坏现象，而是不得已而为之的。有些泡沫是为了美好的未来而准备的成长空间，很多人看好，也有很多人被诱惑，或者被说服，而愿意冒这个泡沫风险。&lt;br&gt;天才是富有的，圣人是快乐的，神仙是健康的。你自恃清高，总觉得怀才不遇，就是因为你不会挣钱。你自命不凡，要拯救众生，就不要愁眉不展。你无拘无束，自由散漫，不能克制恶习，就不会健康长寿。&lt;br&gt;积累的资本不仅是量化的还是变化的，可以选择和组合用于新的机会和平台，能持续的往往可以实现指数性泡沫式爆发，这就是天赋之外的关键因素。眼光是可以磨炼的，在对的环境中，只要努力就有飞跃发展。&lt;br&gt;个人的努力所导致的处境，在时代变迁缓慢是更有意义，当时代急速发展时选择更关键。 在智慧和能力之外的不确定性是运气，包括经验、定力、耐性、心情和环境变化。 自然包括人的努力所导致的结果，就像人口控制和战争所导致人口组成。&lt;br&gt;一夜成名可能，一夜暴富也可能，成功是日积月累的结果，需要不断努力才能存在的状态。&lt;br&gt;说什么，怎么说，对象不同，重要性不同。对熟悉的人，说什么更重要。陌生的人，怎么说更重要。&lt;br&gt;毅力是你已经疲惫了，但坚持到在别人都疲惫后。定力是别人都兴奋了，你能控制自己兴奋。 你想要的，都不是短时间内能实现的。你害怕的，一直在你心里。不断学习和实践，坚持发展自己的优势，耐心等待属于自己的机会，勇敢行动。&lt;br&gt;对自己，自己可以不客观，但要给别人能客观看你的机会。装和演都可以，互动是关键。 安定下来，安静下来，做自己该做的事，做自己。&lt;br&gt;幸福的时候更容易谈奋斗，苦累已经被价值感稀释，能承担更大的压力，更愿意付更多的责任。&lt;br&gt;梦想，与兴趣无关，是一个大泡沫。实现的梦想，可能是一种羞耻，社会不能接受你的自豪。为了梦想，会投入太多，回报是自己的磨难。消极的情绪，主要来自于不切实际的幻想。&lt;br&gt;梦想，别人不能替你实现，就像没有人替你做梦一样。你的梦想，可以很小很大，实现后才知道。梦想之路可能是不真实的，但必须每天都走一步，很久不走，就懒得走了。&lt;br&gt;主动与冲动不一样，当你有了经验和自信，主动是理所当然，当你被诱惑而蠢蠢欲动，冲动是魔鬼。选择被动，也是主动，知道自己的处境和状态，没有主动的优势，准备好反应应对措施。&lt;br&gt;习惯了嘈杂和变幻，寂静的感觉反而有些诡秘。很多时候，这种情况是大事情要发生了。&lt;br&gt;时空里，可及不可知为空，可知不能及为时。没有时空时，你处于绝对的黑暗里，与真理融为一体。&lt;br&gt;奋斗，失败不可怕，不知失败很可怕。失败，是一次结果，不可怕。失败，不能成为态度，精神的不服，远比行动的勤奋，更能让你坚持到底。坚持不懈，是目标导向的精神，不以结果论英雄，英雄是誓死捍卫者。&lt;br&gt;努力，归根到底是为了弥补自己不够智慧。修炼，是为了摈弃自身没有用的累赘。锻炼，是为了保持自己处于活性和灵敏状态。社交，是为了充分利用资源、发展有利益创作和创新的系统。&lt;br&gt;营销有三个境界。第一是无为无价，第二是价值体现，第三是价格竞争。分别表现为用户终端体验、用户界面互动、用户之间比较。&lt;br&gt;努力就是谋求重复，摆脱重复，扩大重复。&lt;br&gt;信仰的力量巨大，所不同的是你所信仰的能否让你在现实的条件下实现理想的突破。人的潜力无限，传统是趋于保守和后知后觉的利益。信仰就是理想中那根被现实磨损得细微的通道。&lt;br&gt;人生是一段路，你的理想之地是物质和精神两种境界的终极柔和。想象是现实与理想之间的桥，不敢想就失去了过桥的机会。想象需要冒险，冒险的最大好处是能吸引那些伟大的人帮助你开路搭桥。说得像真的，是冒险者的第一个台阶，在信息时代也变得更有市场和地位。&lt;br&gt;智慧的两朵花，科学与艺术，都是想象和梦想的产物。清醒的时候和睡着的时候，所不同的是限度，努力的绝境经常需要失去常规理性的帮助，梦想是脑子一刻不得闲的结果。&lt;br&gt;快乐与幸福有什么不同，不是文字本身的原因，而是文化传统的结果。快乐是环境造成的，是环境刺激的反应状态，没有相对性。幸福是个人的判断感觉，是比较出来的相对性。努力让自己快乐，只有通过改变自己的环境实现。努力让自己幸福，可以通过与不同的人比较而达到。&lt;br&gt;帮你达到目的的是工作，帮你实现梦想的是事业。努力的方式不同，在于你冒险的态度，更在于你投入的规模，还有你适可而止的难易。&lt;br&gt;当你处于挣扎、矛盾的状态时，感觉到的疲劳提醒你在努力生存和奋斗。你不愿意随波逐流，你有自己的方向和速度，除了帮助你的因素，都会阻碍你的进步和发展。&lt;br&gt;孤独、焦虑和抑郁都会使你失去活力， 你需要情感交流、安定生活和成长自信。主动、积极和乐观是态度，努力、尝试和坚持是习惯，谦卑、信仰和冒险是性格。&lt;br&gt;集中精力才能高效率地工作，把需要的东西结合起来才能更有力量。为了达到身体和精神的最佳状态，需要身体的运动和心情的调整，然后在放松的过程中实现和谐的整合。&lt;br&gt;要么足够尖锐，要么足够快，不然，你不会突破成功。聪明就有机会，但把握机会还需要勇气和智慧。经验可能给你自信，也可能让你恐惧。成功是结果，其过程是花絮。&lt;br&gt;给信号还是制造噪音，这取决于掌权者的意识和处境，做为建议者，你必须有一个能自我检验的系统，在行动之后，判断是否有效。要求加薪、抗议压榨和剥削，都是一样的机制。&lt;br&gt;努力在时间上积累起来的吸引力，不仅可以通过视觉、听觉和触觉感受到，还可以靠直觉知道。高贵自古至今都是人品的极致境界，自称平凡的人不是自感平庸，而是在当下还没有实力表现出让人信服的魅力。谦卑是通往高贵的最直接的途径，不仅在信息的获取、现金流的接纳，甚至在有型资产的继承，都具有倾向性优势。努力不仅是体劳心苦，还是姿态对环境的接受能力。&lt;br&gt;一个体系的发生发展到衰落都有相似的过程，但细节不同。理性认识就是可以反复重复后你不得不认同，但没有即刻的用途。在认识过程中付出的努力，最初经历乡野、街边的粗鄙，到登堂入室的威武，再到专业学术的典雅。&lt;br&gt;努力中的运气是环境变化到适合你成长和发胀的时空，是否行动取决于你自己的决定。你根据时空的组合以及个人意愿，降低风险的可能性，在可控范围内行动。&lt;br&gt;在现实中有很多悖论，人们试图解释但不能，原因要么是没有理论基础， 要么是不能推广应用。但是，悖论所呈现的现象往往是日常不可少的。 人人做的事，从生存方式到发展模式，都是正确的，几乎每个人都有这种本能。在思想和文化基因里，歧视性的本质并非是决定生死的必需品，而是可有可无的自由意志、理想思维能力和信仰的选择习惯。&lt;br&gt;当你消耗太多而又不能得到补充时，负能量越来越大，这种情形更像黑洞，不同于泡沫。当世界生存在阳光下时，必有一个阴暗角落试图诱惑着。稍不慎就会堕落。要发展，你要么带电荷，要么壮大自己。保持中性，只能原地不动，除非有意外事件发生。&lt;br&gt;生活是方式，生存是表演。你方唱罢我登场。维持和保障别人的生活方式是一种责任，不像是自己的，可以随意调整。社会是契约关系，不管是文字的还是君子协定，都需要协商解决问题。生存的实力，一部分是现实，一部分是期望值。生存的压力来自期望值太大，来自别人的让你抑郁，来自自己的让你焦虑。不幸的是，当你没有压力的时候，就会产生孤独感。&lt;br&gt;很多事情在于把握，过错的一大半不在错，而是做得过份啦，错过的原因是犹豫不决。干的多错的多，更是成功的机会多。做事情要有谋略，做到什么程度，要有客观指标。&lt;br&gt;周期性发生的情况下，你的思维和行为习惯决定了你的成败。事情发生后，能改变基本原则，就是人们的心理处于麻木状态，但失去耐心，敏感但脆弱。聪明的、胆小的都撤了，剩下的是死磕的，也许是不小心错过的。这就是大机会。&lt;br&gt;准备工作是一生的事，打仗、演出、讲课、考试，无一例外都需要准备。坚持不懈的努力就是在做该做的事，在机会成熟的时候放手一搏。完全准备好是一个理想概念，现实中很多事情都是在一定的期限内必须完成的。这就是压力和风险。&lt;br&gt;在努力中失败的原因是贪便宜与不能坚持，成功的原因虽然很多，但可以肯定的是克服失败的原因。贪便宜的时候，你放弃了蓬勃发展的机会，而陷入一种重新试错的窘境。不够坚持也是因为贪便宜的心理作祟。&lt;br&gt;在判断与选择之间有一个误差，这个误差是由感性的参与造成。理性的分析和判断，在选择的霎那会犯错。即使选择了也还会心存侥幸地依依不舍地回顾，不能集中做正确的事。&lt;br&gt;当对于环境的敏感性成为生存需要时，物种的敏感程度决定了在食物链的位置。羚羊要比狮子更敏感才能存活下来。同样，一个人的敏感性影响到自身的健康和收获，身体不适和疼痛都是信号，市场的动荡是时机，根据自身的状况调整反应系统的敏感度。&lt;br&gt;做爱做的事，累了需要休息。做不爱做的事，累了需要调整一下心情。做事，纠错比重复重要。&lt;br&gt;期望是不平等的人之间存在的管理模式，长辈对晚辈，上司对下属，老师对学生。这种来自上面的期望已经形成了足够大的压力，自己只要努力做该做的，没必要再自己对自己期望太多。你有这种压力是一种幸运，可以集中精力完成这种期望值。&lt;br&gt;抗争，对于自己的命运，是安定，对于别人的压迫，是自由。 由于资讯的发达，传统失去了生命力。因此，随时需要调整自己的姿势，处于最佳状态。高风险的事情，是短时间段的行为。&lt;br&gt;顺势是安慰，没有对错。逆势是锻炼，不计较得失。看到的潮起潮落，有观感，仅是风景。游泳感到的随波逐流，体会到挣扎才能前行。聊天像观潮，读书像游泳，思想意识的交流，不仅需要挣扎体验，更需要反思。&lt;br&gt;一种能力、技术，在会了之后，才知道自己是否有天赋。甚至，需要你经历几次的反复，在挫折中脱颖而出，才意识到天赋只是万事俱备的东风。&lt;br&gt;理想，是状态，不是目标。时刻处于理想状态，才能更好有效地实现目标。爱情，是生命中最伟大的奖赏，比理想难得多。理想，有时能靠自己实现，爱情，靠自己是没有可能的。&lt;br&gt;自由世界，不仅是意识和理想中的存在，更是脚下的路。自由不可能是一个人独有的，而是每个人都可以共享使用。如果你没有这样的意识，就只能屈服于被人划地为牢的奴役。&lt;br&gt;经常说的两个重要指标，健康和幸福，都是以关系为基础的。健康需要与自然的和谐，幸福需要与人群的和睦。性格影响这两种关系，但习惯和态度都可以改变这两种关系。年轻的时候，有人安排你的生活，一方面帮助你适应环境，另一方面让你体会自己适合做什么，而且还能有意识地尝试改变自己的不良习惯。更重要的是，意识到建立与别人的和谐关系，开始提高处理人际关系的能力。该特别指出的是，与自己亲近和紧密的人之间的关系，对于你的生活是最重要的。&lt;br&gt;同一个人在不同的年龄阶段，取得胜利的情况不同。其决定作用的是智力，是知识，还是体力？是决心。年轻时不考虑那么多，下决心坚持到最后。后来，找各种借口，首先认为精力不够，让自己偷懒，不能坚持不懈。&lt;br&gt;努力可以不是为了活得更好，只是还有梦想没有实现。努力可以不是为了别人，只是放弃的勇气不够。努力可以没有目的，只是觉得心里还有想法。努力可以不是原则，只是一种方法。&lt;br&gt;现实目标要具体可行，而且能实现生活方式的转变。理想目标要高远，不是现实目标能包括住的。努力实现现实目标，理想是站在现实目标上能看到的远方。满足感只是一种暂时的心理状态，也是现实中能想象得到理想形式。为了理想而努力所实现的不是属于你的资源优势，而是能使用的现实环境中让自己幸福的条件和使自己快乐的内容。&lt;br&gt;在黑暗中发芽生根，在阳光下开花结果。努力不能错过季节，不能搞反了方向，还需要与同伴并肩作战。&lt;br&gt;计划书就像梯子，总结就是梯子的台阶。善于计划和总结，能够提高效率。&lt;br&gt;博览群书的好处让你长见识，记忆力和想象力会触发你的创造欲望。对环境所提供的机会敏感而又有行动力，可以改变自己的生存空间。对于时代脉搏的把握，可以走在前沿，而不被淘汰。&lt;br&gt;目标是可以到达的空间位置、能量级别和数字指标，梦想就像远方的地平线，当你到达了目标，地平线并不在脚下。&lt;br&gt;纯粹不是完美，你虽然不能达到纯粹，但你已经处于一个完美的状态，这是自然的事。你选择和努力实现的，不纯粹也不完美，只要你热爱，不管是人还是物，都会呈现完美的状态。爱，来自自己的是自然的，而你爱的对象可能是瞬间即逝的变化。&lt;/p&gt;
&lt;p&gt;规模靠数量，人数、资源量、合作数量。领先靠突破，技术、经营模式、创新刺激。&lt;br&gt;努力的目的，谋求稳定的位置，或者确定的回报。生命早期无法理解的事，后来懂了，就是成长。这样一个过程的长短决定了你的位置。全力以赴，有时是稳定中的厚积薄发，有时是危机中的孤注一掷。感性的勇敢和理性的果断，基于不同的结局，期盼的回报和失控的代价。&lt;br&gt;顺利让我们失去体验成长的细节，顺势是我们努力得到认可的结局。成长需要对细节的体验和感悟，空中楼阁只是幻象。解决问题就是让局势顺应我们的计划，或者实现既定目标。&lt;br&gt;当员工是加入一个系统，当老板是经营一个系统。不管是创业还是打工，都需要在一个系统发挥作用。加入一个好的系统，是自己没有系统之前的选择。当自己有能力经营一个系统时，打工就不必要了。    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 希望多多少少有点用!!! &lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;告诉你一个秘密：努力的方法&quot;&gt;&lt;a href=&quot;#告诉你一个秘密：努力的方法&quot; class=&quot;headerlink&quot; title=&quot;告诉你一个秘密：努力的方法&quot;&gt;&lt;/a&gt;告诉你一个秘密：努力的方法&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;今天看到一篇不错的文章 分享一下&lt;/
    
    </summary>
    
      <category term="散文" scheme="http://yunvoo.com/categories/%E6%95%A3%E6%96%87/"/>
    
    
      <category term="秘密" scheme="http://yunvoo.com/tags/%E7%A7%98%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>linux系统编程基础文件描述符</title>
    <link href="http://yunvoo.com//blog/2014/11/02/linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6.html"/>
    <id>http://yunvoo.com//blog/2014/11/02/linux系统编程基础文件描述符.html</id>
    <published>2014-11-01T16:00:00.000Z</published>
    <updated>2016-06-19T10:08:03.983Z</updated>
    
    <content type="html">&lt;h2 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h2&gt;&lt;p&gt;文件描述符在形式上是一个非负整数。实际上它是一个索引值，指向&lt;em&gt;内核&lt;/em&gt;为每一个&lt;em&gt;进程&lt;/em&gt;所维护的该进程打开文件的记录表。当程序打开一个现有文件或者创建一个新文件时，内核向进程返回一个文件描述符。在程序设计中，一些涉及底层的编写往往会围绕着文件描述符来展开进行。一般情况下文件描述符的概念只适用于&lt;code&gt;Unxi Linux&lt;/code&gt;这样的操作系统。&lt;/p&gt;
&lt;p&gt;在linux系统中一切可以看成是文件，文件又可以分为：普通文件、目录文件、链接文件、设备文件。文件描述符（filedescriptor）是IO操作的系统调用都通过文件描述符进行的。&lt;strong&gt;在程序刚刚启动的时候,0是标准输入，1是标准输出、2是标准错误。如果此时又打开了一个新的文件，它的文件描述符是3.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;标准文件描述符图如下:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;文件描述符&lt;/th&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;th&gt;POSIX名称&lt;/th&gt;
&lt;th&gt;stdio流&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;标准输入&lt;/td&gt;
&lt;td&gt;STDIN_FILENO&lt;/td&gt;
&lt;td&gt;stdin&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;标准输出&lt;/td&gt;
&lt;td&gt;STDOUT_FILENO&lt;/td&gt;
&lt;td&gt;stdout&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;标准错误&lt;/td&gt;
&lt;td&gt;STDERR_FILENO&lt;/td&gt;
&lt;td&gt;stderr&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;文件描述符的限制&quot;&gt;&lt;a href=&quot;#文件描述符的限制&quot; class=&quot;headerlink&quot; title=&quot;文件描述符的限制&quot;&gt;&lt;/a&gt;文件描述符的限制&lt;/h2&gt;&lt;p&gt;在编写文件操作的或者网络通讯软件时，初学者可能会遇到”Too many open files”的问题。这主要是因为文件是有限制，不能打开太多的文件描述符，一般最大打开文件数会是系统内存的%10（以KB来计算）（称之为系统级限制）**可以通过&lt;code&gt;sysctl -a | grep fs.file-max&lt;/code&gt;命令查看，与此同时，内核为了不让某一个进程消耗掉所有的文件资源，其也会对单个进程最大打开文件数做默认值处理（称之为用户级限制），默认值一般是1024，使用&lt;code&gt;ulimit -n&lt;/code&gt;命令可以查看。&lt;br&gt;每个进程都可以通过一个特殊的设备文件/dev/tty(字符设备c) 访问它的控制终端。事实上每个终端设备都对应一个不同的设备文件,/dev/tty 提供了一个通用的接口,一个进程要访问它的控制终端既可以通过/dev/tty 也可以通过该终端设备所对应的设备文件来访问。&lt;code&gt;ttyname&lt;/code&gt;函数可以由文件描述符查出对应的文件名,该文件描述符必须指向一个终端设备而不 能是任意文件。不同的终端所对应的设备文件名可以是&lt;code&gt;/dev/pts/?, /dev/tty?&lt;/code&gt;等&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[geek@yunvoo ~]$ ls -l /dev/tty&lt;br&gt;crw-rw-rw-. 1 root tty 5, 0 6月  19 17:07 /dev/tty&lt;br&gt;由open返回的文件描述符一定是该进程尚未使用的最小描述符。由于程序启动时自动打开文件描述符0、1、2,因此第一次调用open打开文件通常会返回描述符3,再调用open 就会返回4。可以利用 这一点在标准输入、标准输出或标准错误输出上打开一个新文件,实现重定向的功能。例如,首先 调用close 关闭文件描述符1,然后调用open 打开一个常规文件,则一定会返回文件描述符1,这时候标准输出就不再是终端,而是一个常规文件了,再调用printf就不会打印到屏幕上,而是写到这 个文件中了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;文件描述符和打开文件之间的关系&quot;&gt;&lt;a href=&quot;#文件描述符和打开文件之间的关系&quot; class=&quot;headerlink&quot; title=&quot;文件描述符和打开文件之间的关系&quot;&gt;&lt;/a&gt;文件描述符和打开文件之间的关系&lt;/h2&gt;&lt;p&gt;每一个文件描述符会与一个打开文件相对应，同时，不同的文件描述符也会指向同一个文件。相同的文件可以被不同的进程打开也可以在同一个进程中被多次打开。系统为每一个进程维护了一个文件描述符表，该表的值都是从0开始的，所以在不同的进程中你会看到相同的文件描述符，这种情况下相同文件描述符有可能指向同一个文件，也有可能指向不同的文件。具体情况要具体分析，要理解具体其概况如何，需要查看由内核维护的3个数据结构。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;进程级的文件描述符表&lt;/li&gt;
&lt;li&gt;系统级的打开文件描述符表&lt;/li&gt;
&lt;li&gt;文件系统的i-node表&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下图展示了文件描述符、打开的文件句柄以及&lt;code&gt;inode&lt;/code&gt;之间的关系，图中，两个进程拥有诸多打开的文件描述符。&lt;/p&gt;
&lt;p&gt;文件描述符、打开文件句柄和i-node之间的关系:&lt;br&gt;&lt;img src=&quot;http://7xrzzi.com1.z0.glb.clouddn.com/node.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在进程A中，文件描述符1和30都指向了同一个打开的文件句柄（标号23）。这可能是通过调用dup()、dup2()、fcntl()或者对同一个文件多次调用了open()函数而形成的。&lt;br&gt;    进程A的文件描述符2和进程B的文件描述符2都指向了同一个打开的文件句柄（标号73）。这种情形可能是在调用fork()后出现的（即，进程A、B是父子进程关系），或者当某进程通过UNIX域套接字将一个打开的文件描述符传递给另一个进程时，也会发生。再者是不同的进程独自去调用open函数打开了同一个文件，此时进程内部的描述符正好分配到与其他进程打开该文件的描述符一样。&lt;/p&gt;
&lt;h2 id=&quot;优点（以下来自维基百科中&quot;&gt;&lt;a href=&quot;#优点（以下来自维基百科中&quot; class=&quot;headerlink&quot; title=&quot;优点（以下来自维基百科中)&quot;&gt;&lt;/a&gt;优点（以下来自维基百科中)&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;文件描述符的有点有两个：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;基于文件描述符I/O操作兼容&lt;code&gt;POSIX&lt;/code&gt;标准&lt;/li&gt;
&lt;li&gt;在`Unix Linux的系统调用中，大量的系统调用都是依赖于文件描述&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如，下面的代码就示范了如何基于文件描述符来读取当前目录下的一个指定文件，并把文件内容打印至Console中。&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;sys/stat.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; fd;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; numbytes;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; path[] = &lt;span class=&quot;string&quot;&gt;&quot;file&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; buf[&lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * O_CREAT:如果文件不存在则创建&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * O_RDONLY:以只读模式打开文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fd = open(path, O_CREAT | O_RDONLY, &lt;span class=&quot;number&quot;&gt;0644&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(fd &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        perror(&lt;span class=&quot;string&quot;&gt;&quot;open()&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(EXIT_FAILURE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;memset&lt;/span&gt;(buf, &lt;span class=&quot;number&quot;&gt;0x00&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;((numbytes = read(fd, buf, &lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;)) &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d bytes read: %s&quot;&lt;/span&gt;, numbytes, buf);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;memset&lt;/span&gt;(buf, &lt;span class=&quot;number&quot;&gt;0x00&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    close (fd);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(EXIT_SUCCESS);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;与文件描述符相关的操作&quot;&gt;&lt;a href=&quot;#与文件描述符相关的操作&quot; class=&quot;headerlink&quot; title=&quot;与文件描述符相关的操作&quot;&gt;&lt;/a&gt;与文件描述符相关的操作&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1.文件描述符的生成&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;open(),open64(),creat(),creat64()&lt;/li&gt;
&lt;li&gt;socket()&lt;/li&gt;
&lt;li&gt;socketpair()&lt;/li&gt;
&lt;li&gt;pipe()&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;2.与单一文件描述符相关的操作&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;read(),write()&lt;/li&gt;
&lt;li&gt;recv(),send()&lt;/li&gt;
&lt;li&gt;recvmsg(),sendmsg()&lt;/li&gt;
&lt;li&gt;sendfile()&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;3.与复数文件描述符相关的操作&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;selcet(),pselect()&lt;/li&gt;
&lt;li&gt;poll(),epoll()&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;4.与文件描述符表相关的操作&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;close()&lt;/li&gt;
&lt;li&gt;dup() dup2()&lt;/li&gt;
&lt;li&gt;fcntl(F_DUPFD),fcntl(F_GETFD and F_SETFD)&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;5.改变进程状态的操作&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;fchdir()&lt;/li&gt;
&lt;li&gt;mmap()&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;6.与文件加锁的操作&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;flock()&lt;/li&gt;
&lt;li&gt;fcntl(F_GETLK,F_SETLK and F_SETLKW)&lt;/li&gt;
&lt;li&gt;lockf()&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;7.与套接子相关的操作&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;connect()&lt;/li&gt;
&lt;li&gt;bind()&lt;/li&gt;
&lt;li&gt;listen()&lt;/li&gt;
&lt;li&gt;accept()&lt;/li&gt;
&lt;li&gt;getsockname() getpeername() &lt;/li&gt;
&lt;li&gt;getsockopt() setsockopt()&lt;/li&gt;
&lt;li&gt;shutdown()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt; 以上是我对linux 文件描述符的大概理解 查了很多的资料 很多地方理解的不够透，希望以后继续努力！！&lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h2&gt;&lt;p&gt;文件描述符在形式上是一个非负整数。实际上它是一个索引值，指向&lt;em&gt;内核&lt;/em&gt;为每一个&lt;em&gt;进程&lt;/em&gt;所维护的该进程打开文件的记录
    
    </summary>
    
      <category term="linux" scheme="http://yunvoo.com/categories/linux/"/>
    
    
      <category term="文件描述符" scheme="http://yunvoo.com/tags/%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>读 IP 协议 RFC-791</title>
    <link href="http://yunvoo.com//blog/2014/10/21/ip.html"/>
    <id>http://yunvoo.com//blog/2014/10/21/ip.html</id>
    <published>2014-10-20T16:00:00.000Z</published>
    <updated>2016-06-19T10:23:09.848Z</updated>
    
    <content type="html">&lt;p&gt;IP协议(RFC-791)是IP/TCP协议栈的网络层协议，运行在分组交换的计算机网络之上。提供定长地址的源主机与目标主机之间的数据块传输。&lt;/p&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;IP&amp;amp;ICMP上层为主机到主机的协议（如TCP），可以调用IP协议进行数据传输（需提供主机地址和其他IP头中需要的字段）；下层为本地网络协议（链路层协议如APANET）进行数据报传输。IP协议实现里两个基本操作：寻址和分块。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因特网模块使用IP头提供的地址把数据报传向目标地址，传送路径的选择称为 &lt;strong&gt;路由&lt;/strong&gt; 。因特网模块会对长报文进行分块和装配用以在小报文网络传输。IP协议独立地对待每个数据报，它们之间没有任何联系。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;IP协议提供的服务使用了四种核心机制：服务类型、存活时间、选项、头部校验和。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;服务类型用来描述期望的服务质量，是一组描述服务选项的参数的抽象，用于在网关路由时选择传输参数、下一跳的网络、下一个网关。&lt;/li&gt;
&lt;li&gt;存活时间描述了IP数据报存活期的上限。该字段由发送者设置，在路由处完成递减。当达到0时该报文被销毁。&lt;/li&gt;
&lt;li&gt;选项用于在一些情形下提供控制功能，普通通信中并不必要。如：时间戳规定、安全、特殊路由等。&lt;/li&gt;
&lt;li&gt;头部校验和用来检验数据报中的信息是否传输正确。如果校验失败，立即丢掉该报文。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;IP协议并不提供可靠的通信。端与端、上一跳与下一跳之间没有确认；也没有数据错误控制和流控制。检测到的错误可能通过ICMP协议进行报告。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;操作模型&quot;&gt;&lt;a href=&quot;#操作模型&quot; class=&quot;headerlink&quot; title=&quot;操作模型&quot;&gt;&lt;/a&gt;操作模型&lt;/h2&gt;&lt;p&gt;考虑只有一个中间网关的情形。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;发送方应用程序准备好数据，调用Internet模块来发送（同时给定地址和其他参数）。&lt;/li&gt;
&lt;li&gt;Internet模块准备一个数据报头并加载数据，确定目标IP的本地网络地址（在这里是中间网关的地址），然后交给本地网络接口。&lt;/li&gt;
&lt;li&gt;本地网络接口创建一个本地网络头，加载数据报，然后发送到本地网络。&lt;/li&gt;
&lt;li&gt;中间网关拿到本地网络包装过的数据报，本地网络接口去掉该头部后交给Internet模块。Internet模块由IP地址决定应该发往另一个网络的主机，然后确定目标主机的本地网络地址，将数据报交给那个网络的本地网络接口。&lt;/li&gt;
&lt;li&gt;本地网络接口创建头部并加载数据报，发送至目标主机。&lt;/li&gt;
&lt;li&gt;到达目标主机后，本地网络接口将头部移除，交给Internet模块。&lt;/li&gt;
&lt;li&gt;Internet模块决定将该数据报交给哪个应用程序。相应的系统调用发生时，传递该数据以及源地址和其他参数。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;功能描述&quot;&gt;&lt;a href=&quot;#功能描述&quot; class=&quot;headerlink&quot; title=&quot;功能描述&quot;&gt;&lt;/a&gt;功能描述&lt;/h2&gt;&lt;h3 id=&quot;寻址&quot;&gt;&lt;a href=&quot;#寻址&quot; class=&quot;headerlink&quot; title=&quot;寻址&quot;&gt;&lt;/a&gt;寻址&lt;/h3&gt;&lt;p&gt;&lt;em&gt;名称&lt;/em&gt; 为要寻找的东西， &lt;em&gt;地址&lt;/em&gt; 是它在哪里， &lt;em&gt;路由&lt;/em&gt; 是怎么到达。上层协议会完成从名称到地址的映射；Internet模块完成从地址映射到本地网络地址；底层的协议完成本地网络地址到路由的映射。&lt;/p&gt;
&lt;p&gt;IP地址是固定32位长度，以网络号开始，本地地址结束。有3类Internet地址：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A类：0+7位网络号+24位本地地址；&lt;/li&gt;
&lt;li&gt;B类：10+14位网络号+16位本地地址；&lt;/li&gt;
&lt;li&gt;C类：110+21位网络号+8位本地地址。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;分块&quot;&gt;&lt;a href=&quot;#分块&quot; class=&quot;headerlink&quot; title=&quot;分块&quot;&gt;&lt;/a&gt;分块&lt;/h3&gt;&lt;p&gt;当本地网络允许大包而传输过程必须经过限制到更小的包大小的网络时，IP数据报的分块就势在必行。IP数据报也可以标志为 &lt;em&gt;不要分块&lt;/em&gt; ，在不满足大小限制时便会被丢掉，同时发送ICMP给源地址（该机制被用于MTU发现方法）。&lt;/p&gt;
&lt;p&gt;每个被分块后的IP数据报会有&lt;code&gt;more-fragments&lt;/code&gt;标志和&lt;code&gt;offset&lt;/code&gt;标志。用于识别分块的包还是完整的包，并用于组装。&lt;/p&gt;
&lt;h3 id=&quot;网关&quot;&gt;&lt;a href=&quot;#网关&quot; class=&quot;headerlink&quot; title=&quot;网关&quot;&gt;&lt;/a&gt;网关&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;网关&lt;/strong&gt; 用来在网络之间转发数据报。同时也实现GGP（Gateway to Gateway protocal）来协调路由和其他Internet控制信息。&lt;/p&gt;
&lt;h2 id=&quot;头部格式&quot;&gt;&lt;a href=&quot;#头部格式&quot; class=&quot;headerlink&quot; title=&quot;头部格式&quot;&gt;&lt;/a&gt;头部格式&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; 0                   1                   2                   3   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|Version|  IHL  |Type of Service|          Total Length         |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|         Identification        |Flags|      Fragment Offset    |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|  Time to Live |    Protocol   |         Header Checksum       |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|                       Source Address                          |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|                    Destination Address                        |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|                    Options                    |    Padding    |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;字段说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Version&lt;/code&gt;：IP协议版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IHL&lt;/code&gt;：Internet头部长度，单位为32位字&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Type of Sservice&lt;/code&gt;：服务类型，指示期望服务质量的抽象参数。在传输过程中该数据报会因此得到不同的对待。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Total Length&lt;/code&gt;：数据报的大小，单位为8位字节。因此IP数据报最大长度为65535。实际网络中MTU往往为1500，IP数据最大为1500-链路层头部大小-IP头部大小&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Identification&lt;/code&gt;：发送者赋值，便于组装分块。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Flags&lt;/code&gt;：第一位：保留为0；第二位：禁止分块；第三位：是否还有后续分块。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Fragment Offset&lt;/code&gt;：本数据报所在的位置（第一个分块该字段为0），单位为64位字。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Time to Live&lt;/code&gt;：生存期。在IP头部处理时都会修改，为0时丢弃，即跳数上限。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Protocol&lt;/code&gt;：下一层的协议，定义在RFC-790。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Header Checksum&lt;/code&gt;：头部校验和，只校验头部。因TTL等字段会变，该校验值每次处理中都会重新计算。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Source/Destination Address&lt;/code&gt;：源/目标地址。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Option&lt;/code&gt;：可选字段，长度可变。其内容包括：安全、LSRR、SSRR、RR、流标识符、Internet时间戳等。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Padding&lt;/code&gt;：确保Internet头部长度在32位的边界。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考：&lt;a href=&quot;http://www.rfcsearch.org/rfcview/RFC/791.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RFC-791&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;IP协议(RFC-791)是IP/TCP协议栈的网络层协议，运行在分组交换的计算机网络之上。提供定长地址的源主机与目标主机之间的数据块传输。&lt;/p&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述
    
    </summary>
    
      <category term="技术" scheme="http://yunvoo.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="IP TCP 网络 路由 服务质量" scheme="http://yunvoo.com/tags/IP-TCP-%E7%BD%91%E7%BB%9C-%E8%B7%AF%E7%94%B1-%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>DHCP 服务器架设</title>
    <link href="http://yunvoo.com//blog/2014/10/02/dhcp.html"/>
    <id>http://yunvoo.com//blog/2014/10/02/dhcp.html</id>
    <published>2014-10-01T16:00:00.000Z</published>
    <updated>2016-06-19T10:18:34.110Z</updated>
    
    <content type="html">&lt;h2 id=&quot;DHCP协议&quot;&gt;&lt;a href=&quot;#DHCP协议&quot; class=&quot;headerlink&quot; title=&quot;DHCP协议&quot;&gt;&lt;/a&gt;DHCP协议&lt;/h2&gt;&lt;p&gt;DHCP协议的操作过程分为四个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;discovery&lt;/code&gt; 客户端发送广播（全1地址的IP包），获取配置。&lt;br&gt; 该行为发生在客户机启动、或者网卡重启时。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;offer&lt;/code&gt; DHCP服务器响应该广播，通过单播发送配置。&lt;br&gt; 若DHCP服务器发现该MAC曾用过某IP，且该IP空闲则继续分给他；若存在该MAC的静态IP设置，则分配该静态IP；上述都不满足时，分配新的IP并进行记录。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;request&lt;/code&gt; 客户端发送广播，通知选择的配置。&lt;br&gt; 因为局域网中的DHCP服务器可能有多个，客户端做好选择后广播发出通知。未被采取的DHCP服务器将收回其IP。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;acknowledge&lt;/code&gt; 服务器发送确认。&lt;br&gt; 此时服务器开始租期计时。用户断线（&lt;code&gt;ifdown&lt;/code&gt;,&lt;code&gt;reboot&lt;/code&gt;,&lt;code&gt;shutdown&lt;/code&gt;）或租约到期（未续租）则收回该配置。正常客户端会在0.5T时重新请求IP，如果不成功则在0.875T时再请求一次。这一过程中客户端与服务器的端口分别为：68、67。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;服务器配置&quot;&gt;&lt;a href=&quot;#服务器配置&quot; class=&quot;headerlink&quot; title=&quot;服务器配置&quot;&gt;&lt;/a&gt;服务器配置&lt;/h2&gt;&lt;p&gt;CentOS中，DHCP服务器配置文件为：&lt;code&gt;/etc/dhcp/dhcpd.conf&lt;/code&gt;；守护进程为：&lt;code&gt;/usr/sbin/dhcpd&lt;/code&gt;；地址租期记录在：&lt;code&gt;/var/lib/dhcp/dhcpd.leases&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;拿来鸟哥的示例配置：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# file: /etc/dhcp/dhcpd.conf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 1. 整體的環境設定&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ddns-update-style            none;            &amp;lt;==不要更新 DDNS 的設定&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ignore client-updates;                        &amp;lt;==忽略用戶端的 DNS 更新功能&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;default-lease-time           259200;          &amp;lt;==預設租約為 3 天&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;max-lease-time               518400;          &amp;lt;==最大租約為 6 天&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;option routers               192.168.100.254; &amp;lt;==這就是預設路由&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;option domain-name           &amp;quot;centos.vbird&amp;quot;;  &amp;lt;==給予一個領域名稱&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;option domain-name-servers   168.95.1.1, 139.175.10.20;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 上面是 DNS 的 IP 設定，這個設定值會修改用戶端的 /etc/resolv.conf 檔案內容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 2. 關於動態分配的 IP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subnet 192.168.100.0 netmask 255.255.255.0 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    range 192.168.100.101 192.168.100.200;  &amp;lt;==分配的 IP 範圍&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # 3. 關於固定的 IP 啊！&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    host win7 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        hardware ethernet    08:00:27:11:EB:C2; &amp;lt;==用戶端網卡 MAC&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fixed-address        192.168.100.30;    &amp;lt;==給予固定的 IP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 相關的設定參數意義，請查詢前一小節的介紹，或者 man dhcpd.conf&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;对于多网卡服务器，可以设置&lt;code&gt;dhcpd&lt;/code&gt;监听其某个接口。在&lt;code&gt;/etc/sysconfig/dhcpd&lt;/code&gt;中添加&lt;code&gt;DHCPDARGS=&amp;quot;eth0&amp;quot;&lt;/code&gt;即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然后启动并观察&lt;code&gt;dhcpd&lt;/code&gt;服务：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/etc/init.d/dhcpd start&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;netstat -tlunp | grep dhcp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tail -n 30 /var/&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;/messages&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;客户端配置&quot;&gt;&lt;a href=&quot;#客户端配置&quot; class=&quot;headerlink&quot; title=&quot;客户端配置&quot;&gt;&lt;/a&gt;客户端配置&lt;/h2&gt;&lt;p&gt;在客户端，设置&lt;code&gt;/etc/sysconfig/network-scripts/ifcfg-eth0&lt;/code&gt;为采用DHCP后，重启网络&lt;code&gt;/etc/init.d/network restart&lt;/code&gt;。观察域名解析文件的变化：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# file: /etc/resolv.conf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;search centos.vbird      &amp;lt;==還記得設定過 domain-name 否？&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;domain centos.vbird      &amp;lt;==還記得設定過 domain-name 否？&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nameserver 168.95.1.1    &amp;lt;==這就是我們在 dhcpd.conf內的設定值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nameserver 139.175.10.20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;查看路由表：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ route -n&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Kernel IP routing table&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Destination    Gateway         Genmask        Flags Metric Ref  Use Iface&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;192.168.100.0  0.0.0.0         255.255.255.0  U     0      0      0 eth0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0.0.0.0        192.168.100.254 0.0.0.0        UG    0      0      0 eth0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 嗯！沒錯！路由也被正確的捉到了！OK的啦！&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;全零IP只能用于源地址，当源主机不知道自己IP时使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;查看68端口的地址续租程序：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;netstat -tlunp | grep dhc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参考：&lt;a href=&quot;http://linux.vbird.org/linux_server/0340dhcp.php&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;鸟哥的私房菜&lt;/a&gt;、&lt;a href=&quot;https://www.ietf.org/rfc/rfc2131.txt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RFC 2131&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;DHCP协议&quot;&gt;&lt;a href=&quot;#DHCP协议&quot; class=&quot;headerlink&quot; title=&quot;DHCP协议&quot;&gt;&lt;/a&gt;DHCP协议&lt;/h2&gt;&lt;p&gt;DHCP协议的操作过程分为四个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;discovery&lt;/code&gt;
    
    </summary>
    
      <category term="技术" scheme="http://yunvoo.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="DHCP,Bash" scheme="http://yunvoo.com/tags/DHCP-Bash/"/>
    
  </entry>
  
  <entry>
    <title>读 HTTP 协议 RFC-2616</title>
    <link href="http://yunvoo.com//blog/2014/10/01/http.html"/>
    <id>http://yunvoo.com//blog/2014/10/01/http.html</id>
    <published>2014-09-30T16:00:00.000Z</published>
    <updated>2016-06-18T23:51:20.232Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;超文本传输协议（英文：HyperText Transfer Protocol，缩写：HTTP）&lt;/strong&gt; 是互联网上应用最为广泛的一种网络协议。设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法。通过HTTP或者HTTPS协议请求的资源由 &lt;strong&gt;统一资源标识符（Uniform Resource Identifiers，URI）&lt;/strong&gt; 来标识。&lt;/p&gt;
&lt;p&gt;HTTP协议标准是由万维网协会（World Wide Web Consortium，W3C）和互联网工程任务组（Internet Engineering Task Force，IETF）制定的，其中最著名的是RFC-2616，定义了HTTP协议中现今广泛使用的一个版本—HTTP 1.1。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;第一个版本的HTTP（HTTP/0.9）用于Internet上的传输原始数据；HTTP/1.0加入了MIME支持、元数据、请求/应答限定符。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对web开发者而言HTTP协议的用法已耳熟能详，本文只记录与web开发相关的HTTP重要细节。&lt;/p&gt;
&lt;p&gt;HTTP是一种通用的、无状态的应用层协议，适用于分布式、协同的、超媒体信息系统。通过一些扩展（如请求方法、错误码、头信息），HTTP可用于超文本外的其他用途，例如命名服务器、分布式对象管理。HTTP的特点在于数据表示的类型与协商，允许建立系统时不必考虑数据是如何传输的。&lt;/p&gt;
&lt;font size=&quot;5&quot; color=&quot;#FF2D2D&quot;&gt;操作&lt;/font&gt; 

&lt;p&gt;多数HTTP通信由用户代理发起请求，服务器响应该请求。更复杂的情况则可能包括代理、网关和隧道。 &lt;strong&gt;代理&lt;/strong&gt; 是指转发代理，它接受URI请求，重写部分消息，然后把重写过的消息转发至URI标识的服务器。 &lt;strong&gt;网关&lt;/strong&gt; 是指接收代理，它运行在其他服务器之上，需要时可以为背后的服务器翻译请求。 &lt;strong&gt;隧道&lt;/strong&gt; 相当于两个连接的中转站，但不会改变消息。当通信需要通过一个中介时可以使用隧道，即使该中介不理解消息内容。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;   request chain --------------------------------------&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UA -----v----- A -----v----- B -----v----- C -----v----- O&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;lt;------------------------------------- response chain&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;除隧道外的通信方都可能会采用内部缓存和处理消息，缓存可以缩短请求/应答链。但并不是所有消息都可以被缓存，缓存行为也在RFC-2616中加以定义。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;   request chain ----------&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UA -----v----- A -----v----- B - - - - - - C - - - - - - O&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;lt;--------- response chain&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;HTTP通常发生在TCP/IP连接上，默认的TCP端口为80，当然也可以使用别的端口。这不会影响到HTTP实现，HTTP只假设有一个可靠的传输协议。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;HTTP/1.1连接应该是持久连接。这不仅能够减小TCP连接的内存、CPU开销，减小了TCP包的数量，同时提供了更短的延迟和及时的错误反馈。此时，请求与应答可以形成管道而不必等上一个连接的关闭。&lt;/p&gt;
&lt;font size=&quot;5&quot; color=&quot;#FF2D2D&quot;&gt;URI&lt;/font&gt; 

&lt;p&gt;在HTTP中，URI 是用来标识资源的字符串。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;http_URL = &amp;quot;http:&amp;quot; &amp;quot;//&amp;quot; host [ &amp;quot;:&amp;quot; port ] [ abs_path [ &amp;quot;?&amp;quot; query ]]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;HTTP URI 是大小写敏感的，相同的URI应该每个字节都完全相同。除非：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;端口空。此时相当于默认端口。&lt;/li&gt;
&lt;li&gt;主机名必须大小写无关。&lt;/li&gt;
&lt;li&gt;模式名必须大小写无关。&lt;/li&gt;
&lt;li&gt;绝对路径为空。此时相当于&lt;code&gt;/&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;font size=&quot;5&quot; color=&quot;#FF2D2D&quot;&gt;HTTP方法&lt;/font&gt; 

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GET&lt;/code&gt;：获取URI制定的信息。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HEAD&lt;/code&gt;：同&lt;code&gt;GET&lt;/code&gt;，但服务器不返回消息体。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;POST&lt;/code&gt;：请求服务器接受请求中包装的实体，将其作为URI标识的资源的附属信息。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PUT&lt;/code&gt;：让服务器将请求中包装的实体存储为URI标识位置。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DELETE&lt;/code&gt;：让服务器将URI标识的资源删除。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TRACE&lt;/code&gt;：调用远程的应用层环回。最终服务器应将收到的消息包装为实体并返回状态码为200的应答。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CONNECT&lt;/code&gt;：保留，用作代理。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;其中&lt;code&gt;HEAD&lt;/code&gt;和&lt;code&gt;GET&lt;/code&gt;被称为安全方法，即服务器只是返回所需的信息，不应该产生其他的副作用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;font size=&quot;5&quot; color=&quot;#FF2D2D&quot;&gt;HTTP 头字段简介&lt;/font&gt; 

&lt;p&gt;HTTP 头字段包括通用头字段（general-header），请求头字段（request-header），响应头字段（response-header）和实体头字段（entity-header）。&lt;/p&gt;
&lt;p&gt;每个头字段包括字段名与字段只，以冒号&lt;code&gt;:&lt;/code&gt;分隔。其中字段名大小写不敏感。&lt;/p&gt;
&lt;font size=&quot;5&quot; color=&quot;#FF2D2D&quot;&gt;通用头字段&lt;/font&gt; 

&lt;p&gt;通用头字段对于HTTP请求和响应均可用，用来描述HTTP消息（HTTP message）本身，&lt;br&gt;不可用来描述被传输的实体（HTTP entity）。共9个：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;general-header = Cache-Control           ; Section 14.9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              | Connection               ; Section 14.10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              | Date                     ; Section 14.18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              | Pragma                   ; Section 14.32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              | Trailer                  ; Section 14.40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              | Transfer-Encoding        ; Section 14.41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              | Upgrade                  ; Section 14.42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              | Via                      ; Section 14.45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              | Warning                  ; Section 14.46&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Cache-Control&lt;/code&gt;：指定整个请求链中必须遵循的缓存指令，是单向的。其值包括&lt;code&gt;max-age&lt;/code&gt;，&lt;code&gt;no-cache&lt;/code&gt;等。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Connection&lt;/code&gt;：发送者用来指定连接选项，属于hop by hop头字段，不可被代理传递。例如Websocket建立连接时的Handshake HTTP Request，包含&lt;code&gt;Connection: upgrade&lt;/code&gt;与&lt;code&gt;Upgrade: Websocket&lt;/code&gt;头字段。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Date&lt;/code&gt;：请求或响应的时间和日期。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Pragma&lt;/code&gt;：用来指定实现相关（implementation-specific）的指令，例如：&lt;code&gt;Pragma: no-cache&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Transfer-Encoding&lt;/code&gt;：为了使消息安全到达，HTTP消息经过了何种转换，例如&lt;code&gt;Transfer-Encoding: chunked&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Via&lt;/code&gt;：HTTP消息传送期间经过了何种协议或代理，网关和代理必须实现该字段。如&lt;code&gt;Via: 1.0 fred, 1.1 nowhere.com (Apache/1.1)&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;font size=&quot;5&quot; color=&quot;#FF2D2D&quot;&gt;请求头字段&lt;/font&gt; 

&lt;p&gt;request头部字段如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;request-header = Accept                   ; Section 14.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              | Accept-Charset           ; Section 14.2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              | Accept-Encoding          ; Section 14.3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              | Accept-Language          ; Section 14.4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              | Authorization            ; Section 14.8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              | Expect                   ; Section 14.20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              | From                     ; Section 14.22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              | Host                     ; Section 14.23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              | If-Match                 ; Section 14.24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              | If-Modified-Since        ; Section 14.25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              | If-None-Match            ; Section 14.26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              | If-Range                 ; Section 14.27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              | If-Unmodified-Since      ; Section 14.28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              | Max-Forwards             ; Section 14.31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              | Proxy-Authorization      ; Section 14.34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              | Range                    ; Section 14.35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              | Referer                  ; Section 14.36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              | TE                       ; Section 14.39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              | User-Agent               ; Section 14.43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Accept&lt;/code&gt;：可接受的应答的媒体类型，可使用通配符&lt;code&gt;*&lt;/code&gt;。&lt;/p&gt;
  &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Accept: autio/*; q=0.2, autio/basic&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 最好是basic音频，如果没有的话任何音频都可以接受（这时我认为质量打了80%的折扣）请求头字段&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Accept-Charset&lt;/code&gt;：可接受的应答的字符集。&lt;/p&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Accept-Charset: iso-8859-5, unicode-1-1;q=0.8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 最好是iso-8859-5，不过unicode-1-1也还好（80%的质量）请求头字段&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Accept-Encoding&lt;/code&gt;：可接受的应答的内容编码。&lt;/p&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Accept-Encoding: gzip;q=1.0, identity; q=0.5, *;q=0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Accept-Language&lt;/code&gt;：可接受的应答的自然语言集合。&lt;/p&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Accept-Language: da, en-gb;q=0.8, en;q=0.7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Authorization&lt;/code&gt;：用户想要让服务器给自己授权，通常在接受到&lt;code&gt;401&lt;/code&gt;之后发生。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Expect&lt;/code&gt;：客户需要的服务器行为。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;该字段是逐跳发生的，即代理如不能满足该期望应返回&lt;code&gt;417&lt;/code&gt;；但请求头是端到端的，该请求仍然必须被转发。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;From&lt;/code&gt;：该字段应为控制发送请求的HTTP代理（agent）的用户电子邮箱名。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Host&lt;/code&gt;：目标主机名与端口，来自URI。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;If-Match&lt;/code&gt;：与HTTP方法一起用，使得条件性执行该方法。条件为该实体匹配该列表，即没有发生用户所不知道的变化。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;在HTTP中，质量值&lt;code&gt;qvalue&lt;/code&gt;作为协商参数的限定符，表示客户端认为该参数的重要性（权重）。如果一个参数&lt;code&gt;qvalue&lt;/code&gt;为0，表示该参数对客户端来讲是不可接受的。参数之间用&lt;code&gt;,&lt;/code&gt;分隔，参数值与质量值之间用&lt;code&gt;;&lt;/code&gt;分隔。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;font size=&quot;5&quot; color=&quot;#FF2D2D&quot;&gt;响应头字段&lt;/font&gt; 

&lt;p&gt;response头部字段如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;response-header = Accept-Ranges           ; Section 14.5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                | Age                     ; Section 14.6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                | ETag                    ; Section 14.19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                | Location                ; Section 14.30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                | Proxy-Authenticate      ; Section 14.33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                | Retry-After             ; Section 14.37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                | Server                  ; Section 14.38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                | Vary                    ; Section 14.44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                | WWW-Authenticate        ; Section 14.47&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Accept-Ranges&lt;/code&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在HTTP/1.1中，客户端可以请求部分的应答（&lt;code&gt;range&lt;/code&gt;），服务器将根据指定的单位和Request的&lt;code&gt;Range&lt;/code&gt;将实体划分为&lt;code&gt;subrange&lt;/code&gt;返回给客户端。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  该字段允许服务器指定接受怎样的&lt;code&gt;range&lt;/code&gt;请求。例如&lt;code&gt;Accept-Ranges: bytes&lt;/code&gt;表示接受以byte为单位的&lt;code&gt;Range&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Age&lt;/code&gt;：生成该response以来，服务器估计已经过去了多少时间。该字段用于缓存机制。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ETag&lt;/code&gt;：指定请求变量的当前实体Tag。该字段用来比较来自同一资源的变化的实体。与&lt;code&gt;If-Match/If-None-Match&lt;/code&gt;成对使用来实现缓存。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Location&lt;/code&gt;：为完成请求或标识新的资源，服务器用该字段将接收者重定向。此处应指定绝对路径。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Proxy-Authenticate&lt;/code&gt;：&lt;code&gt;407&lt;/code&gt;（Proxy Authentication Required）响应必须填写该字段。该字段应指出授权模式和该URI代理的参数。收到该响应后代理应寻找自己的授权证书。该字段只用于当前连接（点到点），不应传到下游的客户端。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Retry-After&lt;/code&gt;：用于&lt;code&gt;503&lt;/code&gt;（Service Unavailable）响应。指示客户端服务预期多久不可用。可以是绝对时间，也可以是代表时间间隔的整数（单位为秒）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Server&lt;/code&gt;：原始服务器处理该请求的软件信息。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Vary&lt;/code&gt;：指示不可缓存的请求头列表（大小写不敏感）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WWW-Authenticate&lt;/code&gt;：&lt;code&gt;401&lt;/code&gt;（Unauthorized）响应必须填写该字段。同&lt;code&gt;Proxy-Authenticate&lt;/code&gt;，只不过该字段作用于用户代理（User Agent）。&lt;/li&gt;
&lt;/ul&gt;
&lt;font size=&quot;5&quot; color=&quot;#FF2D2D&quot;&gt;实体头字段&lt;/font&gt; 

&lt;p&gt;实体头字段（entity ）用来表示HTTP实体（entity body）的元信息。&lt;br&gt;如果实体（HTTP body）不存在，则表示HTTP请求所标识的资源的元信息。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;entity-header  = Allow                    ; Section 14.7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              | Content-Encoding         ; Section 14.11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              | Content-Language         ; Section 14.12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              | Content-Length           ; Section 14.13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              | Content-Location         ; Section 14.14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              | Content-MD5              ; Section 14.15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              | Content-Range            ; Section 14.16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              | Content-Type             ; Section 14.17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              | Expires                  ; Section 14.21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              | Last-Modified            ; Section 14.29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Allow&lt;/code&gt;：实体允许哪些方法，例如：&lt;code&gt;Allow: GET, HEAD, PUT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Content-Encoding&lt;/code&gt;：内容编码，这是对&lt;code&gt;Content-Type&lt;/code&gt;的进一步修饰，例如&lt;code&gt;Content-Encoding: gzip&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Content-Location&lt;/code&gt;的值是绝对或相对URI，表示请求体的资源处于何处。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Content-Type&lt;/code&gt;：资源的媒体类型，例如&lt;code&gt;Content-Type: text/html; charset=ISO-8859-4&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Expires&lt;/code&gt;：过期时间，例如&lt;code&gt;Expires: Thu, 01 Dec 1994 16:00:00 GMT&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Last-Modified&lt;/code&gt;：服务器认为该资源上次修改的时间，格式同上。与&lt;code&gt;Not-Modified-Since&lt;/code&gt;成对使用可实现缓存。&lt;/li&gt;
&lt;/ul&gt;
&lt;font size=&quot;5&quot; color=&quot;#FF2D2D&quot;&gt;缓存&lt;/font&gt; 

&lt;p&gt;HTTP常用语信息系统，此时应答缓存可以提高性能。缓存应该保证是正确的，如果一个应答的缓存既非一手的，又不够新，则必须在应答中添加警告。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;HTTP/1.1的基本缓存机制只有隐式的缓存指示，在有些系统中需要给出明确的缓存指示。此时要用到缓存控制（Cache-Control）头。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最好的缓存应完全避免从原始服务器发送请求，主要的机制是服务器明确给定应答的过期时间。相反地，服务其可以将过期时间设为过去的时间，&lt;br&gt;以此强制得到最新的请求。过期时间的计算有两种方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;now - Age Header&lt;/code&gt;，其中&lt;code&gt;Age Header&lt;/code&gt;是生成应答时服务器会设置的字段。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;age_value&lt;/code&gt;，等于该应答在所有缓存中驻留的时间和，加上所有路径上传输所用的时间。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;当然，缓存服务器之间需要通过类似&lt;code&gt;NTP&lt;/code&gt;的协议来同步他们的时钟。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在Web应用中，缓存通常通过&lt;a href=&quot;https://zh.wikipedia.org/wiki/HTTP_ETag&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Etag&lt;/a&gt;和&lt;code&gt;Expires&lt;/code&gt;响应头来实现。&lt;code&gt;Etag&lt;/code&gt;表示资源的ID，&lt;code&gt;Expires&lt;/code&gt;表示资源的过期时间。&lt;br&gt;User-Agent（比如浏览器）可以通过这两个字段来恰当地缓存这些HTTP响应。&lt;/p&gt;
&lt;font size=&quot;5&quot; color=&quot;#FF2D2D&quot;&gt;状态码&lt;/font&gt; 

&lt;p&gt;HTTP状态码（HTTP Status Code）是用以表示Web服务器HTTP响应状态的3位数字代码，分为5大类。&lt;br&gt;以下给出状态码说明，其描述参见wikipedia：&lt;a href=&quot;http://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTTP状态码&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1xx：表示请求已被接受，但需要后续处理。&lt;/li&gt;
&lt;li&gt;2xx：请求已成功被服务器接收、理解、并接受。&lt;/li&gt;
&lt;li&gt;3xx：这类状态码代表需要客户端采取进一步的操作才能完成请求。通常，这些状态码用来重定向，&lt;br&gt;重定向目标在本次响应的&lt;code&gt;Location&lt;/code&gt;头字段中指明。&lt;/li&gt;
&lt;li&gt;4xx：这类的状态码代表了客户端看起来可能发生了错误，妨碍了服务器的处理。&lt;br&gt;除非响应的是一个HEAD请求，否则服务器就应该返回一个解释当前错误状况的实体。&lt;/li&gt;
&lt;li&gt;5xx：这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生，也有可能是服务器意识到以当前的软硬件资源无法完成对请求的处理。&lt;br&gt;并且响应消息体中应当给出理由，除非是HEAD请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;常见的响应状态码在&lt;a href=&quot;!--￼11--&quot;&gt;如何理解HTTP响应的状态码？&lt;/a&gt;一文有详细介绍。&lt;/p&gt;
&lt;font size=&quot;5&quot; color=&quot;#FF2D2D&quot;&gt;参考连接&lt;/font&gt; 

&lt;p&gt;RTF 2616: &lt;a href=&quot;http://tools.ietf.org/html/rfc2616&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://tools.ietf.org/html/rfc2616&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;&lt;br&gt;    &lt;p&gt;&lt;img src=&quot;http://7xrzzi.com1.z0.glb.clouddn.com/yunvooliyunvooli_meitu_1.jpg&quot; align=&quot;center&quot;&gt;&lt;/p&gt;&lt;br&gt;&lt;/center&gt;

</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;超文本传输协议（英文：HyperText Transfer Protocol，缩写：HTTP）&lt;/strong&gt; 是互联网上应用最为广泛的一种网络协议。设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法。通过HTTP或者HTTPS协议请求的资源
    
    </summary>
    
      <category term="技术" scheme="http://yunvoo.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="HTML,HTTP,协议" scheme="http://yunvoo.com/tags/HTML-HTTP-%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>读 TCP 协议 RFC-793</title>
    <link href="http://yunvoo.com//blog/2014/09/27/tcp.html"/>
    <id>http://yunvoo.com//blog/2014/09/27/tcp.html</id>
    <published>2014-09-26T16:00:00.000Z</published>
    <updated>2016-06-19T10:36:10.330Z</updated>
    
    <content type="html">&lt;p&gt;TCP被作为一种运行在分组交换网络（以及它们的互联系统）上的高可靠的主机到主机协议。TCP是面向连接的、端到端的通用协议，却对下层协议的假设甚少（可以是多网络环境，只要求一个不可靠的报文服务），一般用于互联网上不同主机的进程间通信。&lt;br&gt;现行协议版本被IETF标准化为&lt;a href=&quot;http://tools.ietf.org/html/rfc793&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RFC-793&lt;/a&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;虽然TCP主要运行在互联网的IP协议层之上，但原则上，TCP能够在多种通信系统上进行操作，从硬连线连接到分组交换或电路交换系统。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述　&quot;&gt;&lt;/a&gt;概述　&lt;/h2&gt;&lt;h3 id=&quot;互联网系统元素&quot;&gt;&lt;a href=&quot;#互联网系统元素&quot; class=&quot;headerlink&quot; title=&quot;互联网系统元素&quot;&gt;&lt;/a&gt;互联网系统元素&lt;/h3&gt;&lt;p&gt;Internet环境由连接在通过网关互联的网络上的主机组成。为了在不同主机的进程间通信，网络上运行着多层的协议。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分组&lt;/strong&gt; 是主机以及它所在网络上一次交换的数据。 &lt;strong&gt;主机&lt;/strong&gt; 是连在网络上的计算机，是分组的源和目标。 &lt;strong&gt;进程&lt;/strong&gt; 是主机上的活跃元素。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个进程可能需要独立的多个连接，于是每个进程可以有多个端口来和其他进程通信。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;操作模型&quot;&gt;&lt;a href=&quot;#操作模型&quot; class=&quot;headerlink&quot; title=&quot;操作模型&quot;&gt;&lt;/a&gt;操作模型&lt;/h3&gt;&lt;p&gt;进程通过调用TCP（以数据缓存作为参数）进行数据传输。TCP将数据打包为片段（segment），调用互联网模块传输给目标TCP。接收方TCP将每个片段放在接收用户的缓存中，然后提示用户。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;TCP在片段中包括控制信息，被用来确保传输数据的顺序。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;每个TCP模块关联着一个提供本地网络接口的IP模块，该模块将TCP片段打包成IP数据包，并将其路由到目标IP模块或中间网关。为了在本地网络中传输该数据报，它又被嵌入到本地网络分组中。 分组交换继续做打包、分段等其他操作来递送本地网络分组给目标IP模块。&lt;/p&gt;
&lt;p&gt;在网络间的网关上，打开本地网络分组，得到IP数据报。然后决定接下来应该发送该数据报到那个网络。此后，该数据报被打包进适合下一个本地网络的本地网络分组，路由给下一网关或最终目标。&lt;/p&gt;
&lt;p&gt;网关可以根据需要将IP数据报切分成较小的数据报片段。切分后的片段也可能被再次切分。根据IP数据报分片的格式的设计，目标IP模块可以将分片组装为IP数据报。&lt;/p&gt;
&lt;p&gt;目标IP模块将数据报（如果需要，先进行组装）中的数据拿出来，传送给目标TCP模块。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;简单的模型中仍有很多的细节，比如服务类型。它为网关选择下一个网络的服务参数提供了信息。服务类型包括数据报的优先级，或者安全信息。这些允许主机和网关根据安全考虑，进行多安全层次的操作来分离数据报。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;连接&quot;&gt;&lt;a href=&quot;#连接&quot; class=&quot;headerlink&quot; title=&quot;连接&quot;&gt;&lt;/a&gt;连接&lt;/h3&gt;&lt;p&gt;TCP连接用一对socket来标识，且TCP连接可以向两个方向传送数据，即TCP是全双工的。同时每个端口可以任意绑定一个进程，进程只能对属于自己的端口进行初始化。&lt;/p&gt;
&lt;p&gt;每个数据流都需要维护一些状态信息。这些信息（包括socket、序列号、窗口大小）组成一个连接。一个连接用一组socket标识。&lt;/p&gt;
&lt;p&gt;通信之前，双方应该建立一个连接。结束通信后连接被终止或关闭，释放的资源可供他用。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为了在不可靠的Internet上建立连接和避免错误的连接初始化，TCP采用了握手机制和基于时钟的序列号。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;接口&quot;&gt;&lt;a href=&quot;#接口&quot; class=&quot;headerlink&quot; title=&quot;接口&quot;&gt;&lt;/a&gt;接口&lt;/h3&gt;&lt;p&gt;TCP应作为操作系统的一个模块。其用户接口包括&lt;code&gt;OPEN&lt;/code&gt;,&lt;code&gt;CLOSE&lt;/code&gt;,&lt;code&gt;SEND&lt;/code&gt;,&lt;code&gt;RECEIVE&lt;/code&gt;,&lt;code&gt;STATUS&lt;/code&gt;。这些调用就像是文件调用一样：打开、读、关闭。TCP通过IP来间接调用本地网络接口，TCP接口提供了发送（或接收）数据报给任何互联网中TCP地址的调用。&lt;/p&gt;
&lt;h3 id=&quot;优先级与安全性&quot;&gt;&lt;a href=&quot;#优先级与安全性&quot; class=&quot;headerlink&quot; title=&quot;优先级与安全性&quot;&gt;&lt;/a&gt;优先级与安全性&lt;/h3&gt;&lt;p&gt;使用TCP的用户可能会指定优先级和安全性。当这些特性未被使用时，应提供默认值。&lt;/p&gt;
&lt;h3 id=&quot;操作&quot;&gt;&lt;a href=&quot;#操作&quot; class=&quot;headerlink&quot; title=&quot;操作&quot;&gt;&lt;/a&gt;操作&lt;/h3&gt;&lt;p&gt;TCP允许的操作包括以下几个方面：&lt;/p&gt;
&lt;h3 id=&quot;基本数据传输&quot;&gt;&lt;a href=&quot;#基本数据传输&quot; class=&quot;headerlink&quot; title=&quot;基本数据传输&quot;&gt;&lt;/a&gt;基本数据传输&lt;/h3&gt;&lt;p&gt;TCP能够在两个方向上传输连续的字节流，通常会把一些字节打包成片段，然后交给互联网系统进行传输。&lt;/p&gt;
&lt;p&gt;通常TCP可以根据自己的方便，进行阻塞和转发。因此需要提供&lt;code&gt;PUSH&lt;/code&gt;操作，以免用户需要立即发送。该操作会导致TCP立即转发数据，但这个过程对接收方应是不可见的。&lt;/p&gt;
&lt;h3 id=&quot;可靠性&quot;&gt;&lt;a href=&quot;#可靠性&quot; class=&quot;headerlink&quot; title=&quot;可靠性&quot;&gt;&lt;/a&gt;可靠性&lt;/h3&gt;&lt;p&gt;TCP能够从传输错误中恢复，除非互联网完全断开。传输错误包括：损坏、丢失、重复、乱序。&lt;/p&gt;
&lt;p&gt;为了实现这个目的，每个传输的字节都被标记一个序列号（SEQ)，同时接收方应提供确认号（ACK）。如果确认号超时，则重发数据。在接受端，序列号用来重新排列乱序或重复的片段。数据损坏用一个校验值来处理，在接收端抛弃损坏的片段。&lt;/p&gt;
&lt;h3 id=&quot;流控制&quot;&gt;&lt;a href=&quot;#流控制&quot; class=&quot;headerlink&quot; title=&quot;流控制&quot;&gt;&lt;/a&gt;流控制&lt;/h3&gt;&lt;p&gt;TCP提供了一种手段来管理发送者发送的数据量。接收者发送一个“窗口”（接下来期望接受的字节范围）给发送者，发送者在接收到进一步允许前只能发送这些字节。&lt;/p&gt;
&lt;h3 id=&quot;多路复用&quot;&gt;&lt;a href=&quot;#多路复用&quot; class=&quot;headerlink&quot; title=&quot;多路复用&quot;&gt;&lt;/a&gt;多路复用&lt;/h3&gt;&lt;p&gt;为了允许同一主机的不同进程同时使用TCP设施，TCP提供了一组端口，加上互联网通信层地址（IP），组成一个socket。一对socket唯一地标识了一个TCP连接。&lt;br&gt;而一个进程可以绑定到端口来监听网络。为了方便，将常用进程绑定到公开的确定端口。这样就可以通过公共地址来访问服务了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;对于其他非公开确定的端口，建立连接涉及到更多的动态机制。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;TCP头&quot;&gt;&lt;a href=&quot;#TCP头&quot; class=&quot;headerlink&quot; title=&quot;TCP头&quot;&gt;&lt;/a&gt;TCP头&lt;/h3&gt;&lt;p&gt;在传送的片段中，TCP头的位置紧接着IP头，其中提供了TCP协议规定的必要信息：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; 0                   1                   2                   3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|          Source Port          |       Destination Port        |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|                        Sequence Number                        |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|                    Acknowledgment Number                      |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|  Data |           |U|A|P|R|S|F|                               |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Offset| Reserved  |R|C|S|S|Y|I|            Window             |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|       |           |G|K|H|T|N|N|                               |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|           Checksum            |         Urgent Pointer        |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|                    Options                    |    Padding    |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|                             data                              |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;字段说明：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Source/Destination Port&lt;/code&gt;：源与目标端口。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Sequence Number&lt;/code&gt;：该片段中第一个数据字节的序列号。如果&lt;code&gt;SYN&lt;/code&gt;是1，则该序列号成为初始序列号（&lt;code&gt;ISN&lt;/code&gt;），第一个数据字节为&lt;code&gt;ISN+1&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Acknowledgment Number&lt;/code&gt;：如果&lt;code&gt;ACK&lt;/code&gt;是1，该字段包含期望收到的下一个序列号。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Data Offset&lt;/code&gt;：TCP头的长度，也就是数据的起始位置。单位为32位字。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Reserved&lt;/code&gt;：保留字段，必须为0。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Conrol Bits&lt;/code&gt;：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;URG&lt;/code&gt;：&lt;code&gt;Urgent Pointer&lt;/code&gt;字段起作用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ACK&lt;/code&gt;：&lt;code&gt;Acknowledgment&lt;/code&gt;字段起作用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PSH&lt;/code&gt;：&lt;code&gt;PUSH&lt;/code&gt;功能。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RST&lt;/code&gt;：重置连接。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SYN&lt;/code&gt;：同步序列号。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FIN&lt;/code&gt;：别再发送了。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Window&lt;/code&gt;：期望接收的字节长度，从&lt;code&gt;Acknowledgment&lt;/code&gt;开始。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Checksum&lt;/code&gt;：头和数据中所有16位字的反码和的反码。如果是奇数字节，最后字节后补零。计算该字段时，该字段值为0。该校验和还包含了伪头部，它包含IP地址，用来防止路由错误。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Urgent Pointer&lt;/code&gt;：当前紧急数据的开始位置，从序列号算起。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Options&lt;/code&gt;：该字段位于TCP头的末尾，可以有多个整字节。可以包括选项类型、选项长度、选项数据。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Padding&lt;/code&gt;：值为0的补白，确保TCP头长度为32位的整数倍。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;TCP状态&quot;&gt;&lt;a href=&quot;#TCP状态&quot; class=&quot;headerlink&quot; title=&quot;TCP状态&quot;&gt;&lt;/a&gt;TCP状态&lt;/h3&gt;&lt;p&gt;一个TCP连接在整个生命周期内可能处在不同的状态，包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;LISTEN&lt;/code&gt;：等待任何远程TCP的连接请求。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SYN-SENT&lt;/code&gt;：发送连接请求后，等待匹配连接请求。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SYN-RECEIVED&lt;/code&gt;：收到并发送一个连接请求后，等待连接请求确认。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ESTABLISHED&lt;/code&gt;：一个打开的连接，收到的数据可以递交给用户，正常的数据传输状态。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FIN-WAIT-1&lt;/code&gt;：等待远程TCP的终止请求，或等待终止请求的确认。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FIN-WAIT-2&lt;/code&gt;：等待远程TCP的终止请求。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CLOSE-WAIT&lt;/code&gt;：等待本地用户的连接终止请求。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CLOSING&lt;/code&gt;：等待远程TCP的终止请求确认。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LAST-ACK&lt;/code&gt;：等待远程TCP终止请求的确认，之前发送的终止请求包含终止请求的确认。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TIME-WAIT&lt;/code&gt;：等待足够的时间，确保远程TCP收到了终止请求的确认。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CLOSED&lt;/code&gt;：没有任何连接状态。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;建立连接&quot;&gt;&lt;a href=&quot;#建立连接&quot; class=&quot;headerlink&quot; title=&quot;建立连接&quot;&gt;&lt;/a&gt;建立连接&lt;/h3&gt;&lt;p&gt;使用&lt;code&gt;OPEN&lt;/code&gt;调用来声明一个连接，同时提供本地端口、远程socket参数、以及被动等待还是主动连接。此时TCP会提供一个名称（关联着传输控制块，TCB，来存储该连接的变量的数据结构）用于后续调用。两个进程如果同时发起主动连接，它们也会正确地建立连接。这种灵活性在分布式系统中至关重要。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本地被动连接可以指定远程socket，也可以不指定。后者将会接受所有的远程socket。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;建立连接采用三步握手过程，一般是一方初始化请求，另一方响应该请求。以下是一个简单的建立连接过程：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    TCP A                                                TCP B&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1.  CLOSED                                               LISTEN&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.  SYN-SENT    --&amp;gt; &amp;lt;SEQ=100&amp;gt;&amp;lt;CTL=SYN&amp;gt;               --&amp;gt; SYN-RECEIVED&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3.  ESTABLISHED &amp;lt;-- &amp;lt;SEQ=300&amp;gt;&amp;lt;ACK=101&amp;gt;&amp;lt;CTL=SYN,ACK&amp;gt;  &amp;lt;-- SYN-RECEIVED&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4.  ESTABLISHED --&amp;gt; &amp;lt;SEQ=101&amp;gt;&amp;lt;ACK=301&amp;gt;&amp;lt;CTL=ACK&amp;gt;       --&amp;gt; ESTABLISHED&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5.  ESTABLISHED --&amp;gt; &amp;lt;SEQ=101&amp;gt;&amp;lt;ACK=301&amp;gt;&amp;lt;CTL=ACK&amp;gt;&amp;lt;DATA&amp;gt; --&amp;gt; ESTABLISHED&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;注意第5行，此时发送了一些数据，而&lt;code&gt;SEQ&lt;/code&gt;值没有变，因为&lt;code&gt;ACK&lt;/code&gt;报文不占用序列号空间（不同于数据和&lt;code&gt;SYN&lt;/code&gt;）。否则我们将需要确认&lt;code&gt;ACK&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对于同时发起连接，将会稍微复杂一些：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    TCP A                                            TCP B&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1.  CLOSED                                           CLOSED&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.  SYN-SENT     --&amp;gt; &amp;lt;SEQ=100&amp;gt;&amp;lt;CTL=SYN&amp;gt;              ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3.  SYN-RECEIVED &amp;lt;-- &amp;lt;SEQ=300&amp;gt;&amp;lt;CTL=SYN&amp;gt;              &amp;lt;-- SYN-SENT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4.               ... &amp;lt;SEQ=100&amp;gt;&amp;lt;CTL=SYN&amp;gt;              --&amp;gt; SYN-RECEIVED&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5.  SYN-RECEIVED --&amp;gt; &amp;lt;SEQ=100&amp;gt;&amp;lt;ACK=301&amp;gt;&amp;lt;CTL=SYN,ACK&amp;gt; ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6.  ESTABLISHED  &amp;lt;-- &amp;lt;SEQ=300&amp;gt;&amp;lt;ACK=101&amp;gt;&amp;lt;CTL=SYN,ACK&amp;gt; &amp;lt;-- SYN-RECEIVED&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7.               ... &amp;lt;SEQ=101&amp;gt;&amp;lt;ACK=301&amp;gt;&amp;lt;CTL=ACK&amp;gt;     --&amp;gt; ESTABLISHED&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;三路握手过程可以从旧的重复&lt;code&gt;SYN&lt;/code&gt;中恢复，要用到&lt;code&gt;RST&lt;/code&gt;字段：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    TCP A                                                TCP B&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1.  CLOSED                                               LISTEN&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.  SYN-SENT    --&amp;gt; &amp;lt;SEQ=100&amp;gt;&amp;lt;CTL=SYN&amp;gt;               ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3.  (duplicate) ... &amp;lt;SEQ=90&amp;gt;&amp;lt;CTL=SYN&amp;gt;               --&amp;gt; SYN-RECEIVED&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4.  SYN-SENT    &amp;lt;-- &amp;lt;SEQ=300&amp;gt;&amp;lt;ACK=91&amp;gt;&amp;lt;CTL=SYN,ACK&amp;gt;  &amp;lt;-- SYN-RECEIVED&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5.  SYN-SENT    --&amp;gt; &amp;lt;SEQ=91&amp;gt;&amp;lt;CTL=RST&amp;gt;               --&amp;gt; LISTEN&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6.              ... &amp;lt;SEQ=100&amp;gt;&amp;lt;CTL=SYN&amp;gt;               --&amp;gt; SYN-RECEIVED&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7.  SYN-SENT    &amp;lt;-- &amp;lt;SEQ=400&amp;gt;&amp;lt;ACK=101&amp;gt;&amp;lt;CTL=SYN,ACK&amp;gt;  &amp;lt;-- SYN-RECEIVED&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8.  ESTABLISHED --&amp;gt; &amp;lt;SEQ=101&amp;gt;&amp;lt;ACK=401&amp;gt;&amp;lt;CTL=ACK&amp;gt;      --&amp;gt; ESTABLISHED&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;注意，第3行是旧的重复&lt;code&gt;SYN&lt;/code&gt;，接收方在不知情的情况下仍然确认了该&lt;code&gt;SYN&lt;/code&gt;。此时，发送方应重置该&lt;code&gt;SYN&lt;/code&gt;（地5行）。然后继续新的连接。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;另外一种情况是一方因故关闭，造成半开的连接。TCP的策略是发现这种情况并关闭该连接后重新由关闭方发起连接。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    TCP A                                           TCP B&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1.  (CRASH)                               (send 300,receive 100)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.  CLOSED                                           ESTABLISHED&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3.  SYN-SENT --&amp;gt; &amp;lt;SEQ=400&amp;gt;&amp;lt;CTL=SYN&amp;gt;              --&amp;gt; (??)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4.  (!!)     &amp;lt;-- &amp;lt;SEQ=300&amp;gt;&amp;lt;ACK=100&amp;gt;&amp;lt;CTL=ACK&amp;gt;     &amp;lt;-- ESTABLISHED&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5.  SYN-SENT --&amp;gt; &amp;lt;SEQ=100&amp;gt;&amp;lt;CTL=RST&amp;gt;              --&amp;gt; (Abort!!)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6.  SYN-SENT                                         CLOSED&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7.  SYN-SENT --&amp;gt; &amp;lt;SEQ=400&amp;gt;&amp;lt;CTL=SYN&amp;gt;              --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;注意，接收到&lt;code&gt;RST&lt;/code&gt;后首先进行验证（&lt;code&gt;RST&lt;/code&gt;的&lt;code&gt;SEQ&lt;/code&gt;必须在窗口内），然后进行重置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;关闭连接&quot;&gt;&lt;a href=&quot;#关闭连接&quot; class=&quot;headerlink&quot; title=&quot;关闭连接&quot;&gt;&lt;/a&gt;关闭连接&lt;/h3&gt;&lt;p&gt;TCP是全双工的，&lt;code&gt;CLOSE&lt;/code&gt;操作却是单工的方式：&lt;code&gt;CLOSE&lt;/code&gt;之后不再发送数据，但仍然可以继续接收数据直到远程TCP关闭。即&lt;code&gt;CLOSE&lt;/code&gt;意味着：我没有要发送的数据了。&lt;/p&gt;
&lt;p&gt;对于一方首先关闭连接的情况：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    TCP A                                                TCP B&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1.  ESTABLISHED                                          ESTABLISHED&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.  (Close)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    FIN-WAIT-1  --&amp;gt; &amp;lt;SEQ=100&amp;gt;&amp;lt;ACK=300&amp;gt;&amp;lt;CTL=FIN,ACK&amp;gt;  --&amp;gt; CLOSE-WAIT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3.  FIN-WAIT-2  &amp;lt;-- &amp;lt;SEQ=300&amp;gt;&amp;lt;ACK=101&amp;gt;&amp;lt;CTL=ACK&amp;gt;      &amp;lt;-- CLOSE-WAIT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4.                                                       (Close)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TIME-WAIT   &amp;lt;-- &amp;lt;SEQ=300&amp;gt;&amp;lt;ACK=101&amp;gt;&amp;lt;CTL=FIN,ACK&amp;gt;  &amp;lt;-- LAST-ACK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5.  TIME-WAIT   --&amp;gt; &amp;lt;SEQ=101&amp;gt;&amp;lt;ACK=301&amp;gt;&amp;lt;CTL=ACK&amp;gt;      --&amp;gt; CLOSED&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6.  (2 MSL)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CLOSED&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于双方同时关闭连接的情况：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    TCP A                                                TCP B&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1.  ESTABLISHED                                          ESTABLISHED&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.  (Close)                                              (Close)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    FIN-WAIT-1  --&amp;gt; &amp;lt;SEQ=100&amp;gt;&amp;lt;ACK=300&amp;gt;&amp;lt;CTL=FIN,ACK&amp;gt;  ... FIN-WAIT-1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;lt;-- &amp;lt;SEQ=300&amp;gt;&amp;lt;ACK=100&amp;gt;&amp;lt;CTL=FIN,ACK&amp;gt;  &amp;lt;--&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ... &amp;lt;SEQ=100&amp;gt;&amp;lt;ACK=300&amp;gt;&amp;lt;CTL=FIN,ACK&amp;gt;  --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3.  CLOSING     --&amp;gt; &amp;lt;SEQ=101&amp;gt;&amp;lt;ACK=301&amp;gt;&amp;lt;CTL=ACK&amp;gt;      ... CLOSING&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;lt;-- &amp;lt;SEQ=301&amp;gt;&amp;lt;ACK=101&amp;gt;&amp;lt;CTL=ACK&amp;gt;      &amp;lt;--&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ... &amp;lt;SEQ=101&amp;gt;&amp;lt;ACK=301&amp;gt;&amp;lt;CTL=ACK&amp;gt;      --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4.  TIME-WAIT                                            TIME-WAIT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (2 MSL)                                              (2 MSL)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CLOSED                                               CLOSED&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;MSL&lt;/strong&gt;: Maximum Segment Lifetime, the time a TCP segment can exist in the internetwork system.  Arbitrarily defined to be 2 minutes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考：&lt;a href=&quot;http://tools.ietf.org/html/rfc793&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RFC-793&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;TCP被作为一种运行在分组交换网络（以及它们的互联系统）上的高可靠的主机到主机协议。TCP是面向连接的、端到端的通用协议，却对下层协议的假设甚少（可以是多网络环境，只要求一个不可靠的报文服务），一般用于互联网上不同主机的进程间通信。&lt;br&gt;现行协议版本被IETF标准化为&lt;a
    
    </summary>
    
      <category term="技术" scheme="http://yunvoo.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="TCP，协议" scheme="http://yunvoo.com/tags/TCP%EF%BC%8C%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
</feed>
