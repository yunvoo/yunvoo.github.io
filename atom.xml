<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yunvoo Blog</title>
  <subtitle>人生如路--&gt;须在荒凉中走出繁华的风景</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yunvoo.com/"/>
  <updated>2016-06-26T07:15:08.677Z</updated>
  <id>http://yunvoo.com/</id>
  
  <author>
    <name>yunvoo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>英国退欧引发地震 全球政治洗牌在即</title>
    <link href="http://yunvoo.com//blog/2016/06/26/%E8%8B%B1%E5%9B%BD%E9%80%80%E6%AC%A7%E5%BC%95%E5%8F%91%E5%9C%B0%E9%9C%87-%E5%85%A8%E7%90%83%E6%94%BF%E6%B2%BB%E6%B4%97%E7%89%8C%E5%9C%A8%E5%8D%B3.html"/>
    <id>http://yunvoo.com//blog/2016/06/26/英国退欧引发地震-全球政治洗牌在即.html</id>
    <published>2016-06-26T07:08:15.000Z</published>
    <updated>2016-06-26T07:15:08.677Z</updated>
    
    <content type="html">&lt;h2 id=&quot;英国退欧引发地震-全球政治洗牌在即&quot;&gt;&lt;a href=&quot;#英国退欧引发地震-全球政治洗牌在即&quot; class=&quot;headerlink&quot; title=&quot;英国退欧引发地震 全球政治洗牌在即&quot;&gt;&lt;/a&gt;英国退欧引发地震 全球政治洗牌在即&lt;/h2&gt;&lt;p&gt;英国将脱离欧盟的公投结果立刻引发了政治上的大地震。消息一经传出，法国、丹麦、荷兰和意大利几乎同时爆发要求公投表决的呼声，以波兰、捷克、瑞典等国为代表的欧盟成员国政府则不约而同地做出表态，称欧盟必须重新考虑其政策。德国总理默克尔在事后演讲中说，英国的退出将是“欧洲的分水岭”。&lt;/p&gt;
&lt;p&gt;当然，这一点毫无疑问，但英国退出欧盟的影响意义远远不限于此。&lt;/p&gt;
&lt;p&gt;尽管已经不再是称霸全球的大英帝国，但二战后的英国仍然在全球体系中扮演着无可取代的角色，对于霸主美国来说尤其如此。二战中形成的英美特殊关系在战後首先充当了冷战中西方阵营的指挥中枢，随即在冷战后随着东方阵营的崩解而成为新世界秩序重构的核心和基础。在超过半个世纪的时间里，英国是美国在全球事务中最可倚仗的盟友和助手，是美国联系欧洲、影响欧洲的桥梁，也是美国在全球所建立的同盟关系中最受重视的一环。&lt;/p&gt;
&lt;p&gt;然而，英国脱离欧盟的举动正在改写这一切。看上去，脱欧似乎只是英国与欧洲之间的一次关系重构，但事实上，这却是英国国家孤立主义和实用主义达到历史空前水平的一种反映。70年后，英国越来越像是一个普通的欧洲国家，过去那些需要关切的重大海外利益已经一去不返，在欧洲政治上的领导地位也逐渐旁落德国之手，欧盟所能带来的日益微薄的政治红利不得不让位于民众对难民及恐怖袭击等更加迫在眉睫问题的关心，而与此同时，时刻准备着响应美国的旧外交思路也变得日益缺乏实际意义。&lt;br&gt;&lt;img src=&quot;http://7xrzzi.com1.z0.glb.clouddn.com/tuiou.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;英国民众要求脱离欧盟的决定与英美特殊关系的逐渐褪色是同一件事的两种面相，由此遭到空前打击的不仅有英欧与英美关系，还有过去七十年里借英国之力构建起来的美欧关系。没有了充当桥梁的英国，美国将不得不重新构建与欧洲之间的沟通方式，而在欧洲日益脱离美国掌控的时代背景下，可以预见介入欧洲事务对美国而言将变得越发吃力——更不要说，英国退出以后，留给美国的又是一个意见空前混乱的欧洲。&lt;/p&gt;
&lt;p&gt;眼下，英国脱离欧盟的举动已经在欧洲引发连锁反应，欧盟几乎所有国家都在英国宣布退出后爆发了质疑声浪，这一次人们质疑的对象不仅是欧盟的难民政策或紧缩措施，甚至也不再是今天的欧盟——而更多地变成了一体化梦想本身。&lt;/p&gt;
&lt;p&gt;更为棘手的是，如今质疑已经有了化为现实的充分可能性。6月20日，意大利地方选举中反建制派政党“五星运动”力挫意大利现任总理伦齐领导的民主党，在首都罗马和第三大城市都灵分别以压倒性优势赢得市长选举。“五星运动”已公开表示要求就意大利是否留在欧元区以及意大利的欧盟成员国地位分别举行公投。同样跃跃欲试的还有法国著名右翼政党“国民阵线”的主席勒庞和荷兰反移民阵营领袖韦德尔斯（Geert Wilders），二人目前分别是各自国内民调支持率第一的政客，极有可能成为新一届领导人。&lt;/p&gt;
&lt;p&gt;英国的退出只是一个开始，卡梅伦的辞职也不过是引子，公投即将带来全球范围内新一轮地缘格局的全面洗牌，而这场政治地震的范围注定不可能限制在欧洲以内。&lt;br&gt;&lt;strong&gt; 本文来自多维新闻 &lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;英国退欧引发地震-全球政治洗牌在即&quot;&gt;&lt;a href=&quot;#英国退欧引发地震-全球政治洗牌在即&quot; class=&quot;headerlink&quot; title=&quot;英国退欧引发地震 全球政治洗牌在即&quot;&gt;&lt;/a&gt;英国退欧引发地震 全球政治洗牌在即&lt;/h2&gt;&lt;p&gt;英国将脱离欧盟的公投
    
    </summary>
    
      <category term="金融经济" scheme="http://yunvoo.com/categories/%E9%87%91%E8%9E%8D%E7%BB%8F%E6%B5%8E/"/>
    
    
      <category term="英国退欧" scheme="http://yunvoo.com/tags/%E8%8B%B1%E5%9B%BD%E9%80%80%E6%AC%A7/"/>
    
  </entry>
  
  <entry>
    <title>英国脱欧公投教会了你什么？</title>
    <link href="http://yunvoo.com//blog/2016/06/25/%E8%8B%B1%E5%9B%BD%E8%84%B1%E6%AC%A7%E5%85%AC%E6%8A%95%E6%95%99%E4%BC%9A%E4%BA%86%E4%BD%A0%E4%BB%80%E4%B9%88%EF%BC%9F.html"/>
    <id>http://yunvoo.com//blog/2016/06/25/英国脱欧公投教会了你什么？.html</id>
    <published>2016-06-25T00:09:06.000Z</published>
    <updated>2016-06-25T00:15:07.925Z</updated>
    
    <content type="html">&lt;p&gt;对于一个立志从事投资的人来说，尤其是宏观交易者，今天算是难得一见的盛况。无论英国脱欧与否，这几天的变化足以让人学到很多。面对宏观政治事件，要么全面规避风险，要么纵身投入豪赌。这取决于你是哪类人。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;英国脱欧&lt;/code&gt;公投，似乎是从事投资的人最关心，但英国脱欧公投本身不是一个简单的金融事件，其本质是一个宏观政治事件。影响重大的宏观政治事件除了影响到金融市场，更多会影响到社会形态和经济模式，只不过&lt;code&gt;金融市&lt;/code&gt;场最为敏感最容易产生波动而已。&lt;/p&gt;
&lt;p&gt;英国脱欧，欧洲格局势必重新塑造。英国脱欧后，英国未来将不再适用欧盟的一系列经济贸易等政策。同时，如果英国脱欧引发英国内部苏格兰、威尔士要脱离英国，很可能再度引发英国震动。此外，英国脱欧是全球民粹主义和社会思潮保守的先行信号，因此也不排除欧洲部分国家可能考虑脱欧。这一切都是一个从&lt;code&gt;平衡&lt;/code&gt;到&lt;code&gt;混乱&lt;/code&gt;再到寻求平衡的过程。混乱中很难去预测出一个相对可靠的&lt;code&gt;演进范式&lt;/code&gt;，唯一能预测的是混乱本身。&lt;/p&gt;
&lt;p&gt;这种混乱从英国脱欧公投前几天的变化就可以看出。起初各方预期英国脱欧概率较大，之后因&lt;code&gt;议员Cox枪击案&lt;/code&gt;而转向留欧概率增加，全球资本市场因此随之出现一波避险和修复风潮。然而在公投票仓揭晓过程中，又出现大逆转，脱欧票数一路领先，导致英镑大幅贬值，日元、美元和黄金等避险资产大涨。&lt;/p&gt;
&lt;p&gt;不得不说，要在这样的混乱中做出稳定盈利的投资策略并非易事，当年美国次贷危机和欧债危机都令大部分&lt;code&gt;宏观策略观点打脸&lt;/code&gt;。从概率上讲，大部分投资者将在这种事件中承受损失，除非你的策略只是规避风险。&lt;/p&gt;
&lt;p&gt;规避风险最简单的策略就是从风险资产中撤出，并买入避险资产，比如美元、日元、黄金和避险货币的国债。避险策略并非只赚不赔，只要有价格波动在，都可能产生盈利和亏损，只不过进入这些避险资产所承受的风险会远远小于风险资产。因此从策略制定和执行上讲，与其试图在混乱中制定可靠的盈利策略，不如对可能的风险退之三舍。如果根据策略分析师的看法，别说各分析师莫衷一是，即便是一个分析师，在这几天内也会反复修改观点，根本无益于配置策略本身。要知道，就算是博彩公司也有一天内180度的赔率逆转。&lt;/p&gt;
&lt;p&gt;大混乱也意味着大机会。宏观交易员热衷于在混乱中通过交易来博取盈利，这当然需要过人的胆识和技术，因为大混乱是一把&lt;code&gt;双刃剑&lt;/code&gt;，做对方向就能获得可观的&lt;code&gt;盈利&lt;/code&gt;，做错方向且无法及时止损就意味着血本无归。在最近几天的市场波动中，交易员的优势在于能够根据形势及时变化，前提是错误方向的头寸没有&lt;code&gt;下注太大&lt;/code&gt;，有足够的调头空间。今天一个上午英镑就有&lt;code&gt;超过10%的跌幅&lt;/code&gt;，中间还有数次2%以上的&lt;code&gt;振幅&lt;/code&gt;，这对于交易而言绝对是一次&lt;code&gt;严格的考验&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;每个人都有自己的&lt;code&gt;能力圈&lt;/code&gt;，有人擅长于大类&lt;code&gt;资产配置&lt;/code&gt;，面对宏观不确定时愿意选择规避风险，有人擅长于宏观交易，在大事件中承担风险奋力搏杀。虽然最终落脚点都是盈亏与否，但路径是完全不同的。面对&lt;code&gt;宏观不确定性&lt;/code&gt;，大部分人应该选择规避风险，除非你能够承担足够大的风险，而且经验丰富、手段老辣，而这种人毕竟是凤毛麟角。索罗斯会参与这场&lt;code&gt;豪赌&lt;/code&gt;，&lt;code&gt;巴菲特&lt;/code&gt;却绝不会涉足其中，索罗斯只有一个，巴菲特也只有一个。你，或许谁也不是。&lt;br&gt;&lt;strong&gt; 本文来自华尔街日报 &lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;对于一个立志从事投资的人来说，尤其是宏观交易者，今天算是难得一见的盛况。无论英国脱欧与否，这几天的变化足以让人学到很多。面对宏观政治事件，要么全面规避风险，要么纵身投入豪赌。这取决于你是哪类人。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;英国脱欧&lt;/code&gt;公投，似乎是从事投资的人最关心
    
    </summary>
    
      <category term="金融经济" scheme="http://yunvoo.com/categories/%E9%87%91%E8%9E%8D%E7%BB%8F%E6%B5%8E/"/>
    
    
      <category term="英国脱欧" scheme="http://yunvoo.com/tags/%E8%8B%B1%E5%9B%BD%E8%84%B1%E6%AC%A7/"/>
    
  </entry>
  
  <entry>
    <title>英国脱欧成功 中日冰火两重天</title>
    <link href="http://yunvoo.com//blog/2016/06/25/%E8%8B%B1%E5%9B%BD%E8%84%B1%E6%AC%A7%E6%88%90%E5%8A%9F-%E4%B8%AD%E6%97%A5%E5%86%B0%E7%81%AB%E4%B8%A4%E9%87%8D%E5%A4%A9.html"/>
    <id>http://yunvoo.com//blog/2016/06/25/英国脱欧成功-中日冰火两重天.html</id>
    <published>2016-06-24T23:59:21.000Z</published>
    <updated>2016-06-25T00:19:13.240Z</updated>
    
    <content type="html">&lt;p&gt;&lt;code&gt;北京时间6月24日&lt;/code&gt;，英国成功脱离欧盟，其引发的连锁影响立时显现。6月24日下午，日元需求火山喷发，日元单日升值7.2%。外界认为，“安倍经济学”的基础建筑在日元贬值的基础上，日元升值将给日本经济以沉重的打击。&lt;/p&gt;
&lt;p&gt;日元升值的直接影响，是赴日旅游和日本代购将迎来冬天，日本产品的出口面临巨大压力。更为重要的是，安倍经济学的核心理念就是极为激进的宽松货币政策。安倍上台两月，日元贬值&lt;code&gt;超过9%&lt;/code&gt;。如今日元受外力刺激升值，&lt;code&gt;安倍经济学&lt;/code&gt;面临破产风险。&lt;/p&gt;
&lt;p&gt;更为关键的是，这可能不是短期的影响，英国脱欧对欧元的打击是长期的。由此引发的后果，是国际市场出卖欧元，买入美元、日元、人民币等其他国家的货币。安倍晋三如果想维持日元&lt;code&gt;贬值&lt;/code&gt;的态势，恐怕将付出比以前多数倍的代价。&lt;br&gt;&lt;strong&gt; 6月24日，英国脱欧公投出炉，英国脱离欧盟&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://7xrzzi.com1.z0.glb.clouddn.com/624.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;与此形成对比的是，这对中国而言可能是利好的消息。众所周知，人民币近来面临着贬值的压力。据FT中文网报道，中国政府为了阻击人民币无序贬值，数月之间已经花费了至少&lt;code&gt;4370亿美元的外汇&lt;/code&gt;。欧元遭受打击，这提高了人民币的相对安全性，有利于人民币的升值。&lt;/p&gt;
&lt;p&gt;并且，欧盟近期将出台针对中国钢铁的惩罚性政策，这对中国钢铁的出口是巨大的打击。但现在英国脱欧成功，欧盟针对中国钢铁的惩罚性措施将不适用于中英两国之间。中国和英国会商讨两国间的贸易政策。在难以改变欧盟针对中国钢铁征收惩罚性关税的背景下，英国脱欧对&lt;code&gt;中国钢铁产业&lt;/code&gt;而言是利好的消息。&lt;/p&gt;
&lt;p&gt;外界认为，虽然从某些方面看，英国脱欧对日本不利对中国有利，但这只是就局部而言。从整体上看，英国脱欧之后，&lt;code&gt;英国到2018年GDP会下降1&lt;/code&gt;.3%，欧盟GDP占全球比重将从17%降至14.6%。欧洲的衰落，哪怕这种衰落是暂时的，也不利于中日两国对欧出口的增长。从全球范围看，英国脱欧的影响也是负面的。&lt;br&gt;&lt;strong&gt; 本文来自多维新闻 &lt;/strong&gt; &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;北京时间6月24日&lt;/code&gt;，英国成功脱离欧盟，其引发的连锁影响立时显现。6月24日下午，日元需求火山喷发，日元单日升值7.2%。外界认为，“安倍经济学”的基础建筑在日元贬值的基础上，日元升值将给日本经济以沉重的打击。&lt;/p&gt;
&lt;p&gt;日元升值的直接影响，是赴
    
    </summary>
    
      <category term="金融经济" scheme="http://yunvoo.com/categories/%E9%87%91%E8%9E%8D%E7%BB%8F%E6%B5%8E/"/>
    
    
      <category term="退欧" scheme="http://yunvoo.com/tags/%E9%80%80%E6%AC%A7/"/>
    
  </entry>
  
  <entry>
    <title>警言*名言</title>
    <link href="http://yunvoo.com//blog/2016/06/22/%E8%AD%A6%E8%A8%80-%E5%90%8D%E8%A8%80.html"/>
    <id>http://yunvoo.com//blog/2016/06/22/警言-名言.html</id>
    <published>2016-06-22T13:00:25.000Z</published>
    <updated>2016-06-23T07:10:55.945Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;这是最好的时代，这是最坏的时代，这是智慧的时代，这是愚蠢的时代；这是信仰的时期，这是怀疑的时期；这是光明的季节，这是黑暗的季节；这是希望之春，这是失望之冬；人们面前有着各样事物，人们面前一无所有；人们正在直登天堂；人们正在直下地狱。                                                 —– 狄更斯 《双城记》&lt;/p&gt;
&lt;p&gt;为增长而增长乃癌细胞生存之道                   —爱的华*艾比 (英国作家)&lt;/p&gt;
&lt;p&gt;一个人不论干什么事失掉恰当的时节 有利的时机就会全功尽弃      —柏拉图&lt;/p&gt;
&lt;p&gt;没有人能成功地预测市场的变化              — 格雷厄姆（投资家)&lt;/p&gt;
&lt;p&gt;现在一切美好的事物无一不是创新的结果        —穆勒（英国经济学家)&lt;/p&gt;
&lt;p&gt;有人因为贪婪想得到更多却把现有的也失掉了    —伊索（古希腊预言家)&lt;/p&gt;
&lt;p&gt;错误不可耻可耻的是错误已经是显而易见了 却还不去修正       —乔治* &amp;gt;                                                       索罗斯（美国投资家）&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这是最好的时代，这是最坏的时代，这是智慧的时代，这是愚蠢的时代；这是信仰的时期，这是怀疑的时期；这是光明的季节，这是黑暗的季节；这是希望之春，这是失望之冬；人们面前有着各样事物，人们面前一无所有；人们正在直登天堂；人们正在直下地狱。        
    
    </summary>
    
      <category term="散文" scheme="http://yunvoo.com/categories/%E6%95%A3%E6%96%87/"/>
    
    
      <category term="名言" scheme="http://yunvoo.com/tags/%E5%90%8D%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>首超美国：中国自主芯片全球称雄</title>
    <link href="http://yunvoo.com//blog/2016/06/21/%E9%A6%96%E8%B6%85%E7%BE%8E%E5%9B%BD%EF%BC%9A%E4%B8%AD%E5%9B%BD%E8%87%AA%E4%B8%BB%E8%8A%AF%E7%89%87%E5%85%A8%E7%90%83%E7%A7%B0%E9%9B%84.html"/>
    <id>http://yunvoo.com//blog/2016/06/21/首超美国：中国自主芯片全球称雄.html</id>
    <published>2016-06-20T23:45:04.000Z</published>
    <updated>2016-06-23T11:19:15.618Z</updated>
    
    <content type="html">&lt;p&gt;&lt;code&gt;本文来自多维新闻&lt;/code&gt;中国自主芯片制造的超级计算机首次荣登全球超级计算机500强榜首，对美国科技主导地位构成挑战，这也是中国尝试减少科技进口依赖的突破。此外中国超级计算机上榜总数量有史以来首次超过美国名列第一。&lt;/p&gt;
&lt;p&gt;据华尔街见闻网报道称，6月20日，新一期全球超级计算机500强榜单公布，使用中国自主芯片制造的“神威太湖之光”取代“天河二号”登上榜首。更重要的是，与“天河二号”使用英特尔芯片不一样，“神威太湖之光”使用的是中国自主知识产权的芯片。“神威太湖之光”的浮点运算速度为每秒9.3亿亿次，不仅速度比第二名“天河二号”快出近两倍，其效率也提高3倍。&lt;/p&gt;
&lt;p&gt;其声明中写道：“中国在国际TOP500组织第47期榜单上保持第一名的位置，凭借的是一个完全基于中国设计、制造处理器而打造的新系统。”&lt;/p&gt;
&lt;p&gt;“神威太湖之光”由国家并行计算机工程技术研究中心研制，安装在国家超级计算无锡中心。此前，由中国国防科技大学研制的“天河二号”超级计算机已在TOP500榜单上连续六度称雄。&lt;br&gt;&lt;strong&gt; 中国自主芯片制造的超级计算机荣登全球榜首 &lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://7xrzzi.com1.z0.glb.clouddn.com/duowen.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;TOP500榜单是对全球已安装的超级计算机“排座次”的权威排行榜。从1993年起，由TOP500国际组织以实测计算速度为基准每半年发布一次。&lt;/p&gt;
&lt;p&gt;此次榜单还有一个重大变动是，美国入围的超级计算机总数量首次跌下第一位置。上述声明说，由于过去一些年中国工业和研究部门注册提交的系统数量剧增，中国现在入榜的超级计算机数量达到167台，超过美国的165台。此外，由于中国占据TOP榜单头两名，中国在计算性能类别上也居于领先位置。&lt;/p&gt;
&lt;p&gt;排行榜主要编撰人、美国田纳西大学计算机学教授Jack Dongarra评价道，2001年中国上榜数量还是零，但今天中国已经超过美国，没有其他国家有这样快的增长速度。&lt;/p&gt;
&lt;p&gt;他认为，超级计算机“比以往任何时候都重要”，能为能源、医药、飞机制造、汽车与娱乐业等广泛领域的行业提供高性能计算服务。“更强大的计算能力将使得这些不同行业更快地生产出优异新产品，从而提高一个国家的竞争力”。&lt;/p&gt;
&lt;p&gt;在计算机服务器领域，神威太湖之光的胜利对英特尔的主导权构成特别挑战。目前英特尔控制着96%的计算机服务器市场。&lt;/p&gt;
&lt;p&gt;超级计算机是能够执行一般个人电脑无法处理的大资料量与高速运算的电脑，其基本组成组件与个人电脑的概念无太大差异，但规格与性能强大许多，且价格昂贵又相对稀有。&lt;/p&gt;
&lt;p&gt;包括美国高通在内的其他芯片制造商正与中国的组织合作，在中国培养研究员。安谋国际科技（ARM Holdings）同样也想在中国市场分得一杯羹。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;本文来自多维新闻&lt;/code&gt;中国自主芯片制造的超级计算机首次荣登全球超级计算机500强榜首，对美国科技主导地位构成挑战，这也是中国尝试减少科技进口依赖的突破。此外中国超级计算机上榜总数量有史以来首次超过美国名列第一。&lt;/p&gt;
&lt;p&gt;据华尔街见闻网报道称，6月2
    
    </summary>
    
      <category term="金融经济" scheme="http://yunvoo.com/categories/%E9%87%91%E8%9E%8D%E7%BB%8F%E6%B5%8E/"/>
    
    
      <category term="芯片" scheme="http://yunvoo.com/tags/%E8%8A%AF%E7%89%87/"/>
    
  </entry>
  
  <entry>
    <title>长期发展的团队和归属感</title>
    <link href="http://yunvoo.com//blog/2015/10/26/%E9%95%BF%E6%9C%9F%E5%8F%91%E5%B1%95%E7%9A%84%E5%9B%A2%E9%98%9F%E5%92%8C%E5%BD%92%E5%B1%9E%E6%84%9F.html"/>
    <id>http://yunvoo.com//blog/2015/10/26/长期发展的团队和归属感.html</id>
    <published>2015-10-25T16:00:00.000Z</published>
    <updated>2016-06-19T14:09:50.803Z</updated>
    
    <content type="html">&lt;h3 id=&quot;团队归属感&quot;&gt;&lt;a href=&quot;#团队归属感&quot; class=&quot;headerlink&quot; title=&quot;团队归属感&quot;&gt;&lt;/a&gt;团队归属感&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;想随波逐流的人大概都会梦想拥有一支信得过的可以一起奋斗的团队吧，我觉得这是人之常情。&lt;/p&gt;
&lt;p&gt;那么，自己喜欢怎么样的团队，以及怎样的团队才需要自己，这两个问题很可能会决定最终什么样的人聚在一起。&lt;/p&gt;
&lt;p&gt;这两个问题的本质，前者是感情，后者是实力，如果两者能达到统一，当然就会形成团队的归属感，团队成员互相之间才能容易平等的相处。可惜，现实往往很残酷。&lt;/p&gt;
&lt;p&gt;人的感情总是很多变，电视小说里面的那种天天拌嘴拆桥还能保持死党关系的朋友真是少的可怜。我所看到的，我的家人、朋友、同事，大家更能记住的是几年前的一次矛盾、互相攀比的妒恨和只谈利益的淡漠，和一个人保持好感情就不错了，要想几个人互相之间都无比和睦，实在有些痴人说梦。&lt;/p&gt;
&lt;p&gt;人或许越年轻越不在意感情纠葛，越年轻的人们越能够没心没肺的黏在一起，而年长之后，多数人似乎都选择记住种种不快，而不是选择忘记。&lt;/p&gt;
&lt;p&gt;没有感情那就只有实力了，可是实力是什么，是每分钟打100个字这种么？不是，是一种不方面直接量化的综合能力。大家不可避免的会进行攀比，会不断在团队之中结成更小的团体。大家就像蒲公英的种子，相聚只是为未来的分开留下伏笔，大家都在为今后的飞翔拼命准备自己的羽翼而已，滋养自己的蒲公英的未来才没人关心呢。&lt;/p&gt;
&lt;p&gt;去思考这些问题真是一件让我身心俱疲的事情。难怪那么多人还是愿意随波逐流，情愿一直盘踞在自己偶然飘落的土壤上不离开，无论土壤是否贫瘠、艰辛。&lt;/p&gt;
&lt;p&gt;可我还不愿这么简单就放弃啊，我也很想和大家一起燃烧自己，一起达到更好啊。为什么，我们这一群人就一定要分开？&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;团队归属感&quot;&gt;&lt;a href=&quot;#团队归属感&quot; class=&quot;headerlink&quot; title=&quot;团队归属感&quot;&gt;&lt;/a&gt;团队归属感&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;想随波逐流的人大概都会梦想拥有一支信得过的可以一起奋斗的团队吧，我觉得这是人之常情。&lt;/p
    
    </summary>
    
      <category term="散文" scheme="http://yunvoo.com/categories/%E6%95%A3%E6%96%87/"/>
    
    
      <category term="团队" scheme="http://yunvoo.com/tags/%E5%9B%A2%E9%98%9F/"/>
    
  </entry>
  
  <entry>
    <title>IPFS 一个新的对等网络媒体协议</title>
    <link href="http://yunvoo.com//blog/2015/10/25/IPFS%20%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84%E5%AF%B9%E7%AD%89%E7%BD%91%E7%BB%9C%E5%AA%92%E4%BD%93%E5%8D%8F%E8%AE%AE.html"/>
    <id>http://yunvoo.com//blog/2015/10/25/IPFS 一个新的对等网络媒体协议.html</id>
    <published>2015-10-24T16:00:00.000Z</published>
    <updated>2016-06-19T10:26:26.377Z</updated>
    
    <content type="html">&lt;h2 id=&quot;IPFS简介&quot;&gt;&lt;a href=&quot;#IPFS简介&quot; class=&quot;headerlink&quot; title=&quot;IPFS简介&quot;&gt;&lt;/a&gt;IPFS简介&lt;/h2&gt;&lt;p&gt;&lt;center&gt;&lt;br&gt;    &lt;p&gt;&lt;img src=&quot;http://7xrzzi.com1.z0.glb.clouddn.com/ipfsIPFS.png&quot; align=&quot;center&quot;&gt;&lt;/p&gt;&lt;br&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;br&gt;    &lt;p&gt;&lt;img src=&quot;http://7xrzzi.com1.z0.glb.clouddn.com/ipfs10.png&quot; align=&quot;center&quot;&gt;&lt;/p&gt;&lt;br&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h1 id=&quot;IPFS-The-InterPlanetary-File-System-是一种新的超媒体分发协议，按内容和身份解决。-IPFS能够完全的分布式应用程序的创建。它的目的是使网络更快，更安全，更开放。IPFS是由IPFS社区和许多贡献者来自开源社区开发的一个开源项目&quot;&gt;&lt;a href=&quot;#IPFS-The-InterPlanetary-File-System-是一种新的超媒体分发协议，按内容和身份解决。-IPFS能够完全的分布式应用程序的创建。它的目的是使网络更快，更安全，更开放。IPFS是由IPFS社区和许多贡献者来自开源社区开发的一个开源项目&quot; class=&quot;headerlink&quot; title=&quot;　　　IPFS(The InterPlanetary File System)是一种新的超媒体分发协议，按内容和身份解决。 IPFS能够完全的分布式应用程序的创建。它的目的是使网络更快，更安全，更开放。IPFS是由IPFS社区和许多贡献者来自开源社区开发的一个开源项目&quot;&gt;&lt;/a&gt;　　　IPFS(The InterPlanetary File System)是一种新的超媒体分发协议，按内容和身份解决。 IPFS能够完全的分布式应用程序的创建。它的目的是使网络更快，更安全，更开放。IPFS是由IPFS社区和许多贡献者来自开源社区开发的一个开源项目&lt;/h1&gt;&lt;h2 id=&quot;IPFS是怎样运行的&quot;&gt;&lt;a href=&quot;#IPFS是怎样运行的&quot; class=&quot;headerlink&quot; title=&quot;IPFS是怎样运行的　&quot;&gt;&lt;/a&gt;IPFS是怎样运行的　&lt;/h2&gt;&lt;p&gt;&lt;center&gt;&lt;br&gt;    &lt;p&gt;&lt;img src=&quot;http://7xrzzi.com1.z0.glb.clouddn.com/ipfs11.png&quot; align=&quot;center&quot;&gt;&lt;/p&gt;&lt;br&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;br&gt;    &lt;p&gt;&lt;img src=&quot;http://7xrzzi.com1.z0.glb.clouddn.com/ipfs12.png&quot; align=&quot;center&quot;&gt;&lt;/p&gt;&lt;br&gt;&lt;/center&gt;&lt;br&gt;　　　IPFS旨在所有的计算设备与相同的文件系统连接一个对等网络的分布是文件系统。在某些方面，IPFS是类似于Web，但IPFS可以被看作一个单独的BitTorrent群，一个Git仓库内的交换对象。换句话说，IPFS提供了一种高通量内容寻址存储模式，与内容寻址链接，IPFS结合了分布式哈希表。IPFS具有无单一故障点，节点并不需要相互信任。&lt;/p&gt;
&lt;h2 id=&quot;下面是我在Linux安装体验了一下IPFS&quot;&gt;&lt;a href=&quot;#下面是我在Linux安装体验了一下IPFS&quot; class=&quot;headerlink&quot; title=&quot;下面是我在Linux安装体验了一下IPFS&quot;&gt;&lt;/a&gt;下面是我在Linux安装体验了一下IPFS&lt;/h2&gt;&lt;p&gt;　　　我将我安装过程分享给下家，感兴趣的话可以体验一下，保持一个好奇心！　我也是查资料看官方文档一步步了解的，希望大家多查查资料！我的是linux 64位的平台，Windows的没有试，感兴趣的可以试一试，效果都是一样的，官方提供的版本各个平台的都有！这是官网：【IPFS】（&lt;a href=&quot;https://ipfs.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://ipfs.io/&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;关键的地方我给大家截图&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.去官网下载需要安装包&lt;a href=&quot;https://ipfs.io/docs/install/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;go-ipfs_v0.3.11_linux-amd64.tar.gz&lt;/a&gt; 进行解压 安装&lt;center&gt;&lt;br&gt;  &lt;p&gt;&lt;img src=&quot;http://7xrzzi.com1.z0.glb.clouddn.com/ipfs1.png&quot; align=&quot;center&quot;&gt;&lt;/p&gt;&lt;br&gt;&lt;/center&gt;&lt;br&gt;&lt;center&gt;&lt;br&gt;  &lt;p&gt;&lt;img src=&quot;http://7xrzzi.com1.z0.glb.clouddn.com/ipfs2.png&quot; align=&quot;center&quot;&gt;&lt;/p&gt;&lt;br&gt;&lt;/center&gt;&lt;/li&gt;
&lt;li&gt;2.安装Go  &lt;a href=&quot;https://golang.org/dl/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; Download Go 1.5.2+&lt;/a&gt;(注意版本 IPFS官方支持的版本 更高的版本暂时不支持！）解压到指定的目录 自己可以定，这里需要用到环境变量的！配置环境变量 编辑文件 vim /etc/profile&lt;br&gt;&lt;center&gt;&lt;br&gt;  &lt;p&gt;&lt;img src=&quot;http://7xrzzi.com1.z0.glb.clouddn.com/ipfs5.png&quot; align=&quot;center&quot;&gt;&lt;/p&gt;&lt;br&gt;&lt;/center&gt;&lt;br&gt;在里面添加：&lt;br&gt;export PATH=$PATH:/usr/local/go/bin&lt;br&gt;export PATH=$PATH:$GOPATH/bin&lt;br&gt;&lt;center&gt;&lt;br&gt;  &lt;p&gt;&lt;img src=&quot;http://7xrzzi.com1.z0.glb.clouddn.com/ipfs4.png&quot; align=&quot;center&quot;&gt;&lt;/p&gt;&lt;br&gt;&lt;/center&gt;&lt;br&gt;这个文件一般是linux系统中存在，是在开机加载系统是或用的登录时执行的一个配置文件，其主要功能类似初始化一些环境变量，定义一些自动执行的功能如果对其进行修改后让其生效的方法执行  &lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;source /etc/profile   &lt;/li&gt;
&lt;li&gt;./etc/profile   &lt;/li&gt;
&lt;li&gt;重启系统，或退出登录后再重新登录&lt;br&gt;查看环境变量是否有错，有错会给你报错的！&lt;center&gt;&lt;br&gt; &lt;p&gt;&lt;img src=&quot;http://7xrzzi.com1.z0.glb.clouddn.com/ipfs6.png&quot; align=&quot;center&quot;&gt;&lt;/p&gt;&lt;br&gt;&lt;/center&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;3.为GOPATH环境变量设置工作空间，可以选择编写一个GO语言的hello world测试一下！非必须！只要一步步来一般情况下不会出错！照着做就行了！&lt;center&gt;&lt;br&gt;  &lt;p&gt;&lt;img src=&quot;http://7xrzzi.com1.z0.glb.clouddn.com/ipfs%E5%B0%8F%E7%A8%8B%E5%BA%8F.png&quot; align=&quot;center&quot;&gt;&lt;/p&gt;&lt;br&gt;&lt;/center&gt;&lt;/li&gt;
&lt;li&gt;4.至此环境搭建完了！详细搭建请参照官网说明吧！ 可以执行 IPFS命令感受一下了！&lt;br&gt;&lt;center&gt;&lt;br&gt;  &lt;p&gt;&lt;img src=&quot;http://7xrzzi.com1.z0.glb.clouddn.com/ipfs7.png&quot; align=&quot;center&quot;&gt;&lt;/p&gt;&lt;br&gt;&lt;/center&gt;&lt;br&gt;&lt;center&gt;&lt;br&gt;  &lt;p&gt;&lt;img src=&quot;http://7xrzzi.com1.z0.glb.clouddn.com/ipfs9.png&quot; align=&quot;center&quot;&gt;&lt;/p&gt;&lt;br&gt;&lt;/center&gt;&lt;br&gt;&lt;strong&gt;更多命令可以到官网资料手册！IPFS我也是最多了解有这么个东西！关于这方面的有兴趣的可以官网&lt;a href=&quot;https://ipfs.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; https://ipfs.io&lt;/a&gt;， github 这是github  &lt;a href=&quot;https://github.com/RichardLitt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; https://github.com/RichardLitt&lt;/a&gt;查相关资料，我也是不懂啊！见谅啦！&lt;/strong&gt;  &lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;IPFS简介&quot;&gt;&lt;a href=&quot;#IPFS简介&quot; class=&quot;headerlink&quot; title=&quot;IPFS简介&quot;&gt;&lt;/a&gt;IPFS简介&lt;/h2&gt;&lt;p&gt;&lt;center&gt;&lt;br&gt;    &lt;p&gt;&lt;img src=&quot;http://7xrzzi.com1.z0.glb
    
    </summary>
    
      <category term="技术" scheme="http://yunvoo.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="IPFS，协议" scheme="http://yunvoo.com/tags/IPFS%EF%BC%8C%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>Death March</title>
    <link href="http://yunvoo.com//blog/2015/10/23/Death.March.html"/>
    <id>http://yunvoo.com//blog/2015/10/23/Death.March.html</id>
    <published>2015-10-22T16:00:00.000Z</published>
    <updated>2016-06-19T14:00:03.277Z</updated>
    
    <content type="html">&lt;h3 id=&quot;首先说明该篇文章来自互联网&quot;&gt;&lt;a href=&quot;#首先说明该篇文章来自互联网&quot; class=&quot;headerlink&quot; title=&quot;首先说明该篇文章来自互联网&quot;&gt;&lt;/a&gt;首先说明该篇文章来自互联网&lt;/h3&gt;&lt;p&gt;该文章是我无意中读到的深有感触就记录下来，DeathMarch 也有其它的含义我有在维基百科读了一篇内容不一样&lt;a href=&quot;https://en.wikipedia.org/wiki/Death_march&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Death March&lt;/a&gt;还有这个&lt;a href=&quot;http://www.cnblogs.com/hzbook/archive/2011/11/14/2248544.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;blog&lt;/a&gt; 以下就是原文:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Death March 在项目管理领域里指的是看不到尽头的项目，在这个项目中的每个人都会最终被整个拖沓的状态磨去意志，只剩每天重复的做一些可有可无的事情。&lt;/p&gt;
&lt;p&gt;Death March 所描述的这种惨状其实每天都可以在身边看到。如果把人生等同于一个项目，那么这个项目本身就很容易满足 Death March 所有条件。&lt;/p&gt;
&lt;p&gt;首先是尽头，极少人知道这个项目的尽头为何。&lt;/p&gt;
&lt;p&gt;当大多数人以为生命还很长而不断挥霍的时候，他们其实已经在 Death March 中磨去了锐气，试图忘记灰色的未来带给他们的恐怖。关键时间点的缺失是 Death March 项目的共同特征，在中国，走出学校之后有多少人能真的去考虑一下未来的时间表呢，恐怕少之又少。活在当下是无脑的幸福，这种做法让不幸不断的发酵、压缩最终集中爆发，在生命的最后一段时间会让人生活在绝望的自责之中。&lt;/p&gt;
&lt;p&gt;其次是目的，生命的意义本身就非常的暧昧不清，这是个无解的谜题。&lt;/p&gt;
&lt;p&gt;人和其他动物一样，都会死亡，也都会惧怕死亡。人与其他动物所不同的是，知性的头脑让这种恐惧变得更加深刻，甚至会在生命还尚处盛年的时候就开始为未来忧郁。因为生命必然有尽头而且意义不明，迈向死亡的倒计时每天奔走不息，人们想要驱散这种恐惧就必须让自己忘记，将自己的时间用一些看似有意义的琐事充斥，生怕自己闲下来胡思乱想。正如处于 Death March 状态的项目总会做一些毫无针对性的任务一样，这种做法就是想驱散负面情绪，而实际意义为零。&lt;/p&gt;
&lt;p&gt;最后是结果，人逃脱不了死亡，处于 Death March 中的项目也逃脱不了戛然而止的命运。&lt;/p&gt;
&lt;p&gt;人总是从年轻到年老，不可复返。当年近迟暮，人所能做的事情慢慢变少，身上的各种不适不断增多，生活质量显著下降。可悲的是，多数人直到最后的尽头都保持着一个人类的头脑，他们会害怕，会因为身体的无能而绝望。其实大脑只是整个身体的一小部分，知性则是大脑中被称作“智脑”的薄薄的一小片区域，“智脑”不能有效控制任何无意识机能，无论是循环系统、消化系统还是肌肉系统，“智脑”总是会在无意识的“旧脑”之后得到消息，要想支配这些系统还必须通过“旧脑”来完成，当“智脑”无法灵活控制身体，知性会慢慢开始崩溃。在这种情况下，人就是 Death Match 项目中的项目经理，面对这种不可控的现状，还不如早些结束更轻松呢。 &lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;首先说明该篇文章来自互联网&quot;&gt;&lt;a href=&quot;#首先说明该篇文章来自互联网&quot; class=&quot;headerlink&quot; title=&quot;首先说明该篇文章来自互联网&quot;&gt;&lt;/a&gt;首先说明该篇文章来自互联网&lt;/h3&gt;&lt;p&gt;该文章是我无意中读到的深有感触就记录下来，Death
    
    </summary>
    
      <category term="散文" scheme="http://yunvoo.com/categories/%E6%95%A3%E6%96%87/"/>
    
    
      <category term="死亡三月" scheme="http://yunvoo.com/tags/%E6%AD%BB%E4%BA%A1%E4%B8%89%E6%9C%88/"/>
    
  </entry>
  
  <entry>
    <title>CEO的能力</title>
    <link href="http://yunvoo.com//blog/2015/10/20/CEO%E7%9A%84%E8%83%BD%E5%8A%9B.html"/>
    <id>http://yunvoo.com//blog/2015/10/20/CEO的能力.html</id>
    <published>2015-10-19T16:00:00.000Z</published>
    <updated>2016-06-19T13:30:21.921Z</updated>
    
    <content type="html">&lt;h2 id=&quot;CEO-能力其一是决断力。&quot;&gt;&lt;a href=&quot;#CEO-能力其一是决断力。&quot; class=&quot;headerlink&quot; title=&quot;CEO 能力其一是决断力。&quot;&gt;&lt;/a&gt;CEO 能力其一是决断力。&lt;/h2&gt;&lt;p&gt;创业似大海航行，陆地往往仅存于心，无人能确保陆地就在前方，也不知这路上是否有暗礁恶浪，数月过后若不达预期，团队内部难免心生迷惘，需要 CEO 做出一些关键决策，坚定前行抑或改弦易张。&lt;/p&gt;
&lt;p&gt;平庸的 CEO 兴许会随波逐流，顺势而为不失一种做法，但这纯拼运气，除非大势颇佳，否则便是慢性自杀；怯懦的 CEO 将关键决策权下放给他人，自己则一心从众，美名曰“民主”，实则缺乏胆识。半吊子的 CEO 会不断做出“关键决策”，每个方向都举棋不定，结果在内耗中错失良机乃至弹尽粮绝而亡。&lt;/p&gt;
&lt;p&gt;既谓之关键决策，必然风险与收益双高，此时必定众说纷纭，无万全之策。有决断力的 CEO 需从所有声音——包括自己心声——中甄别出最值得确信的一个，力排众议并坚决执行。&lt;/p&gt;
&lt;h2 id=&quot;CEO-能力其二是眼光。&quot;&gt;&lt;a href=&quot;#CEO-能力其二是眼光。&quot; class=&quot;headerlink&quot; title=&quot;CEO 能力其二是眼光。&quot;&gt;&lt;/a&gt;CEO 能力其二是眼光。&lt;/h2&gt;&lt;p&gt;创业者所创之业必是他人尚未充分开发之地，或崭新或模糊或凶险。同时，创业过程也需不断适时调整船头，CEO 的眼光可确保方向基本无误。&lt;/p&gt;
&lt;p&gt;眼光犹如视力，可有近视和远视两种毛病。若过于近视，则会增加误判，有大概率迷失方向；若过于远视，则看不清当下忧患，或未捷先死。&lt;/p&gt;
&lt;p&gt;眼光还取决于视野。若终年身藏深谷，往往患有以管窥豹、一目障叶或夜郎自大的毛病，就算视力良好也可能产生严重误判。&lt;/p&gt;
&lt;h2 id=&quot;CEO-能力其三是协调力。&quot;&gt;&lt;a href=&quot;#CEO-能力其三是协调力。&quot; class=&quot;headerlink&quot; title=&quot;CEO 能力其三是协调力。&quot;&gt;&lt;/a&gt;CEO 能力其三是协调力。&lt;/h2&gt;&lt;p&gt;常言道，CEO 乃孤独身，不任人唯亲，也不顾此失彼。团队能成“团”皆因 CEO 撮合，但凡内部因人因事因利产生裂痕，CEO 需有所作为。&lt;/p&gt;
&lt;p&gt;协调力即对人的驾驭力，“与人斗，其乐无穷”。单纯的 CEO 或想以无为治之，以为坦诚相待便可感化众人，却不料反倒积怨，内斗颇多而不自知。虽公司政治不可取，但唯有政治可扼杀政治，CEO 自身需深谙权术且不醉心。&lt;/p&gt;
&lt;p&gt;协调力还体现为管控力，若公司内有失控之处，必然无法恰如其分的协调。CEO 不可能十项全能，必有具体事项委派与人且不过问细节，如何能持续控制局势不被欺瞒，此为艺术而非技术。&lt;/p&gt;
&lt;p&gt;以上三种能力需兼备，方能成为优秀 CEO。人无完人，不求面面俱到，但求三种必备能力皆在常人之上。毕竟 CEO 乃万中挑一之人才，此种期待不应为过。&lt;/p&gt;
&lt;p&gt;如何鉴定这些能力是否超常？去聊，去接触，自然能懂。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;善哉，甄别 CEO 也为一种能力，空谈无用，在现实中感悟吧。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CEO-能力其一是决断力。&quot;&gt;&lt;a href=&quot;#CEO-能力其一是决断力。&quot; class=&quot;headerlink&quot; title=&quot;CEO 能力其一是决断力。&quot;&gt;&lt;/a&gt;CEO 能力其一是决断力。&lt;/h2&gt;&lt;p&gt;创业似大海航行，陆地往往仅存于心，无人能确保陆地就在
    
    </summary>
    
      <category term="散文" scheme="http://yunvoo.com/categories/%E6%95%A3%E6%96%87/"/>
    
    
      <category term="CEO" scheme="http://yunvoo.com/tags/CEO/"/>
    
  </entry>
  
  <entry>
    <title>Linux升级安装GCC</title>
    <link href="http://yunvoo.com//blog/2015/10/16/Linux%E5%8D%87%E7%BA%A7%E5%AE%89%E8%A3%85GCC.html"/>
    <id>http://yunvoo.com//blog/2015/10/16/Linux升级安装GCC.html</id>
    <published>2015-10-15T16:00:00.000Z</published>
    <updated>2016-07-02T03:32:06.960Z</updated>
    
    <content type="html">&lt;h2 id=&quot;linux升级安装GCC&quot;&gt;&lt;a href=&quot;#linux升级安装GCC&quot; class=&quot;headerlink&quot; title=&quot;linux升级安装GCC&quot;&gt;&lt;/a&gt;linux升级安装GCC&lt;/h2&gt;&lt;p&gt;最近装了几个软件，要求gcc的版本高，我的是gcc-4.4.7版本,用的系统是redhat 6.5，无奈就手动升级了gcc&lt;/p&gt;
&lt;h3 id=&quot;下载最新版本的gcc&quot;&gt;&lt;a href=&quot;#下载最新版本的gcc&quot; class=&quot;headerlink&quot; title=&quot;下载最新版本的gcc&quot;&gt;&lt;/a&gt;下载最新版本的gcc&lt;/h3&gt;&lt;p&gt;我选一个gcc-5.4.0 ,不算最新的，差两个版本也是可以的，下面是我找到的两个下载镜像，下载速度还可以，都可以使用：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget http:&lt;span class=&quot;comment&quot;&gt;//gcc.parentingamerica.com/releases/gcc-5.4.0/gcc-5.4.0.tar.gz 或 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wget http:&lt;span class=&quot;comment&quot;&gt;//ftp.tsukuba.wide.ad.jp/software/gcc/releases/gcc-5.4.0/gcc-5.4.0.tar.bz2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 上面两个镜像分别位于加拿大和日本，由于gcc本身比较大（100MB左右），所以下载会需要一些时间。如果下载很慢，也可以到gcc官网查找较快的下载镜像。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;解压下载的文件&quot;&gt;&lt;a href=&quot;#解压下载的文件&quot; class=&quot;headerlink&quot; title=&quot;解压下载的文件&quot;&gt;&lt;/a&gt;解压下载的文件&lt;/h3&gt;&lt;p&gt;gcc安装文件下载完成后，执行以下命令解压文件：&lt;br&gt;tar -zxvf gcc-5.4.0.tar.gz&lt;/p&gt;
&lt;h3 id=&quot;下载gcc-依赖文件和库&quot;&gt;&lt;a href=&quot;#下载gcc-依赖文件和库&quot; class=&quot;headerlink&quot; title=&quot;下载gcc 依赖文件和库&quot;&gt;&lt;/a&gt;下载gcc 依赖文件和库&lt;/h3&gt;&lt;p&gt;解压完成后，执行以下命令进入工作目录&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cd gcc-5.4.0 *&lt;br&gt;执行download_prerequisites脚本，下载gcc依赖文件和库：&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;./contrib/download_prerequisites&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;download_prerequisites脚本，会下载安装gcc所需的mpfr、gmp和mpc文件。&lt;/p&gt;
&lt;h3 id=&quot;配置安装gcc&quot;&gt;&lt;a href=&quot;#配置安装gcc&quot; class=&quot;headerlink&quot; title=&quot;配置安装gcc&quot;&gt;&lt;/a&gt;配置安装gcc&lt;/h3&gt;&lt;p&gt;建立一个输出目录，编译时所有生成的中间文件都放到该目录下：&lt;br&gt;mkdir gcc-tmp&lt;br&gt;工作目录切换至输出目录，并在其中执行配置和安装：&lt;br&gt;cd gcc-tmp&lt;br&gt;执行configure配置安装文件：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;../configure --enable-checking=release --enable-languages=c,c++ --disable-multilib&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;配置完成后，执行以下命令，编译gcc：&lt;br&gt;&lt;strong&gt; make &lt;/strong&gt;&lt;br&gt;&lt;strong&gt; 注意：编译gcc时间较长，我用了近三个小才编译完成。&lt;/strong&gt;&lt;br&gt;编译完成后，安装gcc：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;makeinstall&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;安装完成后还需要替换系统默认的gcc，执行以下命令，查找5.4版本的安装文件：&lt;br&gt;ls /usr/local/bin | grep gcc&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gcc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gcc-ar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gcc-nm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gcc-ranlib&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;x86_64-unknown-linux-gnu-gcc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;x86_64-unknown-linux-gnu-gcc&lt;span class=&quot;number&quot;&gt;-5.4&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;    &lt;span class=&quot;comment&quot;&gt;//就是这个&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;x86_64-unknown-linux-gnu-gcc-ar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;x86_64-unknown-linux-gnu-gcc-nm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;x86_64-unknown-linux-gnu-gcc-ranlib&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;执行升级命令：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/usr/sbin/update-alternatives --install  /usr/bin/gcc gcc /usr/local/bin/x86_64-unknown-linux-gnu-gcc&lt;span class=&quot;number&quot;&gt;-5.4&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;54&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;验证安装&quot;&gt;&lt;a href=&quot;#验证安装&quot; class=&quot;headerlink&quot; title=&quot;验证安装&quot;&gt;&lt;/a&gt;验证安装&lt;/h3&gt;&lt;p&gt;执行以下命令查看gcc版本：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gcc -v&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;执行以下命令查看g++版本&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;g++ -v&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;或使用which gcc查看gcc安装目录，在安装目录下执行-v命令。例如，安装目录为/usr/local/bin/gcc：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/usr/local/bin/gcc -v&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果输出中有类似以下行，说明安装成功：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gcc 版本 &lt;span class=&quot;number&quot;&gt;5.4&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;(GCC)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;linux升级安装GCC&quot;&gt;&lt;a href=&quot;#linux升级安装GCC&quot; class=&quot;headerlink&quot; title=&quot;linux升级安装GCC&quot;&gt;&lt;/a&gt;linux升级安装GCC&lt;/h2&gt;&lt;p&gt;最近装了几个软件，要求gcc的版本高，我的是gcc-4.4.
    
    </summary>
    
      <category term="linux" scheme="http://yunvoo.com/categories/linux/"/>
    
    
      <category term="GCC" scheme="http://yunvoo.com/tags/GCC/"/>
    
  </entry>
  
  <entry>
    <title>linux进程线程以及通信IPC</title>
    <link href="http://yunvoo.com//blog/2015/10/06/07-linux%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E4%BB%A5%E5%8F%8A%E9%80%9A%E4%BF%A1IPC.html"/>
    <id>http://yunvoo.com//blog/2015/10/06/07-linux进程线程以及通信IPC.html</id>
    <published>2015-10-05T16:00:00.000Z</published>
    <updated>2016-06-26T10:16:41.572Z</updated>
    
    <content type="html">&lt;h3 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;1、任务：&lt;br&gt;任务是一个逻辑概念,指由一个软件完成的任务，或者是一系列共同达到某一目的的操作。&lt;/li&gt;
&lt;li&gt;2、进程：&lt;br&gt;进程是指一个具有独立功能的程序在某个数据集上的一次动态执行过程，它是系统进行资源分配和调度的最小单元。从内核的观点看，进程的目的就是担当分配系统资源（CPU时间、内存等）的基本单位。&lt;/li&gt;
&lt;li&gt;3、线程：&lt;br&gt;是进程的一个执行流，是CPU调度和分派的基本单位，它是比进程更小的能独立运行的基本单位。一个进程由几个线程组成（拥有很多相对独立的执行流的用户程序共享应用程序的大部分数据结构），线程与同属一个进程的其他的线程共享进程所拥有的全部资源。&lt;br&gt;“进程——资源分配的最小单位，线程——程序执行的最小单位”&lt;br&gt;&lt;strong&gt; 任务、进程和线程之间的关系如图所示 &lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://7xrzzi.com1.z0.glb.clouddn.com/155237936.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;li&gt;4、关系与区别：&lt;br&gt; 进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，进程具有并发性、动态性、交互性、独立性和异步性等主要特性。而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程没有单独的地址空间，一个线程死掉就等于整个进程死掉，所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些。但对于一些要求同时进行并且又要共享某些变量的并发操作，只能用线程，不能用进程。&lt;/li&gt;
&lt;li&gt;总的来说就是：进程有独立的地址空间，线程没有单独的地址空间（同一进程内的线程共享进程的地址空间）。（下面的内容摘自Linux下的多线程编程）&lt;em&gt;&lt;br&gt;使用多线程的理由之一是和进程相比，它是一种非常”节俭”的多任务操作方式。我们知道，在Linux系统下，启动一个新的进程必须分配给它独立的地址空间，建立众多的数据表来维护它的代码段、堆栈段和数据段，这是一种”昂贵”的多任务工作方式。而运行于一个进程中的多个线程，它们彼此之间使用相同的地址空间，共享大部分数据，启动一个线程所花费的空间远远小于启动一个进程所花费的空间，而且，线程间彼此切换所需的时间也远远小于进程间切换所需要的时间。据统计，总的说来，一个进程的开销大约是一个线程开销的30倍左右，当然，在具体的系统上，这个数据可能会有较大的区别。&lt;br&gt;使用多线程的理由之二是线程间方便的通信机制。对不同进程来说，它们具有独立的数据空间，要进行数据的传递只能通过通信的方式进行，这种方式不仅费时，而且很不方便。线程则不然，由于同一进程下的线程之间共享数据空间，所以一个线程的数据可以直接为其它线程所用，这不仅快捷，而且方便。当然，数据的共享也带来其他一些问题，有的变量不能同时被两个线程所修改，有的子程序中声明为static的数据更有可能给多线程程序带来灾难性的打击，这些正是编写多线程程序时最需要注意的地方。&lt;br&gt;除了以上所说的优点外，不和进程比较，多线程程序作为一种多任务、并发的工作方式，当然有以下的优点：&lt;br&gt;提高应用程序响应。这对图形界面的程序尤其有意义，当一个操作耗时很长时，整个系统都会等待这个操作，此时程序不会响应键盘、鼠标、菜单的操作，而使用多线程技术，将耗时长的操作（time consuming）置于一个新的线程，可以避免这种尴尬的情况。&lt;br&gt;使多CPU系统更加有效。操作系统会保证当线程数不大于CPU数目时，不同的线程运行于不同的CPU上。&lt;br&gt;改善程序结构。一个既长又复杂的进程可以考虑分为多个线程，成为几个独立或半独立的运行部分，这样的程序会利于理解和修改。&lt;br&gt;&lt;em&gt;* 从函数调用上来说，进程创建使用fork()操作；线程创建使用clone()操作。&lt;/em&gt;&lt;/em&gt;&lt;h2 id=&quot;进程具体介绍&quot;&gt;&lt;a href=&quot;#进程具体介绍&quot; class=&quot;headerlink&quot; title=&quot;进程具体介绍&quot;&gt;&lt;/a&gt;进程具体介绍&lt;/h2&gt;&lt;h3 id=&quot;Linux下的进程结构&quot;&gt;&lt;a href=&quot;#Linux下的进程结构&quot; class=&quot;headerlink&quot; title=&quot;Linux下的进程结构&quot;&gt;&lt;/a&gt;Linux下的进程结构&lt;/h3&gt;进程不但包括程序的指令和数据，而且包括程序计数器和处理器的所有寄存器及存储临时数据的进程堆栈，因此，正在执行的进程包括处理器当前的一切活动。&lt;br&gt;因为linux是一个多任务多进程的操作系统，所以其他的进程必须等到系统将处理器使用权分配给自己之后才能运行。当正在运行的进程等待其他的系统资源时，linux内核将取得处理器的控制权，并将处理器分配给其他正在等待的进程，他按照内核中的调度算法决定将处理器分配给哪一个进程，也就是说，内核不会让处理器闲着。&lt;br&gt;内核将所有进程存放在双向循环链表（进程链表）中，其中链表的头是 init_task 描述符。链表的每一项都是类型为 task_struct，称为进程描述符的结构，该结构包含了一个进程相关的所有信息，定义在&lt;include linux=&quot;&quot; sched.h=&quot;&quot;&gt;文件中。task_struct内核结构比较大，它能完整的描述一个进程，如进程的状态、进程的基本信息、进程标识符、内存相关信息、父进程相关信息、与进程相关的终端信息、当前工作目录、打开的文件信息、所接收的信号信息等。&lt;h3 id=&quot;进程状态&quot;&gt;&lt;a href=&quot;#进程状态&quot; class=&quot;headerlink&quot; title=&quot;进程状态&quot;&gt;&lt;/a&gt;进程状态&lt;/h3&gt;&lt;/include&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;运行状态&lt;/code&gt;（TASK_RUNNING）:进程当前正在运行，或者正在运行队列中等待调度。&lt;/li&gt;
&lt;li&gt;可中断的阻塞状态（TASK_INTERRUPTIBLE）：进程处于阻塞(睡眠)状态，正在等待某些事件发生或能够占用某些资源。处在这种状态下的进程可以被信号中断。接收到信号或被显式的唤醒呼叫（如调用 wake_up 系列宏:wake_up、wake_up_interruptible等）唤醒之后，进程将转变TASK_RUNNING 状态。&lt;/li&gt;
&lt;li&gt;不可中断的阻塞状态（TASK_UNINTERRUPTIBLE）:此进程状态类似于可中断的阻塞状态（TASK_INTERRUPTIBLE），只是它不会处理信号，把信号传递到这种状态下的进程不能改变它的状态。在一些特定的情况下（进程必须等待，直到某些不能被中断的事件发生），这种状态是很有用的。只有在它所等待的事件发生时，进程才被显示的唤醒呼叫唤醒。&lt;/li&gt;
&lt;li&gt;可终止的阻塞状态（TASK_KILLABLE）:该状态的运行机制类似于TASK_UNINTERRUPTIBLE，只不过处在该状态下的进程可以响应致命信号。它可以替代有效但可能无法终止的不可中断的阻塞状态（TASK_UNINTERRUPTIBLE）,以及易于唤醒但安全性欠佳的可中断的阻塞状态TASK_INTERRUPTIBLE）。&lt;/li&gt;
&lt;li&gt;暂停状态（TASK_STOPPED）:进程的执行被暂停，当进程收到 SIGSTOP、SIGSTP、SIGTTIN、SIGTTOU等信号时，就会进入暂停状态。&lt;/li&gt;
&lt;li&gt;跟踪状态（TASK_TRACED）:进程的执行被调试器暂停。当一个进程被另一个监控时（如调试器使用ptrace()系统调用监控测试程序），任何信号都可以把这个进程置于跟踪状态。&lt;/li&gt;
&lt;li&gt;僵尸状态（EXIT_ZOMBIE）:进程运行结束，&lt;code&gt;父进程&lt;/code&gt;尚未使用 wait 函数族(如调用 waitpid()函数)等系统调用来“收尸”，即等待父进程销毁它。处在该状态下的进程“尸体”已经放弃了几乎所有的内存空间，没有任何可执行代码，也不能被调度，仅仅在进程列表中保留一个位置，记载该进程的推出状态等信息供其他进程收集。&lt;/li&gt;
&lt;li&gt;僵尸撤销状态（EXIT_DEAD）:这是最终状态，父进程调用&lt;code&gt;wait&lt;/code&gt; 函数族“收尸”后，进程彻底由系统删除。&lt;br&gt;&lt;strong&gt; 它们之间的转换关系如图 &lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://7xrzzi.com1.z0.glb.clouddn.com/161330655.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;li&gt;进程可以使用 set_task_state 和 set_current_state 宏来改变指定进程的状态信息和当前进程的状态.&lt;br&gt;Linux内核通过唯一的进程标识符 PID 来标识每个进程(就和文件描述符一样)。PID存放在进程描述符的 pid 字段中，新创建的 PID 通常是前一个进程的 PID 加1，不过PID的值有上限（最大值=PID_MAX_DEFAULT-1，通常为32767），读者可以查看/proc/sys/kernel/pid_max 来确定该系统的进程数上限。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当系统启动后，内核通常作为某一个进程的代表。一个指向&lt;code&gt;task_struct&lt;/code&gt;的宏current用来记录正在运行的进程。current经常作为进程描述符结构指针的形式出现在内核代码中，例如，current-&amp;gt;pid 表示处理器正在执行的进程的PID。当系统需要查看所有的进程时，则调用for_each_process()宏，这将比系统搜索数组的速度要快的多。&lt;/p&gt;
&lt;p&gt;在Linux中获得当前&lt;code&gt;进程号&lt;/code&gt;的（PID）和父进程号&lt;code&gt;（PPID）&lt;/code&gt;的系统调用函数分别为getpid() 和 getppid()&lt;/p&gt;
&lt;h3 id=&quot;进程的创建、执行、终止&quot;&gt;&lt;a href=&quot;#进程的创建、执行、终止&quot; class=&quot;headerlink&quot; title=&quot;进程的创建、执行、终止&quot;&gt;&lt;/a&gt;进程的创建、执行、终止&lt;/h3&gt;&lt;p&gt;&lt;strong&gt; （1）进程的创建和执行 &lt;/strong&gt;&lt;br&gt;咱们首先得知道啥是创建，啥是执行哈！我刚开始看的时候没懂。创建进程就是产生一个新的进程，这个大家都知道。而进程的执行，前边讲进程的的定义的时候，就说了正在运行的子任务，说白了，进程执行也就是让产生的这个进程干点什么事，别占着那啥不拉那啥。&lt;br&gt;许多操作系统提供的都是产生进程的机制，也就是说，首先在新的地址空间里创建进程、读入可执行文件，最后再开始执行。Linux 中进程的创建很特别，它把上述的步骤分解到两个单独的函数中去执行：fork()函数和exec函数族。首先，fork()函数通过复制当前进程创建一个子进程(注意此时资源还没有被复制过来，去了解一下写时复制页技术吧)，子进程于父进程的区别仅仅在于不同的PID、PPID和某些资源及统计量。exec函数族负责读取可执行文件并将其载入地址空间开始运行。&lt;br&gt;&lt;strong&gt; 进程的终止 &lt;/strong&gt;&lt;br&gt;进程终结也需要很多繁琐的工作，系统必须保证回收进程所占用的资源，并通知父进程。Linux首先把终止的进程设置为僵尸状态，这时，进程无法投入运行，它的存在只为父进程提供信息，申请死亡。父进程得到信息后，开始调用 wait 函数族，最后终止子进程，子进程占用的所有资源被全部释放。&lt;/p&gt;
&lt;h3 id=&quot;进程的内存结构&quot;&gt;&lt;a href=&quot;#进程的内存结构&quot; class=&quot;headerlink&quot; title=&quot;进程的内存结构&quot;&gt;&lt;/a&gt;进程的内存结构&lt;/h3&gt;&lt;p&gt;Linux操作系统采用虚拟内存管理技术，使得每个进程都有各自互不干涉的进程地址空间。该地址空间是大小为 4GB的线性虚拟空间，用户所看到和接触到的都是该虚拟地址，无法看到实际的物理内存地址。利用这种虚拟地址不但能起到保护操作系统的效果（用户不能直接访问物理地址），而且，更重要的是，用户程序可以使用比实际物理内存更大的地址空间。&lt;br&gt;4GB的进程地址空间会被分成两个部分：用户空间与内核空间。用户地址空间是从0到3GB(0xC000 0000),内核地址空间占据3GB到4GB。用户进程通常情况下只能访问用户空间的虚拟地址，不能访问内核空间的虚拟地址。只有用户进程使用系统调用（代表用户进程在内核态执行）时可以访问到内核空间。每当进程切换时，用户空间就跟着变化;而内核空间由内核负责映射，它不会跟着进程改变，是固定的。内核空间地址有自己对应的页表，用户进程各自有不同的页表。每个进程的用户空间都是完全独立、互不相干的。进程的虚拟内存空间，其中用户空间包括以下几个功能区域：&lt;br&gt;&lt;img src=&quot;http://7xrzzi.com1.z0.glb.clouddn.com/164731554.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只读段: 包含程序代码(.init和.text)和只读数据(.rodata)。&lt;/li&gt;
&lt;li&gt;数据段: 存放的是全局变量和静态变量。其中可读可写数据段(.data)存放已初始化的全局变量和静态变量，BSS数据段(.bss)存放未初始化的全局变量和静态变量。&lt;/li&gt;
&lt;li&gt;堆: 由系统自动分配释放，存放函数的参数值、局部变量的值、返回地址等。&lt;/li&gt;
&lt;li&gt;堆栈: 存放动态分配的数据，一般由程序员动态分配和释放。若程序员不释放，程序结束时可能由操作系统回收。&lt;/li&gt;
&lt;li&gt;共享库的内存映射区域: 这是Linux动态链接器和其他共享代码库代码的映射区域。&lt;br&gt;&lt;strong&gt; 由于在Linux系统中每一个进程都会有/proc文件系统下与之对应的一个目录（如将init进程的相关信息在/proc/1 目录下的文件中描述），因此通过&lt;code&gt;proc&lt;/code&gt; 文件系统可以查看某个进程的地址空间的映射情况。例如，运行一个应用程序,如果它的进程号为13703,则输入“ cat /proc/13703/maps”命令，可以查看该进程的内存映射情况。&lt;/strong&gt;&lt;h2 id=&quot;线程介绍&quot;&gt;&lt;a href=&quot;#线程介绍&quot; class=&quot;headerlink&quot; title=&quot;线程介绍&quot;&gt;&lt;/a&gt;线程介绍&lt;/h2&gt;前面已经讲到，进程是系统中程序执行和资源分配的基本单位。每个进程都拥有自己的数据段、代码段和堆栈段，这就造成了进程在进行切换等动作时需要较复杂的上下文切换等动作。为了进一步减少处理机的空闲时间，支持多处理器及减少上下文切换开销，进程在演化中出现了另一个概念—线程。它是进程内独立的一条运行路线，是处理器调度的最小单元，也可以称为轻量级线程。线程可以对进程的内存空间和资源分配进行访问，并与同一进程中的其他线程共享。因此，线程的上下文切换的开销比创建进程小得多。&lt;br&gt;一个进程可以拥有多个线程，每个线程必须有一个父进程。线程不拥有系统资源，它只具有运行时所必须的一些数据结构，如堆栈/寄存器与线程控制块(TCB)，线程与其父进程的其他线程共享该进程所拥有的全部资源。要注意的是，由于线程共享了进程的资源和地址空间，因此，任何线程对系统资源的操作都会给其他进程带来影响。由此可知，多线程中的同步是一个非常重要的问题。在多线程系统中，进程与线程的关系如图&lt;br&gt;&lt;img src=&quot;http://7xrzzi.com1.z0.glb.clouddn.com/165436586.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;strong&gt; 在Linux系统中，线程分为3种：①用户线程 ②轻量级线程 ③内核线程 &lt;/strong&gt;&lt;br&gt;&lt;strong&gt; 函数介绍
&lt;/strong&gt; fork()函数&lt;strong&gt;&lt;br&gt;在 Linux 中创建一个新进程的唯一方法是使用fork()函数。fork()函数是 Linux 系统中一个非常重要的函数，和咱们以前遇到过的函数由一些区别，因为它看起来执行一次却返回两个值，这又作何解释？
&lt;/strong&gt;函数说明:**&lt;br&gt;fork()函数用于从已存在的一个进程中创建一个新的进程，新进程称为子进程，而原进程称为父进程。使用fork()函数得到的子进程是父进程的一个复制品，它从父进程处继承了整个进程的地址空间，包括进程上下文、代码段、进程堆栈、内存信息、打开的文件描述符、信号控制设定、进程优先级、进程组号、当前工作目录、根目录、资源限制和控制终端等，而子进程所独有的只有它的进程号、资源使用和计时器等。&lt;br&gt;因为子进程几乎是父进程的完全复制，所以父子进程会运行同一个程序。这就需要用一种方式来区分它们，并使它们照此运行，否则，这两个进程不可能做不同的事。&lt;br&gt;实际上是在父进程中执行fork()函数时，父进程会复制出一个子进程，而且父子进程的代码从fork()函数的返回开始分别在两个地址空间中同时运行，从而使两个进程分别获得其所属fork()函数的返回值，其中在父进程中的返回值是子进程的进程号，而在子进程中返回0。因此，可以通过返回值来判定该进程是父进程还是子进程。&lt;br&gt;同时可以看出，使用&lt;code&gt;fork()函数&lt;/code&gt;的代价是很大的，它复制了父进程中的代码段、数据段和堆栈段里的大部分内容，使得 fork()函数的系统开销比较大，而且执行速度页不是很快。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;函数语法&lt;/strong&gt;&lt;br&gt;下表列出了 fork() 函数的语法要点&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//所需头文件 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//提供类型pid_t的定义&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//函数原型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;pid_t&lt;/span&gt; fork(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//函数返回值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;: 子进程&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;子进程PID（大于&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;的整数):父进程&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;: 出错&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; exec函数族 &lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;函数族说明 &lt;em&gt;&lt;br&gt;fork() 函数用于创建一个新的子进程，该子进程几乎复制了父进程的全部内容，但是，这个新创建的子进程如何执行呢？exec 函数族就提供了一个在进程中启动另一个程序执行的方法。它可以根据指定的文件名或目录名找到可执行文件，并用它来取代原调用进程的数据段、代码段和堆栈段，在执行完之后，原调用进程的内容除了进程号外，其他全部被新的进程替换了。另外，这里的可执行文件既可以是二进制文件，也可以是Linux下任何可执行的脚本文件。&lt;br&gt;&lt;em&gt;* 在 Linux 中使用exec函数族主要有两种情况：&lt;/em&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;当进程认为自己不能再为系统和用户做出任何贡献时，就可以调用 exec 函数族中的任意一个函数让自己重生。、&lt;/li&gt;
&lt;li&gt;如果一个进程想执行另一个程序，那么它就可以调用 fork() 函数新建一个进程，然后调用 exec 函数族中的任意一个函数，这样看起来就像通过执行应用程序而产生了一个新进程（这种情况非常普遍）。&lt;br&gt;&lt;strong&gt; 函数族语法 &lt;/strong&gt;&lt;br&gt;实际上，在Linux中并没有exec()函数，而是由6个以 exec 开头的函数，它们之间的语法有细微差别。下表列出了 exec 函数族的6个成员函数的语法：&lt;br&gt;&lt;img src=&quot;http://7xrzzi.com1.z0.glb.clouddn.com/182815931.jpg&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;li&gt;查找方式：表1中的前4个函数的查找方式都是完整的文件目录路径，而最后两个函数（也就是以 p 结尾的两个函数）可以只给出文件名，系统就会自动按照环境变量“$PATH” 所指定的路径进行查找。&lt;/li&gt;
&lt;li&gt;参数传递方式：exec函数族的参数传递有两种：一种是逐个列举的方式，而另一种则是将所有参数整体构造指针数组传递。在这里是以函数名的第5位字母来区分的，字母为 “l”(list)的表示逐个列举参数的方式，其语法为const char &lt;em&gt;arg;字母为“v”(vector)的表示将所有参数整体构造指针数组传递，其语法为 char &lt;/em&gt;const argv[]。这里的参数实际上就是用户在使用这个可执行文件时所需的全部命令选项字符串（包括该可执行程序命令本身）。要注意的是，这些参数必须以NULL结束。&lt;/li&gt;
&lt;li&gt;环境变量： exec函数族可以默认系统的环境变量，也可以传入指定的环境变量。这里以 “e”(environment)结尾的两个函数 execle()和 execve()就可以在 envp[]中指定当前进程所使用的环境变量。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;exit()和exit()函数&lt;/strong&gt;&lt;br&gt;创建进程使用fork()函数，执行进程使用exec函数族，终止进程则使用exit()和_exit()函数。当进程执行到exit()或_exit()函数时，进程会无条件的停止剩下的所有操作，清除各种数据结构，并终止本进程的运行。但是，这两个函数还是有区别的，其调用过程如图&lt;br&gt;&lt;img src=&quot;http://7xrzzi.com1.z0.glb.clouddn.com/183055655.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;可以看出，&lt;code&gt;_exit()函数&lt;/code&gt;的作用是：直接使进程停止运行，清除其使用的内存空间，并清除其在内核中的各种数据结构；而exit()函数则在这些基础上做了一些包装，在执行退出之前加了若干道工序。exit()函数和_exit()函数的最大区别就在于exit()函数在终止当前进程之前要检查该进程打开过哪些文件，把文件缓冲区中的内容写回文件，也就是图1中的“清理I/O缓冲”一项。&lt;/p&gt;
&lt;p&gt;在Linux的标准函数库中，有一种被称作“缓冲I/O（buffered I/O）”的操作，其特征就是对应每一个打开的文件，在内存中都有一片缓冲区。&lt;/p&gt;
&lt;p&gt;每次读文件时，会连续读出若干条记录，这样在下次读文件时就可以直接从内存的缓冲区中读取;同样，每次写文件时，也仅仅是写入内存中的缓冲区，等满足了一定的条件（如达到一定数量或遇到特定字符等，最典型的就是咱们的vim中使用的:w命令），再将缓冲区中的内容一次性写入文件。&lt;/p&gt;
&lt;p&gt;这种技术大大增加了文件读写的速度，但也给咱们的编程带来了一些麻烦。比如有些数据你认为已经被写入到文件中，实际上因为没有满足特定的条件，它们还只是被保存在缓冲区内，这时用_exit()函数直接将进程关闭掉，缓冲区中的数据就会丢失。因此，若想保证数据的完整性，最好使用exit()函数。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;1、任务：&lt;br&gt;任务是一个逻辑概念,指由一个软件完成的任务，或者是一系列共同达到某一目的的操作。&lt;/li&gt;
&lt;
    
    </summary>
    
      <category term="linux" scheme="http://yunvoo.com/categories/linux/"/>
    
    
      <category term="IPC" scheme="http://yunvoo.com/tags/IPC/"/>
    
  </entry>
  
  <entry>
    <title>使用getsockname和getpeername函数</title>
    <link href="http://yunvoo.com//blog/2015/10/05/%E4%BD%BF%E7%94%A8getsockname%E5%92%8Cgetpeername%E5%87%BD%E6%95%B0.html"/>
    <id>http://yunvoo.com//blog/2015/10/05/使用getsockname和getpeername函数.html</id>
    <published>2015-10-04T16:00:00.000Z</published>
    <updated>2016-06-26T05:37:04.855Z</updated>
    
    <content type="html">&lt;h2 id=&quot;getsockname和getpeername函数&quot;&gt;&lt;a href=&quot;#getsockname和getpeername函数&quot; class=&quot;headerlink&quot; title=&quot;getsockname和getpeername函数&quot;&gt;&lt;/a&gt;getsockname和getpeername函数&lt;/h2&gt;&lt;p&gt;&lt;em&gt;getsockname函数用于获取与某个套接字关联的本地协议地址 &lt;/em&gt;&lt;br&gt;&lt;em&gt;getpeername函数用于获取与某个套接字关联的外地协议地址&lt;/em&gt;&lt;br&gt;定义如下：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;sys/socket.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getsockname&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; sockfd, &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sockaddr *localaddr, &lt;span class=&quot;keyword&quot;&gt;socklen_t&lt;/span&gt; *addrlen)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getpeername&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; sockfd, &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sockaddr *peeraddr, &lt;span class=&quot;keyword&quot;&gt;socklen_t&lt;/span&gt; *addrlen)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;对于这两个函数，如果函数调用成功，则返回0，如果调用出错，则返回-1。&lt;br&gt;使用这两个函数，我们可以通过套接字描述符来获取自己的&lt;code&gt;IP地址&lt;/code&gt;和&lt;code&gt;连接对端的IP地址&lt;/code&gt;，如在未调用&lt;code&gt;bind函数&lt;/code&gt;的&lt;code&gt;TCP客户端&lt;/code&gt;程序上，可以通过调用getsockname()函数获取由内核赋予该连接的本地IP地址和&lt;code&gt;本地端口号&lt;/code&gt;，还可以在TCP的服务器端accept成功后，通过&lt;code&gt;getpeername()函数&lt;/code&gt;来获取当前连接的客户端的&lt;code&gt;IP地址和端口号&lt;/code&gt;。&lt;br&gt;如下面的客户端-服务器程序：&lt;br&gt;服务器端代码&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*服务器端*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; MAXLINE 4096&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; PORT 6563&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; LISTENQ 1024&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;sys/socket.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;netinet/in.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;arpa/inet.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; listenfd, connfd;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sockaddr_in servaddr;&lt;span class=&quot;comment&quot;&gt;//服务器绑定的地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sockaddr_in listendAddr, connectedAddr, peerAddr;&lt;span class=&quot;comment&quot;&gt;//分别表示监听的地址，连接的本地地址，连接的对端地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; listendAddrLen, connectedAddrLen, peerLen;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; ipAddr[INET_ADDRSTRLEN];&lt;span class=&quot;comment&quot;&gt;//保存点分十进制的地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    listenfd = socket(AF_INET, SOCK_STREAM, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;memset&lt;/span&gt;(&amp;amp;servaddr, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(servaddr));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    servaddr.sin_family = AF_INET;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    servaddr.sin_addr.s_addr = htonl(INADDR_ANY);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    servaddr.sin_port = htons(PORT);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bind(listenfd, (&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sockaddr*)&amp;amp;servaddr, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(servaddr));&lt;span class=&quot;comment&quot;&gt;//服务器端绑定地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    listen(listenfd, LISTENQ);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    listendAddrLen = &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(listendAddr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    getsockname(listenfd, (&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sockaddr *)&amp;amp;listendAddr, &amp;amp;listendAddrLen);&lt;span class=&quot;comment&quot;&gt;//获取监听的地址和端口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;listen address = %s:%d\n&quot;&lt;/span&gt;, inet_ntoa(listendAddr.sin_addr), ntohs(listendAddr.sin_port));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        connfd = accept(listenfd, (&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sockaddr *)&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        connectedAddrLen = &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(connectedAddr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        getsockname(connfd, (&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sockaddr *)&amp;amp;connectedAddr, &amp;amp;connectedAddrLen);&lt;span class=&quot;comment&quot;&gt;//获取connfd表示的连接上的本地地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;connected server address = %s:%d\n&quot;&lt;/span&gt;, inet_ntoa(connectedAddr.sin_addr), ntohs(connectedAddr.sin_port));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        getpeername(connfd, (&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sockaddr *)&amp;amp;peerAddr, &amp;amp;peerLen); &lt;span class=&quot;comment&quot;&gt;//获取connfd表示的连接上的对端地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;connected peer address = %s:%d\n&quot;&lt;/span&gt;, inet_ntop(AF_INET, &amp;amp;peerAddr.sin_addr, ipAddr, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(ipAddr)), ntohs(peerAddr.sin_port));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面的代码中，在调用&lt;code&gt;listen函数&lt;/code&gt;之后就获取监听套接字描述符对应的本地地址，在accept()函数后，由于accept返回了一个套接字描述符&lt;code&gt;connfd&lt;/code&gt;用于表示该连接，所以可以对这个connfd调用&lt;code&gt;getsockname函数&lt;/code&gt;和&lt;code&gt;getpeername函数&lt;/code&gt;，分别获取内核赋予该连接的本地IP地址和连接的对端地址。&lt;br&gt;客户端代码&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*客户端*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; PORT 6563&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;sys/socket.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;netinet/in.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;arpa/inet.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; **argv)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sockaddr_in servaddr;&lt;span class=&quot;comment&quot;&gt;//服务器端地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sockaddr_in clientAddr;&lt;span class=&quot;comment&quot;&gt;//客户端地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; sockfd; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; clientAddrLen = &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(clientAddr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; ipAddress[INET_ADDRSTRLEN];&lt;span class=&quot;comment&quot;&gt;//保存点分十进制的ip地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(argc &amp;lt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;parameter error&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sockfd = socket(AF_INET, SOCK_STREAM, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;memset&lt;/span&gt;(&amp;amp;servaddr, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(servaddr));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    servaddr.sin_family = AF_INET;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    servaddr.sin_port = htons(PORT);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(inet_pton(AF_INET, argv[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], &amp;amp;servaddr.sin_addr) &amp;lt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;server address error\n&quot;&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//地址参数不合法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    connect(sockfd, (&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sockaddr *)&amp;amp;servaddr, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(servaddr));&lt;span class=&quot;comment&quot;&gt;//向服务器端发起连接请求&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    getsockname(sockfd, (&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sockaddr*)&amp;amp;clientAddr, &amp;amp;clientAddrLen);&lt;span class=&quot;comment&quot;&gt;//获取sockfd表示的连接上的本地地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;client:client ddress = %s:%d\n&quot;&lt;/span&gt;, inet_ntop(AF_INET, &amp;amp;clientAddr.sin_addr, ipAddress, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(ipAddress)), ntohs(clientAddr.sin_port));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在客户端的代码中，调用connect函数后，即可调用getsockname来获连接上的本地地址。&lt;br&gt;代码的运行结果如下：&lt;br&gt;服务端端输出&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;listen address = &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6563&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;connected server address = &lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6563&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;connected peer address = &lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;37511&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 客户端输出 &lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;client:client address = &lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;37511&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;从上面的代码中可以看到，服务器端&lt;code&gt;listenfd&lt;/code&gt;套接字描述符对应的地址即为绑定的通配IP地址和指定的端口，而&lt;code&gt;connfd套接字&lt;/code&gt;描述符对应的连接的服务器端的地址为&lt;code&gt;内核&lt;/code&gt;赋予的&lt;code&gt;地址&lt;/code&gt;和&lt;code&gt;用户指定的端口&lt;/code&gt;。&lt;br&gt;上面的客户端与服务器端的代码中使用了函数inet_ntoa，inet_pton对32位的地址进行转换，其中inet_ntoa是较老的函数，与它一起的还有&lt;code&gt;函数inet_addr和inet_ntoa&lt;/code&gt;，这三个函数的定义如下：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;arpa/inet.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;inet_aton&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *strptr, &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; in_addr *addrptr)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;in_addr_t&lt;/span&gt; inet_addr(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *strptr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;inet_ntoa&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; in_addr inaddr)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;inet_aton&lt;/code&gt;与&lt;code&gt;inet_addr&lt;/code&gt;函数的功能类似，都是将点分十进制的字符串表示的IP地址转换成32位的网络字节序的IPv4地址。&lt;br&gt;inet_ntoa函数将32位的网络字节序的IPv4地址转换成点分十进制的字符串表示的IP地址，inet_addr函数已被废弃，并且这三个函数只针对IPv4地址有效，在点分十进制数串和32位的网络字节序二进制值间进行转换，如果要对于IPv4和IPv6都适用，那么使用下面两个函数：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;arpa/inet.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;inet_pton&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; family, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *strptr, &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *addrptr)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;inet_ntop&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; family, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *addrptr, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *strptr, &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; len)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;函数中的p和n分别代表表达式&lt;em&gt;(presentation)和数值(numeric)&lt;/em&gt;&lt;br&gt;所以inet_pton函数将strptr指针所指的字符串转换为网络地址(IPv4和IPv6)，再将地址保存到addrptr指向的结构体中，inet_ntop将网络地址转为字符串表示的地址，结果存放在strptr中，len参数是strptr的大小。&lt;br&gt;这两个函数支持IPv4和IPv6，所以需要通过参数family来指定，当前要转换的是IPv4地址还是IPv6地址。&lt;/p&gt;
&lt;h2 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;《UNIX网络编程 卷1：套接字联网API（第3版）》&lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;getsockname和getpeername函数&quot;&gt;&lt;a href=&quot;#getsockname和getpeername函数&quot; class=&quot;headerlink&quot; title=&quot;getsockname和getpeername函数&quot;&gt;&lt;/a&gt;getsockname
    
    </summary>
    
      <category term="linux" scheme="http://yunvoo.com/categories/linux/"/>
    
    
      <category term="getsockname" scheme="http://yunvoo.com/tags/getsockname/"/>
    
  </entry>
  
  <entry>
    <title>linux多进程处理函数</title>
    <link href="http://yunvoo.com//blog/2015/10/03/linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0.html"/>
    <id>http://yunvoo.com//blog/2015/10/03/linux多进程处理函数.html</id>
    <published>2015-10-02T16:00:00.000Z</published>
    <updated>2016-06-19T06:41:39.076Z</updated>
    
    <content type="html">&lt;h2 id=&quot;wait-的阻塞问题&quot;&gt;&lt;a href=&quot;#wait-的阻塞问题&quot; class=&quot;headerlink&quot; title=&quot;wait()的阻塞问题&quot;&gt;&lt;/a&gt;wait()的阻塞问题&lt;/h2&gt;&lt;p&gt;父进程为了获取子进程的’SIGSTOP、SIGTERM’等信号时，由于调用了’wait()’函数而导致主进程一直在阻塞中，在使劲的开发中，应该特别注意，主进程在等待子进程的状态变化是还会有其他的事情进行处理,所以需要一种异步回调机制，让主进程可以在执行其它任务的时候，又可以监听到子进程的进程状态变化时及时处理。&lt;/p&gt;
&lt;h2 id=&quot;signal-函数讲解&quot;&gt;&lt;a href=&quot;#signal-函数讲解&quot; class=&quot;headerlink&quot; title=&quot;signal()函数讲解&quot;&gt;&lt;/a&gt;signal()函数讲解&lt;/h2&gt;&lt;p&gt;&lt;code&gt;signal()&lt;/code&gt;函数原型如下:&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;signal.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(*&lt;span class=&quot;keyword&quot;&gt;sighandler_t&lt;/span&gt;)&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;sighandler_t&lt;/span&gt; signal(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; signum,&lt;span class=&quot;keyword&quot;&gt;sighandler_t&lt;/span&gt; handler);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;typedef&lt;/code&gt;定义了一类函数名叫&lt;code&gt;sighandler_t&lt;/code&gt;是指要监听的进程状态的变量信号，所有可以监听的信号的定义可以同&lt;code&gt;sys/signal.h&lt;/code&gt;头文件中查阅到。本文的demeo中要处理的信号量有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;SIGSTOP:发送给父进程的，表示子进程被外部命令暂停，命令可以是&lt;code&gt;kill&lt;/code&gt;,也开始是&lt;code&gt;top&lt;/code&gt;中操作。&lt;/li&gt;
&lt;li&gt;SIGCHLD：发送给父进程的，表示子进程被外部命令暂停或已经执行完毕退出了。这是需要父进程执行&lt;code&gt;wait&lt;/code&gt;函数让子进程从&lt;code&gt;僵尸进程&lt;/code&gt;状态彻底被系统回收.&lt;/li&gt;
&lt;li&gt;SIGWINCH:程序窗口大小发生变换，在中断命令下执行运行可执行文件时用鼠标拖动一下窗口即可获取此信号。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;signal&lt;/code&gt;函数第二个参数是指定&lt;code&gt;signum&lt;/code&gt;的处理函数，该函数的唯一参数将会被赋值为被指定的 信号量。在此函数中可以调用&lt;code&gt;wait&lt;/code&gt;或者其他处理逻辑，也可以赋值为系统的&lt;code&gt;SIG_IGN或者SIG_DFL&lt;/code&gt;函数，分别表示忽略和默认处理方式，但是信号量&lt;code&gt;SIGKILL及SIGSTOP&lt;/code&gt;的处理方式是不能被忽略处理的。&lt;br&gt;当自定义了信号量处理函数后，所监听的信号被捕获，则该信号会被设置为阻塞&lt;code&gt;blocked&lt;/code&gt;，然后再执行处理函数中的逻辑，处理函数执行完毕后，信号量恢复为未阻塞状态&lt;code&gt;unblock&lt;/code&gt;。&lt;br&gt;&lt;code&gt;signal()&lt;/code&gt;函数正常执行，返回值为&lt;code&gt;signum&lt;/code&gt;的原有处理函数；否则出错返回&lt;code&gt;SIG_ER&lt;/code&gt;,并且可以处理通过&lt;code&gt;ERRNO&lt;/code&gt;来查看错误原因&lt;br&gt;&lt;code&gt;signal()&lt;/code&gt;函数在不同的Unxi或Linux版本之间存在较大的差异，所以一般崔村&lt;code&gt;sigaction()&lt;/code&gt;函数来替换。本文不涉及&lt;code&gt;sigaction&lt;/code&gt;的内容。&lt;/p&gt;
&lt;h2 id=&quot;示例代码&quot;&gt;&lt;a href=&quot;#示例代码&quot; class=&quot;headerlink&quot; title=&quot;示例代码&quot;&gt;&lt;/a&gt;示例代码&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;接下来演示`signal()`函数的使用，代码示例总依然用到了对标准输出流的重定向**`freeopen`**。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;signal.c&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;cpp&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;signal.h&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;sys/wait.h&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;time.h&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;ifndef&lt;/span&gt; getSigName&lt;/span&gt;
&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; getSigName(sig) (((sig) == SIGCHLD)?&lt;span class=&quot;string&quot;&gt;&quot;SIGCHLD&quot;&lt;/span&gt;:(((sig) == SIGCONT)?&lt;span class=&quot;string&quot;&gt;&quot;SIGCONT&quot;&lt;/span&gt;:(((sig) == SIGTERM)?&lt;span class=&quot;string&quot;&gt;&quot;SIGTERM&quot;&lt;/span&gt;:(((sig) == SIGWINCH)?&lt;span class=&quot;string&quot;&gt;&quot;SIGWINCH&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;))))&lt;/span&gt;
&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;printTime&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;time_t&lt;/span&gt; calendar_time = time(&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);
    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; tm * tm_local = localtime(&amp;amp;calendar_time);
    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;str_f_t&lt;/span&gt; [&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;];
    strftime(&lt;span class=&quot;keyword&quot;&gt;str_f_t&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;str_f_t&lt;/span&gt;), &lt;span class=&quot;string&quot;&gt;&quot;%G-%m-%d %H:%M:%S&quot;&lt;/span&gt;, tm_local);
    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%s &quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;str_f_t&lt;/span&gt;);
}
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handleSignal&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; sig)&lt;/span&gt; &lt;/span&gt;{
    printTime();
    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;PID=%d handleSignal %s=%d\n&quot;&lt;/span&gt;, getpid(), getSigName(sig), sig);
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (sig == SIGCHLD || sig == SIGTERM) {
        &lt;span class=&quot;comment&quot;&gt;// 子进程被暂停或退出了(包括按逻辑执行结束及被kill)&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; status = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;
        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; childPid = waitpid(&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &amp;amp;status, WUNTRACED|WCONTINUED);
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (childPid == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) {
            printTime();
            &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Parent w=-1, error=%s \n&quot;&lt;/span&gt;, strerror(errno));
        } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; ifExited, ifSignaled, ifStopped, ifContinued;

            ifExited = WIFEXITED(status);
            ifSignaled = WIFSIGNALED(status);
            ifStopped = WIFSTOPPED(status);
            ifContinued = WIFCONTINUED(status);

            printTime();
            &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;pid=%ld child=%d exitCode=%d status=%d ifExited=%d ifSignaled=%d ifStopped=%d ifContinued=%d \n&quot;&lt;/span&gt;,
                   (&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;)getpid(), childPid, status, _WSTATUS(childPid), ifExited, ifSignaled, ifStopped, ifContinued);

            printTime();
            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ifExited) {
                &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;PID=%ld exited, status=%d\n&quot;&lt;/span&gt;, (&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;)childPid, WEXITSTATUS(status));
            } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ifSignaled) {
                &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;PID=%ld killed by signal %d\n&quot;&lt;/span&gt;, (&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;)childPid, WTERMSIG(status));
            } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ifStopped) {
                &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;PID=%ld stopped by signal %d\n&quot;&lt;/span&gt;, (&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;)childPid, WSTOPSIG(status));
            } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ifContinued) {
                &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;PID=%ld continued\n&quot;&lt;/span&gt;, (&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;)childPid);
            }
        }
    } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (sig == SIGCONT) {
        &lt;span class=&quot;comment&quot;&gt;// sigcont在本人的mac上调用wait是无效的&lt;/span&gt;
        &lt;span class=&quot;comment&quot;&gt;// do nothing&lt;/span&gt;
    } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (sig == SIGWINCH) {
        &lt;span class=&quot;comment&quot;&gt;// do nothing&lt;/span&gt;
    } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
        printTime();
        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;sig=%d is not valid.\n&quot;&lt;/span&gt;, sig);
    }
}
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;mainProcessDoSomething&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(FILE* f)&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; count = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;
    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) {
        sleep(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (f != &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;){
            fflush(f);
        }
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (count ++ &amp;gt; &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;) {
            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;
        }
    }
}
&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; main&lt;span class=&quot;comment&quot;&gt;/*11*/&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; ** argv) {

    &lt;span class=&quot;comment&quot;&gt;// SIGWINCH：应用程序窗口发生变化&lt;/span&gt;
    signal(SIGWINCH, &amp;amp;handleSignal);

    &lt;span class=&quot;comment&quot;&gt;// 子进程被暂停运行&lt;/span&gt;
    signal(SIGSTOP, &amp;amp;handleSignal);
    &lt;span class=&quot;comment&quot;&gt;// 子进程被恢复运行(Mac上无效..)&lt;/span&gt;
    signal(SIGCONT, &amp;amp;handleSignal);
    &lt;span class=&quot;comment&quot;&gt;// SIGCHLD：子进程被暂停或退出了(包括按逻辑执行结束及被kill)&lt;/span&gt;
    signal(SIGCHLD, &amp;amp;handleSignal);
    &lt;span class=&quot;comment&quot;&gt;// 不建议对SIGTERM进行设置&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;// signal(SIGTERM, &amp;amp;handleSignal);&lt;/span&gt;

    &lt;span class=&quot;keyword&quot;&gt;pid_t&lt;/span&gt; pId = fork();
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (pId == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) {
        perror(&lt;span class=&quot;string&quot;&gt;&quot;fork error&quot;&lt;/span&gt;);
        &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(EXIT_FAILURE);
    } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (pId == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) {
        FILE* fChild = freopen(&lt;span class=&quot;string&quot;&gt;&quot;/Users/sodino/workspace/xcode/Define/Define/child_signal.txt&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;w&quot;&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;stdout&lt;/span&gt;);
        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; myPid = getpid();
        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; parentPid = getppid();

        printTime();
        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Child:SelfID=%d ParentID=%d \n&quot;&lt;/span&gt;, myPid, parentPid);
        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; count = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;
        &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;{
            count ++;
            sleep(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);
            printTime();
            &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Child:count=%d \n&quot;&lt;/span&gt;, count);
            fflush(fChild);
            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (count &amp;gt;= &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;) {
                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;
            }
        }&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);
        printTime();
        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Child:SelfID=%d exit success.\n&quot;&lt;/span&gt;, myPid);
        fflush(fChild);
        fclose(fChild);
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; EXIT_SUCCESS;
    } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
        FILE * fMain = freopen(&lt;span class=&quot;string&quot;&gt;&quot;/Users/sodino/workspace/xcode/Define/Define/main_signal.txt&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;w&quot;&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;stdout&lt;/span&gt;);
        printTime();
        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Parent:SelfID=%d MyChildPID=%d \n&quot;&lt;/span&gt;, getpid(), pId);
        fflush(fMain);

        &lt;span class=&quot;comment&quot;&gt;// 继续往下执行其它任务，而不像原逻辑 会被wait()所阻塞&lt;/span&gt;
        mainProcessDoSomething(fMain);

        printTime();
        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Parent:SelfID=%d exit success.\n&quot;&lt;/span&gt;, getpid());

        fflush(fMain);
        fclose(fMain);
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; EXIT_SUCCESS;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以上代码中，在&lt;code&gt;main()&lt;/code&gt;函数一开始，就对&lt;code&gt;SIGWINCH、SIGCHLD&lt;/code&gt;进行监听，统一注册其处理函数为&lt;code&gt;handleSignal(int)&lt;/code&gt;。然后执行&lt;code&gt;fork()&lt;/code&gt;生成子进程。&lt;br&gt;handleSignal(int)函数中会对监听到的信号量做出打印及输出，如果是SIGSTOP、SIGCHLD的话则会执行wait以获取子进程状态。&lt;br&gt;在主进程中，以mainProcessDoSomething()函数来表示父进程的其它工作任务，不被wait所阻塞。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;wait-的阻塞问题&quot;&gt;&lt;a href=&quot;#wait-的阻塞问题&quot; class=&quot;headerlink&quot; title=&quot;wait()的阻塞问题&quot;&gt;&lt;/a&gt;wait()的阻塞问题&lt;/h2&gt;&lt;p&gt;父进程为了获取子进程的’SIGSTOP、SIGTERM’等信号时，由于调
    
    </summary>
    
      <category term="技术" scheme="http://yunvoo.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="linux 多进程" scheme="http://yunvoo.com/tags/linux-%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>引导工具GRUB</title>
    <link href="http://yunvoo.com//blog/2015/08/07/%E5%BC%95%E5%AF%BC%E5%B7%A5%E5%85%B7GRUB.html"/>
    <id>http://yunvoo.com//blog/2015/08/07/引导工具GRUB.html</id>
    <published>2015-08-06T16:00:00.000Z</published>
    <updated>2016-06-25T11:37:54.904Z</updated>
    
    <content type="html">&lt;h2 id=&quot;引导工具GRUB详解&quot;&gt;&lt;a href=&quot;#引导工具GRUB详解&quot; class=&quot;headerlink&quot; title=&quot;引导工具GRUB详解&quot;&gt;&lt;/a&gt;引导工具GRUB详解&lt;/h2&gt;&lt;p&gt;&lt;strong&gt; 引导程序是驻留在硬盘第一个扇区（MPR、主引导记录）的程序。GRUB是一个功能强大的多系统引导程序，专门处理Linux与其它操作系统共存的问题。下面就由我介绍一下grub.conf文件里的具体内容及其含义。 &lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;#vi /boot/grub/menu.lst&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# grub.conf generated by anaconda                                                                                  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#                                                                                                                  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Note that you &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; not have to rerun grub after making changes to &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; file                                        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# NOTICE:  You have a /boot partition.  This means that                                                            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#          all kernel and initrd paths are relative to /boot/, eg.                                                 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#          root (hd0,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)                                                                                            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#          kernel /vmlinuz-version ro root=/dev/sda2                                                               &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#          initrd /initrd-[generic-]version.img                                                                    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#boot=/dev/sda                                                                                                     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;                                                                                                          &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;timeout=&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;                                                                                                          &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;splashimage=(hd0,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)/grub/splash.xpm.gz                                                                             &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hiddenmenu                                                                                                         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;title Red Hat Enterprise Linux (&lt;span class=&quot;number&quot;&gt;2.6&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.32&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-358.&lt;/span&gt;el6.x86_64)                                                             &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		    root (hd0,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)                                                                                                   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		    kernel /vmlinuz&lt;span class=&quot;number&quot;&gt;-2.6&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.32&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-358.&lt;/span&gt;el6.x86_64 ro root=UUID=&lt;span class=&quot;number&quot;&gt;3660&lt;/span&gt;ec98&lt;span class=&quot;number&quot;&gt;-9913&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-4&lt;/span&gt;b61-b1b2-d1a8071a8953 rd_NO_LUKS  KEYBOARDTYPE=pc KEYTABLE=us rd_NO_MD crashkernel=&lt;span class=&quot;number&quot;&gt;250&lt;/span&gt;M LANG=zh_CN.UTF&lt;span class=&quot;number&quot;&gt;-8&lt;/span&gt; rd_NO_LVM rd_NO_DM rhgb quiet                       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				    initrd /initramfs&lt;span class=&quot;number&quot;&gt;-2.6&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.32&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-358.&lt;/span&gt;el6.x86_64.img&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;解释&quot;&gt;&lt;a href=&quot;#解释&quot; class=&quot;headerlink&quot; title=&quot;解释&quot;&gt;&lt;/a&gt;解释&lt;/h2&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;后加一个数字n，表示n+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;个“title”操作系统，&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;表示第一个“title” 的操作系统，以此类推。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2.&lt;/span&gt; timeout=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# timeout表示默认的等待时间，此处设置为&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;表示开机后系统将自动载入默认的操作系统。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3.&lt;/span&gt; splashimage=(hd0,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)/boot/grub/splash.xpm.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 指定GRUB引导时使用的屏幕图像文件存放的路径。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;4.&lt;/span&gt; hiddenmenu&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 隐藏菜单选项&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;5.&lt;/span&gt; title Red Hat Enterprise Linux (&lt;span class=&quot;number&quot;&gt;2.6&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.32&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-220.e16&lt;/span&gt;.i686)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# title定义启动菜单项的名称，title 后面的字符串就是在菜单项上显示的选项。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;6.&lt;/span&gt; root(hd,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 设置GRUB的根分区，是/boot对应的分区或boot文件夹所在的分区。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;7.&lt;/span&gt; kernel /vmkinuz&lt;span class=&quot;number&quot;&gt;-2.6&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.32&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-220.e16&lt;/span&gt;.i686 ro root=UUID=d67e208c&lt;span class=&quot;number&quot;&gt;-2791&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-4692&lt;/span&gt;-a615-c4e96b6ae355 rd_NO...... rd_NO_DM&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 指定内核文件（vmkinuz&lt;span class=&quot;number&quot;&gt;-2.6&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.32&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-220.e16&lt;/span&gt;.i686）与要挂载的根设备（root=UUID=d67e208c&lt;span class=&quot;number&quot;&gt;-2791&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-4692&lt;/span&gt;-a615-c4e96b6ae355） ，ro是readonly的意思。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;8.&lt;/span&gt;initrd /initramfs&lt;span class=&quot;number&quot;&gt;-2.6&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.32&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-220.e16&lt;/span&gt;.i686.img&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 指定初始化内存映像盘。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引导工具GRUB详解&quot;&gt;&lt;a href=&quot;#引导工具GRUB详解&quot; class=&quot;headerlink&quot; title=&quot;引导工具GRUB详解&quot;&gt;&lt;/a&gt;引导工具GRUB详解&lt;/h2&gt;&lt;p&gt;&lt;strong&gt; 引导程序是驻留在硬盘第一个扇区（MPR、主引导记录）的程序
    
    </summary>
    
      <category term="linux" scheme="http://yunvoo.com/categories/linux/"/>
    
    
      <category term="GRUB" scheme="http://yunvoo.com/tags/GRUB/"/>
    
  </entry>
  
  <entry>
    <title>什么是bootloader</title>
    <link href="http://yunvoo.com//blog/2015/08/06/bootloader.html"/>
    <id>http://yunvoo.com//blog/2015/08/06/bootloader.html</id>
    <published>2015-08-05T16:00:00.000Z</published>
    <updated>2016-06-22T10:26:46.726Z</updated>
    
    <content type="html">&lt;h2 id=&quot;什么是bootloader&quot;&gt;&lt;a href=&quot;#什么是bootloader&quot; class=&quot;headerlink&quot; title=&quot;什么是bootloader?&quot;&gt;&lt;/a&gt;什么是bootloader?&lt;/h2&gt;&lt;p&gt;引导程序（英语：boot loader）位于电脑或其他计算机应用上，是指引导操作系统启动的程序。引导程序引导方式及程序视应用机型种类而不同。例如在普通的个人电脑上，引导程序通常分为两部分：第一阶段引导程序位于主引导记录（MBR），用以引导位于某个分区上的第二阶段引导程序，如NTLDR、BOOTMGR和GNU GRUB等。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;BIOS&lt;/code&gt;开机完成后，bootloader就接手初始化硬件设备、创建内存空间的映射，以便为操作系统内核准备好正确的软硬件环境。&lt;/p&gt;
&lt;p&gt;简单的&lt;code&gt;bootloader&lt;/code&gt;的虚拟汇编码，如其后的八个指令：&lt;/p&gt;
&lt;p&gt;第一：将P寄存器的值设为8&lt;br&gt;第二：检查纸带（paper tape）读取器，是否已经可以进行读取&lt;br&gt;第三：如果还不能进行读取，跳至1&lt;br&gt;第四：从纸带读取器，读取一byte至累加器&lt;br&gt;第五：如为带子结尾，跳至8&lt;br&gt;第六：将寄存器的值，存储至P寄存器中的数值所指定的地址&lt;br&gt;第七：增加P寄存器的值&lt;br&gt;第八：跳至1&lt;br&gt;但是随着计算机操作系统越来越复杂，位于主引导记录的空间已经放不下引导操作系统的代码，于是就有了第二阶段的引导程序，而MBR中代码的功能也从直接引导操作系统变为了引导第二阶段的引导程序。&lt;br&gt;  &lt;code&gt;BootLoader是在操作系统内核运行之前运行的一段小程序。其实Bootloader就相当于手机的&lt;/code&gt;bios&lt;code&gt;，通过这段小程序，进行硬件初始化，获取内存大小信息等，调整手机到适配所以Bootloader是很重要的，如果bootloader不能正常加载，手机就是砖头一个，无法正常启动和使用。&lt;/code&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是bootloader&quot;&gt;&lt;a href=&quot;#什么是bootloader&quot; class=&quot;headerlink&quot; title=&quot;什么是bootloader?&quot;&gt;&lt;/a&gt;什么是bootloader?&lt;/h2&gt;&lt;p&gt;引导程序（英语：boot loader）位于电脑
    
    </summary>
    
      <category term="技术" scheme="http://yunvoo.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="bootloader" scheme="http://yunvoo.com/tags/bootloader/"/>
    
  </entry>
  
  <entry>
    <title>静态绑定和动态绑定</title>
    <link href="http://yunvoo.com//blog/2015/08/06/%E9%9D%99%E6%80%81%E7%BB%91%E5%AE%9A%E5%92%8C%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9A.html"/>
    <id>http://yunvoo.com//blog/2015/08/06/静态绑定和动态绑定.html</id>
    <published>2015-08-05T16:00:00.000Z</published>
    <updated>2016-06-23T11:16:59.066Z</updated>
    
    <content type="html">&lt;h2 id=&quot;绑定&quot;&gt;&lt;a href=&quot;#绑定&quot; class=&quot;headerlink&quot; title=&quot;绑定&quot;&gt;&lt;/a&gt;绑定&lt;/h2&gt;&lt;p&gt;所谓&lt;code&gt;绑定(binding)&lt;/code&gt;即变量在运行期的存在，即是变量名字和它的实际内存位置的映射关系。存在，是个时空概念，变量同样有它的作用域(scope)和生存期(extent)。对词法变量而已，它具有词法作用域和不确定的(indefinite)的生存期，这表示一个词法变量只能在一个函数或一个block内存在，它的绑定只在一段代码区域内有效，但从时间上来讲，它可以在任意的时间里持续存在，只是取决于该变量需要使用(reference)多久；而动态变量正好相反，它具有不确定的作用域，这表示一个动态变量可以在任意地方出现，只是取决于你在什么地方绑定它，同时它有着动态(dynamic)的生存期，这表示当绑定该变量的代码执行完毕，该绑定就失效了，也就意味着该变量失效了。这两种截然不同的绑定方式，即被称作静态绑定(lexical binding)和动态绑定(dynamic binding)。&lt;/p&gt;
&lt;h2 id=&quot;动态绑定和静态绑定&quot;&gt;&lt;a href=&quot;#动态绑定和静态绑定&quot; class=&quot;headerlink&quot; title=&quot;动态绑定和静态绑定&quot;&gt;&lt;/a&gt;动态绑定和静态绑定&lt;/h2&gt;&lt;p&gt;这里介绍一下动态变量和动态绑定，elisp里的变量有三种：全局变量(比如defvar)、buffer-local变量(比如make-local-variable)和局部变量(比如let、let*)，前两者的作用域和生存期是伴随着Emacs和buffer全局存在的，采用的是动态绑定的方式。&lt;/p&gt;
&lt;p&gt;需要额外说明的是局部变量，局部变量分两种：函数参数和let表达式里绑定的变量，由于let也可以展开成lambda表达式，所以后者也可以认为是一种函数参数。下边考察一下局部变量的作用域和生存期，看一下info里的一个例子：&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defun binder (x)   ; `x&#39; is bound in `binder&#39;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (foo 5))          ; `foo&#39; is some other function.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(defun user ()      ; `x&#39; is used &quot;free&quot; in `user&#39;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (list x))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 如果你只接触过词法绑定的语言，你能想象到函数user可以访问函数binder的参数x吗？这完全不可能嘛。但是在elisp里这却是可能的，如果你定义了这样一个函数：&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defun foo (lose)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (user))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当你调用binder的时候，user是能够访问x的，这就是所谓的不确定的作用域，也就是说在任何位置都可能访问一个变量名。&lt;br&gt;再看一个lambda表达式的例子：&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defun make-add (n)                ; Return a function.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (function (lambda (m) (+ n m)))) ; =&amp;gt; make-add&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(fset &#39;add2 (make-add 2))          ; Define function `add2&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                   ; =&amp;gt; (lambda (m) (+ n m))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(add2 4)                           ; Try to add 2 to 4.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt; 这里用lambda定义了一个高阶函数make-add，但是很不幸，这段代码无法正确运行，因为elisp里局部变量的生存期是动态的，只有当绑定了这个变量的表达式运行时该绑定才是有效的；当脱离了创建它的环境，它的生命周期也就结束了。所以，当make-add函数返回的时候，变量n也就同时失效了。这就是所谓的动态的生存期，也就是说绑定只在运行时有效。&lt;/p&gt;
&lt;p&gt;从上面这个例子也可以看出来，动态的生存期最糟糕的一点，就是不支持闭包。所谓闭包，必须在函数和局部变量之间保持关联，这些局部变量的作用域仅限于函数之内，但它不确定的生存期却可以使其跨越函数的运行边界。确切的说，只要该变量被引用，它就会一直存在，最后，没有引用的变量将被垃圾回收。&lt;br&gt;&lt;strong&gt; 在目前的release版本里，你只能用一些辅助办法模拟闭包：&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(defun make-add (n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (lexical-let ((nn n))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    #&#39;(lambda (m) (+ m nn))))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;lexical-let这个辅助函数作用就是把模拟闭包内的局部变量生成一个唯一变量名(make-symbol)添加到一个全局列表(cl-closure-vars)里去，这样该局部变量的生存期将伴随整个Emacs进程，而且由于是唯一变量名，它也不会在别处绑定，这样看起来该变量就可以脱离函数运行时环境存在了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;而最近被合并的lexbind分支，由于支持了词法绑定，则可以真正提供闭包支持了，具体做法是在文件头声明：&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;;; -*- lexical-binding: t -*-&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;那么dynamic binding和lexical binding分别有什么应用场景呢？&lt;/p&gt;
&lt;p&gt;&lt;em&gt;想象这样一个场景：&lt;/em&gt;&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(let ((b (generate-&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;-buffer-name &lt;span class=&quot;string&quot;&gt;&quot;*string-output*&quot;&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     (let ((standard-output b))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       (foo))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     (&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;-buffer b)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     ;; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; stuff with the output of foo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     (kill-buffer b))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;你生成一个名为 “string-output” 的临时&lt;code&gt;buffer&lt;/code&gt;，然后你调用&lt;code&gt;foo函数&lt;/code&gt;，它会向&lt;code&gt;buffer&lt;/code&gt;里输出一些内容，然后你再对输出内容做一些处理。&lt;/p&gt;
&lt;p&gt;借助于变量名的动态绑定，你可以直接在foo里操作standard-output，甚至是在所有foo调用的函数里。而在仅支持lexical binding的语言里，你将不得不把&lt;code&gt;standard-output&lt;/code&gt;作为一个&lt;code&gt;参数&lt;/code&gt;传递给foo，甚至所有调用的函数。&lt;/p&gt;
&lt;p&gt;当然，这样做也有风险。手册建议不要滥用动态绑定的能力，否则，最后也许自己都弄不懂你目前修改的这个局部变量引用自哪里，会对哪些函数造成影响了。&lt;/p&gt;
&lt;p&gt;在实现方面，动态绑定的缺点很明显，它的实现有两种&lt;code&gt;深绑定(deep binding)&lt;/code&gt;和&lt;code&gt;浅绑定(shallow binding)&lt;/code&gt;：&lt;br&gt; 深绑定在传参的时候绑定变量，变量和值作为一个&lt;code&gt;pair&lt;/code&gt;，保存到一个&lt;code&gt;关联数组&lt;/code&gt;里。&lt;br&gt; 浅绑定在函数被实际调用的时候绑定变量，当前的变量和值对保存在一个&lt;code&gt;cell&lt;/code&gt;里，而老的值会&lt;code&gt;push&lt;/code&gt;到一个&lt;code&gt;栈&lt;/code&gt;里维护。&lt;br&gt;两种方式都需要维护全局的状态，当进入和脱离作用域的时候，都需要查询这些变量的状态，以确定绑定关系。另外，不确定的作用域对多线程设计和中断设计都增加了复杂度。&lt;/p&gt;
&lt;p&gt;而&lt;code&gt;静态绑定&lt;/code&gt;的优点却有很多：&lt;br&gt; 便于用户书写，因为不用考虑不确定的作用域带来的运行时环境的影响；&lt;br&gt; 便于&lt;code&gt;编译器优化&lt;/code&gt;，因为&lt;code&gt;变量存&lt;/code&gt;在于一个确定的词法上下文，而不用判断更多的可能性；* 词法作用域在编译期就可以确定的，避免了更多的运行时&lt;code&gt;开销&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt; &lt;em&gt;有这些原因，导致了越来越多的现代语言摒弃了&lt;code&gt;动态绑定&lt;/code&gt;而转向了&lt;code&gt;静态绑定&lt;/code&gt;。&lt;/em&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;绑定&quot;&gt;&lt;a href=&quot;#绑定&quot; class=&quot;headerlink&quot; title=&quot;绑定&quot;&gt;&lt;/a&gt;绑定&lt;/h2&gt;&lt;p&gt;所谓&lt;code&gt;绑定(binding)&lt;/code&gt;即变量在运行期的存在，即是变量名字和它的实际内存位置的映射关系。存在，是个时空概念，变量
    
    </summary>
    
      <category term="技术" scheme="http://yunvoo.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="静态和动态绑定" scheme="http://yunvoo.com/tags/%E9%9D%99%E6%80%81%E5%92%8C%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9A/"/>
    
  </entry>
  
  <entry>
    <title>容器、迭代器、算法概念</title>
    <link href="http://yunvoo.com//blog/2015/06/08/%E5%AE%B9%E5%99%A8*%E8%BF%AD%E4%BB%A3%E5%99%A8-%E7%AE%97%E6%B3%95%E6%A6%82%E5%BF%B5.html"/>
    <id>http://yunvoo.com//blog/2015/06/08/容器*迭代器-算法概念.html</id>
    <published>2015-06-07T16:00:00.000Z</published>
    <updated>2016-06-25T02:53:08.339Z</updated>
    
    <content type="html">&lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;p&gt;STL（Standard Template Library，标准模板库)是惠普实验室开发的一系列软件的统称。现然主要出现在C++中，但在被引入C++之前该技术就已经存在了很长的一段时间。&lt;br&gt;STL的从广义上讲分为三类：algorithm（算法）、container（容器）和iterator（迭代器），容器和算法通过迭代器可以进行无缝地连接。几乎所有的代码都采 用了模板类和模板函数的方式，这相比于传统的由函数和类组成的库来说提供了更好的代码重用机会。在C++标准中，STL被组织为下面的13个头文件:&lt;br&gt;&lt;code&gt;algorithm&lt;/code&gt;，&lt;code&gt;deque&lt;/code&gt;，&lt;code&gt;functional&lt;/code&gt;，&lt;code&gt;iterator&lt;/code&gt;，&lt;code&gt;vector&lt;/code&gt;，&lt;code&gt;list&lt;/code&gt;，&lt;code&gt;map&lt;/code&gt;，&lt;code&gt;memory&lt;/code&gt;，&lt;code&gt;numeric&lt;/code&gt;，&lt;code&gt;queue&lt;/code&gt;，&lt;code&gt;set&lt;/code&gt;，&lt;code&gt;stack&lt;/code&gt; 和&lt;code&gt;utility&lt;/code&gt;。&lt;br&gt;&lt;img src=&quot;http://7xrzzi.com1.z0.glb.clouddn.com/stl.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;STL详细的说有六大组件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;容器（Container）&lt;/li&gt;
&lt;li&gt;算法（Algorithm）&lt;/li&gt;
&lt;li&gt;迭代器（Iterator）&lt;/li&gt;
&lt;li&gt;仿函数（Function object）&lt;/li&gt;
&lt;li&gt;适配器（Adaptor）&lt;/li&gt;
&lt;li&gt;空间适配器（allocator）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;** 使用STL的好处&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.STL是C++的一部分，因此不用额外安装什么，它被内建在你的编译器之内。&lt;/li&gt;
&lt;li&gt;2.STL的一个重要特点是数据结构和算法的分离。尽管这是个简单的概念，但是这种分离确实使得STL变得非常通用。&lt;br&gt;例如，在STL的vector容器中，可以放入元素、基础数据类型变量、元素的地址；&lt;br&gt;STL的sort()函数可以用来操作vector,list等容器。&lt;/li&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;程序员可以不用思考STL具体的实现过程，只要能够熟练使用STL就OK了。这样他们就可以把精力放在程序开发的别的方面。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;4.STL具有高可重用性，高性能，高移植性，跨平台的优点。&lt;br&gt;高可重用性：STL中几乎所有的代码都采用了模板类和模版函数的方式实现，这相比于传统的由函数和类组成的库来说提供了更好的代码重用机会。关于模板的知识，已经给大家介绍了。&lt;br&gt;高性能：如map可以高效地从十万条记录里面查找出指定的记录，因为map是采用红黑树的变体实现的。(红黑树是平横二叉树的一种)&lt;br&gt;高移植性：如在项目A上用STL编写的模块，可以直接移植到项目B上。&lt;br&gt;跨平台：如用windows的Visual Studio编写的代码可以在Mac OS的XCode上直接编译。&lt;/li&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;程序员可以不用思考STL具体的实现过程，只要能够熟练使用STL就OK了。这样他们就可以把精力放在程序开发的别的方面。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;6.了解到STL的这些好处，我们知道STL无疑是最值得C++程序员骄傲的一部分。每一个C＋＋程序员都应该好好学习STL。只有能够熟练使用STL的程序员，才是好的C++程序员。&lt;/li&gt;
&lt;li&gt;7.总之：招聘工作中，经常遇到C++程序员对STL不是非常了解。大多是有一个大致的映像，而对于在什么情况下应该使用哪个容器和算法都感到比较茫然。STL是C++程序员的一项不可或缺的基本技能，掌握它对提升C++编程大有裨益。&lt;h2 id=&quot;容器&quot;&gt;&lt;a href=&quot;#容器&quot; class=&quot;headerlink&quot; title=&quot;容器&quot;&gt;&lt;/a&gt;容器&lt;/h2&gt;在实际的开发过程中，数据结构本身的重要性不会逊于操作于数据结构的算法的重要性，当程序中存在着对时间要求很高的部分时，数据结构的选择就显得更加重要。&lt;br&gt;　　经典的数据结构数量有限，但是我们常常重复着一些为了实现向量、链表等结构而编写的代码，这些代码都十分相似，只是为了适应不同数据的变化而在 细节上有所出入。STL容器就为我们提供了这样的方便，它允许我们重复利用已有的实现构造自己的特定类型下的数据结构，通过设置一些模板，STL容器对最常用的数据结构提供了支持，这些模板的参数允许我们指定容器中元素的数据类型，可以将我们许多重复而乏味的工作简化。&lt;br&gt;容器部分主要由头文 件&lt;vector&gt;,&lt;list&gt;,&lt;deque&gt;,&lt;set&gt;,&lt;map&gt;,&lt;stack&gt; 和&lt;queue&gt;组成。对于常用的一些容器和容器适配器（可以看作由其它容器实现的容器），可以通过下表总结一下它们和相应头文件的对应关系。&lt;h3 id=&quot;容器的概念&quot;&gt;&lt;a href=&quot;#容器的概念&quot; class=&quot;headerlink&quot; title=&quot;容器的概念&quot;&gt;&lt;/a&gt;容器的概念&lt;/h3&gt;&lt;strong&gt; 用来管理一组元素 &lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://7xrzzi.com1.z0.glb.clouddn.com/vector.png&quot; alt=&quot;&quot;&gt;&lt;h3 id=&quot;容器的分类&quot;&gt;&lt;a href=&quot;#容器的分类&quot; class=&quot;headerlink&quot; title=&quot;容器的分类&quot;&gt;&lt;/a&gt;容器的分类&lt;/h3&gt;&lt;/queue&gt;&lt;/stack&gt;&lt;/map&gt;&lt;/set&gt;&lt;/deque&gt;&lt;/list&gt;&lt;/vector&gt;&lt;/li&gt;
&lt;li&gt;1.序列式容器（Sequence containers）&lt;br&gt;每个元素都有固定位置－－取决于插入时机和地点，和元素值无关。&lt;br&gt;vector、deque、list  &lt;/li&gt;
&lt;li&gt;2.关联式容器（Associated containers）&lt;br&gt;元素位置取决于特定的排序准则，和插入顺序无关&lt;br&gt;set、multiset、map、multimap&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;数据结构&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;描述&lt;/th&gt;
&lt;th style=&quot;text-align:right&quot;&gt;实现头文件&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;向量(vector)&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;连续存储的元素&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;vector&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;列表(list)&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;有节点组成的双向链表,每个节点包含着一个元素&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;list&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;双队列(deque)&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;连续存储的指向不同元素的指针所组成的数组&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;deque&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;集合(set)&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;有节点组成的红黑树，每个节点都包含着一元素,节点之间以某种作用元素对的微词排列，没有两个不同的元素能够拥有相同的次序&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;set&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;多重集合(multiset)&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;允许存在两个次序相等的元素的集合&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;set&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;栈(stack)&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;后进先出的值排列&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;stack&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;队列(queue)&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;先进先出的值的排列&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;queue&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;优先队列(priority_queue)&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;元素的次序是由作用域所存储的值对上的某种谓词排列&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;queue&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;映射&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;由 键 ，值 对组成的集合，以某种作用域键对上的谓词排列&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;map&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;多重映射&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;允许键对有相等的次序的映射&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;map&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;迭代器&quot;&gt;&lt;a href=&quot;#迭代器&quot; class=&quot;headerlink&quot; title=&quot;迭代器&quot;&gt;&lt;/a&gt;迭代器&lt;/h2&gt;&lt;p&gt;迭代器从作用上来说是最基本的部分，可是理解起来比前两者都要费力一些。软件设计有一个基本原则，所有的问题都可以通过引进一个间接层来简化， 这种简化在STL中就是用迭代器来完成的。概括来说，迭代器在STL中用来将算法和容器联系起来，起着一种黏和剂的作用。几乎STL提供的所有算法都是通 过迭代器存取元素序列进行工作的，每一个容器都定义了其本身所专有的迭代器，用以存取容器中的元素。&lt;br&gt;　　迭代器部分主要由头文件&lt;utility&gt;,&lt;iterator&gt;和&lt;memory&gt;组 成。&lt;utility&gt;是一个很小的头文件，它包括了贯穿使用在STL中的几个模板的声明，&lt;iterator&gt;中提供了迭代器 使用的许多方法，而对于&lt;memory&gt;的描述则十分的困难，它以不同寻常的方式为容器中的元素分配存储空间，同时也为某些算法执行期间产生 的临时对象提供机制,&lt;memory&gt;中的主要部分是模板类allocator，它负责产生所有容器中的默认分配器。&lt;/memory&gt;&lt;/memory&gt;&lt;/iterator&gt;&lt;/utility&gt;&lt;/memory&gt;&lt;/iterator&gt;&lt;/utility&gt;&lt;/p&gt;
&lt;h2 id=&quot;算法&quot;&gt;&lt;a href=&quot;#算法&quot; class=&quot;headerlink&quot; title=&quot;算法&quot;&gt;&lt;/a&gt;算法&lt;/h2&gt;&lt;p&gt;函数库对数据类型的选择对其可重用性起着至关重要的作用。举例来说，一个求方根的函数，在使用浮点数作为其参数类型的情况下的可重用性肯定比使 用整型作为它的参数类性要高。而C++通过模板的机制允许推迟对某些类型的选择，直到真正想使用模板或者说对模板进行特化的时候，STL就利用了这一点提 供了相当多的有用算法。它是在一个有效的框架中完成这些算法的——可以将所有的类型划分为少数的几类，然后就可以在模版的参数中使用一种类型替换掉同一种 类中的其他类型。&lt;br&gt;　　STL提供了大约100个实现算法的模版函数，比如算法for_each将为指定序列中的每一个元素调用指定的函数，stable_sort以 你所指定的规则对序列进行稳定性排序等等。这样一来，只要熟悉了STL之后，许多代码可以被大大的化简，只需要通过调用一两个算法模板，就可以完成所需要 的功能并大大地提升效率。&lt;br&gt;算法部分主要由头文件&lt;algorithm&gt;，&lt;numeric&gt;和&lt;functional&gt;组 成。&lt;algorithm&gt;是所有STL头文件中最大的一个（尽管它很好理解），它是由一大堆模版函数组成的，可以认为每个函数在很大程度上 都是独立的，其中常用到的功能范围涉及到比较、交换、查找、遍历操作、复制、修改、移除、反转、排序、合并等等。&lt;numeric&gt;体积很 小，只包括几个在序列上面进行简单数学运算的模板函数，包括加法和乘法在序列上的一些操作。&lt;functional&gt;中则定义了一些模板类， 用以声明函数对象。&lt;/functional&gt;&lt;/numeric&gt;&lt;/algorithm&gt;&lt;/functional&gt;&lt;/numeric&gt;&lt;/algorithm&gt;&lt;/p&gt;
&lt;h2 id=&quot;C-标准库&quot;&gt;&lt;a href=&quot;#C-标准库&quot; class=&quot;headerlink&quot; title=&quot;C++标准库&quot;&gt;&lt;/a&gt;C++标准库&lt;/h2&gt;&lt;p&gt;C++强大的功能来源于其丰富的类库及库函数资源。C++标准库的内容总共在50个标准头文件中定义。在C++开发中，要尽可能地利用标准库完 成。这样做的直接好处包括：（1）成本：已经作为标准提供，何苦再花费时间、人力重新开发呢；（2）质量：标准库的都是经过严格测试的，正确性有保证； （3）效率：关于人的效率已经体现在成本中了，关于代码的执行效率要相信实现标准库的大牛们的水平；（4）良好的编程风格：采用行业中普遍的做法进行开发。&lt;br&gt;在C++程序设计课程中，尤其是作为第一门程序设计课程，我们注重了语法、语言的机制等方面的内容。程序设计能力的培养有个过程，跨过基本的原 理性知识直接进入到工程中的普遍做法，由于跨度决定了其难度。再者，在掌握了基本原理的基础上，在认识标准库的问题上完全可以凭借实践，逐步地掌握。标准 库的学习不需要认认真真地读书，需要的是在了解概貌的情况下，在实践中深入&lt;/p&gt;
&lt;h2 id=&quot;程序&quot;&gt;&lt;a href=&quot;#程序&quot; class=&quot;headerlink&quot; title=&quot;程序&quot;&gt;&lt;/a&gt;程序&lt;/h2&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;vector&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;algorithm&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//容器中装 基础数据类型变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main11&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; v1; &lt;span class=&quot;comment&quot;&gt;//1 容器：把元素copy到容器中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	v1.push_back(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	v1.push_back(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	v1.push_back(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	v1.push_back(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//2 迭代器：相当于一个指针 分类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt;::iterator it = v1.begin(); it != v1.end(); it++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//3 算法   算法和迭代器 进行无缝的连接&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num1 = count(v1.begin(), v1.end(), &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);  &lt;span class=&quot;comment&quot;&gt;//查找容器中等于3的个数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;num1:&quot;&lt;/span&gt; &amp;lt;&amp;lt; num1 &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; Teacher&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; name[&lt;span class=&quot;number&quot;&gt;64&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;printT&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;age:&quot;&lt;/span&gt; &amp;lt;&amp;lt; age &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//容器中装元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main12&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Teacher t1, t2, t3;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	t1.age = &lt;span class=&quot;number&quot;&gt;31&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	t2.age = &lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	t3.age = &lt;span class=&quot;number&quot;&gt;33&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;Teacher&amp;gt; v1; &lt;span class=&quot;comment&quot;&gt;// 1容器: 把你的元素copy到容器中  //容器实现了 数据类型 和算法的有效分离&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	v1.push_back(t1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	v1.push_back(t2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	v1.push_back(t3);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//2 迭代器： 相当于一个指针分类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;Teacher&amp;gt;::iterator it = v1.begin(); it != v1.end(); it++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; it-&amp;gt;age &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//容器中 装 元素 装指针 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main13&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Teacher  t1, t2, t3;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	t1.age = &lt;span class=&quot;number&quot;&gt;31&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	t2.age = &lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	t3.age = &lt;span class=&quot;number&quot;&gt;33&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Teacher *p1, *p2, *p3;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	p1 = &amp;amp;t1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	p2 = &amp;amp;t2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	p3 = &amp;amp;t3;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;Teacher *&amp;gt;  v1; &lt;span class=&quot;comment&quot;&gt;// 1容器: 把t1 t2 t3内存首地址 放入到了容器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	v1.push_back(p1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	v1.push_back(p2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	v1.push_back(p3);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//2迭代器: 相当于一个指针 分类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;Teacher *&amp;gt;::iterator it = v1.begin(); it != v1.end(); it++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; (*it)-&amp;gt;age &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//main11();// 容器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//main12();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	main13();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;hello...&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	system(&lt;span class=&quot;string&quot;&gt;&quot;pause&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;模板简要回顾&quot;&gt;&lt;a href=&quot;#模板简要回顾&quot; class=&quot;headerlink&quot; title=&quot;模板简要回顾&quot;&gt;&lt;/a&gt;模板简要回顾&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;    模板是实现代码重用机制的一种工具，实质就是实现类型参数化，即把类型定义为参数&lt;/li&gt;
&lt;li&gt;    函数模板就是建立一个通用的函数，其函数返回类型和形参类型不具体指定，而是用虚拟的类型来代表。&lt;/li&gt;
&lt;li&gt;    凡是函数体相同的函数都可以用函数模板来代替，不必定义多个函数，只需在模板中定义一次即可。&lt;/li&gt;
&lt;li&gt;    在调用函数时系统会根据实参的类型来取代模板中的虚拟类型，从而实现了不同函数的功能。&lt;/li&gt;
&lt;li&gt;    和函数模板一样，类模板就是建立一个通用类，其数据成员的类型、成员函数的返回类型和参数类形都可以不具体指定，而用虚拟的类型来代表。&lt;/li&gt;
&lt;li&gt;    当使用类模板建立对象时，系统会根据实参的类型取代类模板中的虚拟类型，从而实现不同类的功能。&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;p&gt;STL（Standard Template Library，标准模板库)是惠普实验室开发的一系列软件的统称。现然主要出现在C
    
    </summary>
    
      <category term="c/c++" scheme="http://yunvoo.com/categories/c-c/"/>
    
    
      <category term="STL" scheme="http://yunvoo.com/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>几张网络编程图</title>
    <link href="http://yunvoo.com//blog/2015/06/07/%E5%87%A0%E5%BC%A0%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%9B%BE.html"/>
    <id>http://yunvoo.com//blog/2015/06/07/几张网络编程图.html</id>
    <published>2015-06-06T16:00:00.000Z</published>
    <updated>2016-06-25T10:17:31.045Z</updated>
    
    <content type="html">&lt;h2 id=&quot;TCP&quot;&gt;&lt;a href=&quot;#TCP&quot; class=&quot;headerlink&quot; title=&quot;TCP&quot;&gt;&lt;/a&gt;TCP&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xrzzi.com1.z0.glb.clouddn.com/TCP.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;TCP报文段的首部格式&quot;&gt;&lt;a href=&quot;#TCP报文段的首部格式&quot; class=&quot;headerlink&quot; title=&quot;TCP报文段的首部格式&quot;&gt;&lt;/a&gt;TCP报文段的首部格式&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xrzzi.com1.z0.glb.clouddn.com/TCP%E6%8A%A5%E6%96%87%E6%AE%B5%E7%9A%84%E9%A6%96%E9%83%A8%E6%A0%BC%E5%BC%8F.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;socket连接图&quot;&gt;&lt;a href=&quot;#socket连接图&quot; class=&quot;headerlink&quot; title=&quot;socket连接图&quot;&gt;&lt;/a&gt;socket连接图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xrzzi.com1.z0.glb.clouddn.com/socket%E8%BF%9E%E6%8E%A5%E5%9B%BE.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;协议&quot;&gt;&lt;a href=&quot;#协议&quot; class=&quot;headerlink&quot; title=&quot;协议&quot;&gt;&lt;/a&gt;协议&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xrzzi.com1.z0.glb.clouddn.com/%E5%8D%8F%E8%AE%AE.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;断开连接状态&quot;&gt;&lt;a href=&quot;#断开连接状态&quot; class=&quot;headerlink&quot; title=&quot;断开连接状态&quot;&gt;&lt;/a&gt;断开连接状态&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xrzzi.com1.z0.glb.clouddn.com/%E6%96%AD%E5%BC%80%E8%BF%9E%E6%8E%A5%E7%8A%B6%E6%80%81.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;ARP工作流程&quot;&gt;&lt;a href=&quot;#ARP工作流程&quot; class=&quot;headerlink&quot; title=&quot;ARP工作流程&quot;&gt;&lt;/a&gt;ARP工作流程&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xrzzi.com1.z0.glb.clouddn.com/ARP%20%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;TCP&quot;&gt;&lt;a href=&quot;#TCP&quot; class=&quot;headerlink&quot; title=&quot;TCP&quot;&gt;&lt;/a&gt;TCP&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xrzzi.com1.z0.glb.clouddn.com/TCP.png&quot; alt=&quot;&quot;&gt;&lt;/
    
    </summary>
    
      <category term="linux" scheme="http://yunvoo.com/categories/linux/"/>
    
    
      <category term="网络编程" scheme="http://yunvoo.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>对于拖延症的建议</title>
    <link href="http://yunvoo.com//blog/2015/05/25/%E5%AF%B9%E4%BA%8E%E6%8B%96%E5%BB%B6%E7%97%87%E7%9A%84%E5%BB%BA%E8%AE%AE.html"/>
    <id>http://yunvoo.com//blog/2015/05/25/对于拖延症的建议.html</id>
    <published>2015-05-24T16:00:00.000Z</published>
    <updated>2016-06-23T09:27:13.624Z</updated>
    
    <content type="html">&lt;ol&gt;
&lt;li&gt;有意识地同时关注某一决定对当下以及未来造成的影响，而不是主要看眼前的结果。&lt;/li&gt;
&lt;li&gt;避免在多任务或者疲劳状态下做重要的决定。因为在这两种情况下，个体可能缺乏必要的心理资源（比如注意资源和意志力）去全面地思考问题。&lt;/li&gt;
&lt;li&gt;学会正确评估自身的拖延倾向。&lt;/li&gt;
&lt;li&gt;为自己设定不可逾越的最后期限，为需要长期投入的任务制定切实可行的计划并严格执行。&lt;/li&gt;
&lt;li&gt;考虑当前和未来结果时同时关注其相对具体的方面，比如要花多少时间，有多困难，以及相对抽象和具有目的性的方面，比如完成它意味着什么。&lt;/li&gt;
&lt;li&gt;学会正确评估未来的时间稀缺程度。一般情况下，如果一件事现在没时间做，未来也不太可能多出很多时间来让你做这件事。&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;有意识地同时关注某一决定对当下以及未来造成的影响，而不是主要看眼前的结果。&lt;/li&gt;
&lt;li&gt;避免在多任务或者疲劳状态下做重要的决定。因为在这两种情况下，个体可能缺乏必要的心理资源（比如注意资源和意志力）去全面地思考问题。&lt;/li&gt;
&lt;li&gt;学会正确评估自身的拖
    
    </summary>
    
      <category term="散文" scheme="http://yunvoo.com/categories/%E6%95%A3%E6%96%87/"/>
    
    
      <category term="建议" scheme="http://yunvoo.com/tags/%E5%BB%BA%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>类模板基本语法</title>
    <link href="http://yunvoo.com//blog/2015/05/21/%E7%B1%BB%E6%A8%A1%E6%9D%BF%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html"/>
    <id>http://yunvoo.com//blog/2015/05/21/类模板基本语法.html</id>
    <published>2015-05-20T16:00:00.000Z</published>
    <updated>2016-06-23T05:41:24.484Z</updated>
    
    <content type="html">&lt;h2 id=&quot;类模板基本语法&quot;&gt;&lt;a href=&quot;#类模板基本语法&quot; class=&quot;headerlink&quot; title=&quot;类模板基本语法&quot;&gt;&lt;/a&gt;类模板基本语法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1.先写出一个实际的类。由于其语义明确，含义清楚，一般不会出错。&lt;/li&gt;
&lt;li&gt;2.将此类中准备改变的类型名(如int要改变为float或char)改用一个自己指定的虚拟类型名&lt;/li&gt;
&lt;li&gt;3.在类声明前面加入一行，格式为：&lt;br&gt;  template &lt;class 虚拟类型参数=&quot;&quot;&gt;&lt;br&gt;如：&lt;br&gt;  template &lt;class numtype=&quot;&quot;&gt; //注意本行末尾无分号&lt;br&gt;  class Compare&lt;br&gt;  {…}; //类体&lt;/class&gt;&lt;/class&gt;&lt;/li&gt;
&lt;li&gt;4.用类模板定义对象时用以下形式：&lt;br&gt;  类模板名&amp;lt;实际类型名&amp;gt; 对象名;&lt;br&gt;  类模板名&amp;lt;实际类型名&amp;gt; 对象名(实参表列);&lt;br&gt;如：&lt;br&gt;  Compare&lt;int&gt; cmp;&lt;br&gt;  Compare&lt;int&gt; cmp(3,7);&lt;/int&gt;&lt;/int&gt;&lt;/li&gt;
&lt;li&gt;5.如果在类模板外定义成员函数，应写成类模板形式：&lt;br&gt; template &lt;class 虚拟类型参数=&quot;&quot;&gt;&lt;br&gt; 函数类型 类模板名&amp;lt;虚拟类型参数&amp;gt;::成员函数名(函数形参表列) {…}&lt;/class&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h3&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//A编程模板 类 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//模板类  类型参数化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//类模板的定义&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//类模板的使用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//类模板 做函数参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//模板类 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; T&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; A&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	A(T a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;-&amp;gt;a = a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;printA&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;a: &quot;&lt;/span&gt; &amp;lt;&amp;lt; a &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	T a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//从模板类 派生了 普通类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 模板类派生时, 需要具体化模板类. C++编译器需要知道 父类的数据类型具体是什么样子的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//=====&amp;gt; 要知道父类所占的内存大小是多少 只有数据类型固定下来,才知道如何分配内存 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; B : &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; A&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	B(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a=&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b=&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;) : A&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt;(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;-&amp;gt;b = b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;printB&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;a:&quot;&lt;/span&gt; &amp;lt;&amp;lt; a &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot; b: &quot;&lt;/span&gt; &amp;lt;&amp;lt; b &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//从模板类 派生 模板类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; C : &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; A&amp;lt;T&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	C(T c, T a) : A&amp;lt;T&amp;gt;(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;-&amp;gt;c = c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;printC&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;c:&quot;&lt;/span&gt; &amp;lt;&amp;lt; c &amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	T c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	C&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; c1(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	c1.printC();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	system(&lt;span class=&quot;string&quot;&gt;&quot;pause&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main62&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;B  &lt;span class=&quot;title&quot;&gt;b1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	b1.printB();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	system(&lt;span class=&quot;string&quot;&gt;&quot;pause&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//类模板 做函数参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//参数 ,C++编译器 要求具体的类 所以所 要 A&amp;lt;int&amp;gt; &amp;amp;a &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UseA&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( A&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; &amp;amp;a )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	a.printA();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main61&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//模板类(本身就是类型化的)====具体的类=====&amp;gt;定义具体的变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	A&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; a1(&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;), a2(&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;), a3(&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//模板类是抽象的  ====&amp;gt;需要进行 类型具体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//a1.printA();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	UseA(a1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	UseA(a2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	UseA(a3);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;hello...&quot;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	system(&lt;span class=&quot;string&quot;&gt;&quot;pause&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;关于类模板的几点说明&quot;&gt;&lt;a href=&quot;#关于类模板的几点说明&quot; class=&quot;headerlink&quot; title=&quot;关于类模板的几点说明&quot;&gt;&lt;/a&gt;关于类模板的几点说明&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1.类模板的类型参数可以有一个或多个，每个类型前面都必须加class，如：&lt;br&gt;  template &lt;class t1,class=&quot;&quot; t2=&quot;&quot;&gt;&lt;br&gt;  class someclass&lt;br&gt;  {…};&lt;br&gt;在定义对象时分别代入实际的类型名，如：&lt;br&gt;  someclass&lt;int,double&gt; obj;&lt;/int,double&gt;&lt;/class&gt;&lt;/li&gt;
&lt;li&gt;2.和使用类一样，使用类模板时要注意其作用域，只能在其有效作用域内用它定义对象。&lt;/li&gt;
&lt;li&gt;3.模板可以有层次，一个类模板可以作为基类，派生出派生模板类。&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;类模板基本语法&quot;&gt;&lt;a href=&quot;#类模板基本语法&quot; class=&quot;headerlink&quot; title=&quot;类模板基本语法&quot;&gt;&lt;/a&gt;类模板基本语法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1.先写出一个实际的类。由于其语义明确，含义清楚，一般不会出错。&lt;/li&gt;
&lt;li&gt;2.
    
    </summary>
    
    
      <category term="类模板" scheme="http://yunvoo.com/tags/%E7%B1%BB%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
</feed>
